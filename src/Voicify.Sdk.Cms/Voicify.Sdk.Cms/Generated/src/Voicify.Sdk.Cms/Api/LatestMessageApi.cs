/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILatestMessageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>LatestMessageResponseModel</returns>
        LatestMessageResponseModel AddAudioFile (string latestMessageResponseId, string mediaItemId);

        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        ApiResponse<LatestMessageResponseModel> AddAudioFileWithHttpInfo (string latestMessageResponseId, string mediaItemId);
        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>LatestMessageResponseModel</returns>
        LatestMessageResponseModel AddLargeImage (string latestMessageResponseId, string mediaItemId);

        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        ApiResponse<LatestMessageResponseModel> AddLargeImageWithHttpInfo (string latestMessageResponseId, string mediaItemId);
        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>LatestMessageResponseModel</returns>
        LatestMessageResponseModel AddSmallImage (string latestMessageResponseId, string mediaItemId);

        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        ApiResponse<LatestMessageResponseModel> AddSmallImageWithHttpInfo (string latestMessageResponseId, string mediaItemId);
        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>LatestMessageResponseModel</returns>
        LatestMessageResponseModel AddVideoFile (string latestMessageResponseId, string mediaItemId);

        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        ApiResponse<LatestMessageResponseModel> AddVideoFileWithHttpInfo (string latestMessageResponseId, string mediaItemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>LatestMessageWebhookModel</returns>
        LatestMessageWebhookModel AddWebhook (string latestMessageId, string webhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageWebhookModel</returns>
        ApiResponse<LatestMessageWebhookModel> AddWebhookWithHttpInfo (string latestMessageId, string webhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        LatestMessageModel BulkUpdateLatestMessage (string latestMessageId, BulkUpdateLatestMessageRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        ApiResponse<LatestMessageModel> BulkUpdateLatestMessageWithHttpInfo (string latestMessageId, BulkUpdateLatestMessageRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        LatestMessageModel BulkUpdateLatestMessageStub (string latestMessageId, BulkUpdateLatestMessageStubRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        ApiResponse<LatestMessageModel> BulkUpdateLatestMessageStubWithHttpInfo (string latestMessageId, BulkUpdateLatestMessageStubRequest model = null);
        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>LatestMessageModel</returns>
        LatestMessageModel CopyContentItem (string latestMessageId);

        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        ApiResponse<LatestMessageModel> CopyContentItemWithHttpInfo (string latestMessageId);
        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        LatestMessageModel CreateFullContentItem (LatestMessageModel model = null);

        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        ApiResponse<LatestMessageModel> CreateFullContentItemWithHttpInfo (LatestMessageModel model = null);
        /// <summary>
        /// Creates a new latest message entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        LatestMessageModel CreateLatestMessage (NewLatestMessageRequest model = null);

        /// <summary>
        /// Creates a new latest message entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        ApiResponse<LatestMessageModel> CreateLatestMessageWithHttpInfo (NewLatestMessageRequest model = null);
        /// <summary>
        /// Creates a new latest message entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        LatestMessageModel CreateLatestMessageStub (NewLatestMessageStubRequest model = null);

        /// <summary>
        /// Creates a new latest message entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        ApiResponse<LatestMessageModel> CreateLatestMessageStubWithHttpInfo (NewLatestMessageStubRequest model = null);
        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageResponseModel</returns>
        LatestMessageResponseModel CreateResponse (string latestMessageId, NewLatestMessageResponseRequest model = null);

        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        ApiResponse<LatestMessageResponseModel> CreateResponseWithHttpInfo (string latestMessageId, NewLatestMessageResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? CreateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> CreateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);
        /// <summary>
        /// Delete the given latest message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>LatestMessageModel</returns>
        LatestMessageModel DeleteLatestMessage (string latestMessageId);

        /// <summary>
        /// Delete the given latest message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        ApiResponse<LatestMessageModel> DeleteLatestMessageWithHttpInfo (string latestMessageId);
        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>LatestMessageResponseModel</returns>
        LatestMessageResponseModel DeleteResponse (string latestMessageResponseId);

        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        ApiResponse<LatestMessageResponseModel> DeleteResponseWithHttpInfo (string latestMessageResponseId);
        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>LatestMessageModel</returns>
        LatestMessageModel FindFullById (string id);

        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        ApiResponse<LatestMessageModel> FindFullByIdWithHttpInfo (string id);
        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;LatestMessageModel&gt;</returns>
        List<LatestMessageModel> GetByApplicationFeature (string applicationFeatureId);

        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;LatestMessageModel&gt;</returns>
        ApiResponse<List<LatestMessageModel>> GetByApplicationFeatureWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>List&lt;MediaItemModel&gt;</returns>
        List<MediaItemModel> GetMediaItemsForLatestMessage (string latestMessageResponseId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>ApiResponse of List&lt;MediaItemModel&gt;</returns>
        ApiResponse<List<MediaItemModel>> GetMediaItemsForLatestMessageWithHttpInfo (string latestMessageResponseId);
        /// <summary>
        /// Gets the latest messages content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;LatestMessageModel&gt;</returns>
        List<LatestMessageModel> GetMessagesForApplication (string applicationId);

        /// <summary>
        /// Gets the latest messages content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;LatestMessageModel&gt;</returns>
        ApiResponse<List<LatestMessageModel>> GetMessagesForApplicationWithHttpInfo (string applicationId);
        /// <summary>
        /// Gets the latest messages for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>List&lt;LatestMessageModel&gt;</returns>
        List<LatestMessageModel> GetMessagesForModule (string applicationModuleId);

        /// <summary>
        /// Gets the latest messages for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>ApiResponse of List&lt;LatestMessageModel&gt;</returns>
        ApiResponse<List<LatestMessageModel>> GetMessagesForModuleWithHttpInfo (string applicationModuleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>List&lt;LatestMessageWebhookModel&gt;</returns>
        List<LatestMessageWebhookModel> GetWebhooks (string latestMessageId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>ApiResponse of List&lt;LatestMessageWebhookModel&gt;</returns>
        ApiResponse<List<LatestMessageWebhookModel>> GetWebhooksWithHttpInfo (string latestMessageId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>LatestMessageModel</returns>
        LatestMessageModel MoveContentItemToApplicationFeature (string contentItemId, string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        ApiResponse<LatestMessageModel> MoveContentItemToApplicationFeatureWithHttpInfo (string contentItemId, string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>bool?</returns>
        bool? RemoveUserDefinedParameter (string instanceWebhookId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> RemoveUserDefinedParameterWithHttpInfo (string instanceWebhookId, string parameterName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageWebhookId"></param>
        /// <returns>LatestMessageWebhookModel</returns>
        LatestMessageWebhookModel RemoveWebhook (string latestMessageWebhookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageWebhookId"></param>
        /// <returns>ApiResponse of LatestMessageWebhookModel</returns>
        ApiResponse<LatestMessageWebhookModel> RemoveWebhookWithHttpInfo (string latestMessageWebhookId);
        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        LatestMessageModel ToggleLive (string latestMessageId, ToggleLiveRequest model = null);

        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        ApiResponse<LatestMessageModel> ToggleLiveWithHttpInfo (string latestMessageId, ToggleLiveRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>LatestMessageWebhookModel</returns>
        LatestMessageWebhookModel UpdateAttachedWebhook (string latestMessageId, string webhookInstanceId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageWebhookModel</returns>
        ApiResponse<LatestMessageWebhookModel> UpdateAttachedWebhookWithHttpInfo (string latestMessageId, string webhookInstanceId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        LatestMessageModel UpdateFullContentItem (string contentItemId, LatestMessageModel model = null);

        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        ApiResponse<LatestMessageModel> UpdateFullContentItemWithHttpInfo (string contentItemId, LatestMessageModel model = null);
        /// <summary>
        /// Updates the latest message with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        LatestMessageModel UpdateMessage (string latestMessageId, UpdateLatestMessageRequest model = null);

        /// <summary>
        /// Updates the latest message with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        ApiResponse<LatestMessageModel> UpdateMessageWithHttpInfo (string latestMessageId, UpdateLatestMessageRequest model = null);
        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageResponseModel</returns>
        LatestMessageResponseModel UpdateResponse (string latestMessageResponseId, UpdateLatestMessageResponseRequest model = null);

        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        ApiResponse<LatestMessageResponseModel> UpdateResponseWithHttpInfo (string latestMessageResponseId, UpdateLatestMessageResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? UpdateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UpdateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? UpdateWebhookParameter (string instanceWebhookId, WebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UpdateWebhookParameterWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        System.Threading.Tasks.Task<LatestMessageResponseModel> AddAudioFileAsync (string latestMessageResponseId, string mediaItemId);

        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> AddAudioFileAsyncWithHttpInfo (string latestMessageResponseId, string mediaItemId);
        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        System.Threading.Tasks.Task<LatestMessageResponseModel> AddLargeImageAsync (string latestMessageResponseId, string mediaItemId);

        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> AddLargeImageAsyncWithHttpInfo (string latestMessageResponseId, string mediaItemId);
        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        System.Threading.Tasks.Task<LatestMessageResponseModel> AddSmallImageAsync (string latestMessageResponseId, string mediaItemId);

        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> AddSmallImageAsyncWithHttpInfo (string latestMessageResponseId, string mediaItemId);
        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        System.Threading.Tasks.Task<LatestMessageResponseModel> AddVideoFileAsync (string latestMessageResponseId, string mediaItemId);

        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> AddVideoFileAsyncWithHttpInfo (string latestMessageResponseId, string mediaItemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of LatestMessageWebhookModel</returns>
        System.Threading.Tasks.Task<LatestMessageWebhookModel> AddWebhookAsync (string latestMessageId, string webhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageWebhookModel>> AddWebhookAsyncWithHttpInfo (string latestMessageId, string webhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        System.Threading.Tasks.Task<LatestMessageModel> BulkUpdateLatestMessageAsync (string latestMessageId, BulkUpdateLatestMessageRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> BulkUpdateLatestMessageAsyncWithHttpInfo (string latestMessageId, BulkUpdateLatestMessageRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        System.Threading.Tasks.Task<LatestMessageModel> BulkUpdateLatestMessageStubAsync (string latestMessageId, BulkUpdateLatestMessageStubRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> BulkUpdateLatestMessageStubAsyncWithHttpInfo (string latestMessageId, BulkUpdateLatestMessageStubRequest model = null);
        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>Task of LatestMessageModel</returns>
        System.Threading.Tasks.Task<LatestMessageModel> CopyContentItemAsync (string latestMessageId);

        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> CopyContentItemAsyncWithHttpInfo (string latestMessageId);
        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        System.Threading.Tasks.Task<LatestMessageModel> CreateFullContentItemAsync (LatestMessageModel model = null);

        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> CreateFullContentItemAsyncWithHttpInfo (LatestMessageModel model = null);
        /// <summary>
        /// Creates a new latest message entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        System.Threading.Tasks.Task<LatestMessageModel> CreateLatestMessageAsync (NewLatestMessageRequest model = null);

        /// <summary>
        /// Creates a new latest message entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> CreateLatestMessageAsyncWithHttpInfo (NewLatestMessageRequest model = null);
        /// <summary>
        /// Creates a new latest message entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        System.Threading.Tasks.Task<LatestMessageModel> CreateLatestMessageStubAsync (NewLatestMessageStubRequest model = null);

        /// <summary>
        /// Creates a new latest message entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> CreateLatestMessageStubAsyncWithHttpInfo (NewLatestMessageStubRequest model = null);
        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        System.Threading.Tasks.Task<LatestMessageResponseModel> CreateResponseAsync (string latestMessageId, NewLatestMessageResponseRequest model = null);

        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> CreateResponseAsyncWithHttpInfo (string latestMessageId, NewLatestMessageResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> CreateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> CreateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);
        /// <summary>
        /// Delete the given latest message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>Task of LatestMessageModel</returns>
        System.Threading.Tasks.Task<LatestMessageModel> DeleteLatestMessageAsync (string latestMessageId);

        /// <summary>
        /// Delete the given latest message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> DeleteLatestMessageAsyncWithHttpInfo (string latestMessageId);
        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        System.Threading.Tasks.Task<LatestMessageResponseModel> DeleteResponseAsync (string latestMessageResponseId);

        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> DeleteResponseAsyncWithHttpInfo (string latestMessageResponseId);
        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of LatestMessageModel</returns>
        System.Threading.Tasks.Task<LatestMessageModel> FindFullByIdAsync (string id);

        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> FindFullByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;LatestMessageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LatestMessageModel>> GetByApplicationFeatureAsync (string applicationFeatureId);

        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;LatestMessageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LatestMessageModel>>> GetByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>Task of List&lt;MediaItemModel&gt;</returns>
        System.Threading.Tasks.Task<List<MediaItemModel>> GetMediaItemsForLatestMessageAsync (string latestMessageResponseId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>Task of ApiResponse (List&lt;MediaItemModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MediaItemModel>>> GetMediaItemsForLatestMessageAsyncWithHttpInfo (string latestMessageResponseId);
        /// <summary>
        /// Gets the latest messages content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;LatestMessageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LatestMessageModel>> GetMessagesForApplicationAsync (string applicationId);

        /// <summary>
        /// Gets the latest messages content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;LatestMessageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LatestMessageModel>>> GetMessagesForApplicationAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// Gets the latest messages for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of List&lt;LatestMessageModel&gt;</returns>
        System.Threading.Tasks.Task<List<LatestMessageModel>> GetMessagesForModuleAsync (string applicationModuleId);

        /// <summary>
        /// Gets the latest messages for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of ApiResponse (List&lt;LatestMessageModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LatestMessageModel>>> GetMessagesForModuleAsyncWithHttpInfo (string applicationModuleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>Task of List&lt;LatestMessageWebhookModel&gt;</returns>
        System.Threading.Tasks.Task<List<LatestMessageWebhookModel>> GetWebhooksAsync (string latestMessageId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>Task of ApiResponse (List&lt;LatestMessageWebhookModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LatestMessageWebhookModel>>> GetWebhooksAsyncWithHttpInfo (string latestMessageId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of LatestMessageModel</returns>
        System.Threading.Tasks.Task<LatestMessageModel> MoveContentItemToApplicationFeatureAsync (string contentItemId, string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> MoveContentItemToApplicationFeatureAsyncWithHttpInfo (string contentItemId, string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> RemoveUserDefinedParameterAsync (string instanceWebhookId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> RemoveUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, string parameterName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageWebhookId"></param>
        /// <returns>Task of LatestMessageWebhookModel</returns>
        System.Threading.Tasks.Task<LatestMessageWebhookModel> RemoveWebhookAsync (string latestMessageWebhookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageWebhookId"></param>
        /// <returns>Task of ApiResponse (LatestMessageWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageWebhookModel>> RemoveWebhookAsyncWithHttpInfo (string latestMessageWebhookId);
        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        System.Threading.Tasks.Task<LatestMessageModel> ToggleLiveAsync (string latestMessageId, ToggleLiveRequest model = null);

        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> ToggleLiveAsyncWithHttpInfo (string latestMessageId, ToggleLiveRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of LatestMessageWebhookModel</returns>
        System.Threading.Tasks.Task<LatestMessageWebhookModel> UpdateAttachedWebhookAsync (string latestMessageId, string webhookInstanceId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageWebhookModel>> UpdateAttachedWebhookAsyncWithHttpInfo (string latestMessageId, string webhookInstanceId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        System.Threading.Tasks.Task<LatestMessageModel> UpdateFullContentItemAsync (string contentItemId, LatestMessageModel model = null);

        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> UpdateFullContentItemAsyncWithHttpInfo (string contentItemId, LatestMessageModel model = null);
        /// <summary>
        /// Updates the latest message with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        System.Threading.Tasks.Task<LatestMessageModel> UpdateMessageAsync (string latestMessageId, UpdateLatestMessageRequest model = null);

        /// <summary>
        /// Updates the latest message with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> UpdateMessageAsyncWithHttpInfo (string latestMessageId, UpdateLatestMessageRequest model = null);
        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        System.Threading.Tasks.Task<LatestMessageResponseModel> UpdateResponseAsync (string latestMessageResponseId, UpdateLatestMessageResponseRequest model = null);

        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> UpdateResponseAsyncWithHttpInfo (string latestMessageResponseId, UpdateLatestMessageResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UpdateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UpdateWebhookParameterAsync (string instanceWebhookId, WebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateWebhookParameterAsyncWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LatestMessageApi : ILatestMessageApi
    {
        private Voicify.Sdk.Cms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LatestMessageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LatestMessageApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Cms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LatestMessageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LatestMessageApi(Voicify.Sdk.Cms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Cms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Cms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Cms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>LatestMessageResponseModel</returns>
        public LatestMessageResponseModel AddAudioFile (string latestMessageResponseId, string mediaItemId)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = AddAudioFileWithHttpInfo(latestMessageResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        public ApiResponse< LatestMessageResponseModel > AddAudioFileWithHttpInfo (string latestMessageResponseId, string mediaItemId)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->AddAudioFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling LatestMessageApi->AddAudioFile");

            var localVarPath = "/api/LatestMessage/{latestMessageResponseId}/addAudioFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAudioFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageResponseModel> AddAudioFileAsync (string latestMessageResponseId, string mediaItemId)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = await AddAudioFileAsyncWithHttpInfo(latestMessageResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> AddAudioFileAsyncWithHttpInfo (string latestMessageResponseId, string mediaItemId)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->AddAudioFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling LatestMessageApi->AddAudioFile");

            var localVarPath = "/api/LatestMessage/{latestMessageResponseId}/addAudioFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAudioFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>LatestMessageResponseModel</returns>
        public LatestMessageResponseModel AddLargeImage (string latestMessageResponseId, string mediaItemId)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = AddLargeImageWithHttpInfo(latestMessageResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        public ApiResponse< LatestMessageResponseModel > AddLargeImageWithHttpInfo (string latestMessageResponseId, string mediaItemId)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->AddLargeImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling LatestMessageApi->AddLargeImage");

            var localVarPath = "/api/LatestMessage/{latestMessageResponseId}/addLargeImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLargeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageResponseModel> AddLargeImageAsync (string latestMessageResponseId, string mediaItemId)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = await AddLargeImageAsyncWithHttpInfo(latestMessageResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> AddLargeImageAsyncWithHttpInfo (string latestMessageResponseId, string mediaItemId)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->AddLargeImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling LatestMessageApi->AddLargeImage");

            var localVarPath = "/api/LatestMessage/{latestMessageResponseId}/addLargeImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLargeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>LatestMessageResponseModel</returns>
        public LatestMessageResponseModel AddSmallImage (string latestMessageResponseId, string mediaItemId)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = AddSmallImageWithHttpInfo(latestMessageResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        public ApiResponse< LatestMessageResponseModel > AddSmallImageWithHttpInfo (string latestMessageResponseId, string mediaItemId)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->AddSmallImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling LatestMessageApi->AddSmallImage");

            var localVarPath = "/api/LatestMessage/{latestMessageResponseId}/addSmallImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSmallImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageResponseModel> AddSmallImageAsync (string latestMessageResponseId, string mediaItemId)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = await AddSmallImageAsyncWithHttpInfo(latestMessageResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> AddSmallImageAsyncWithHttpInfo (string latestMessageResponseId, string mediaItemId)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->AddSmallImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling LatestMessageApi->AddSmallImage");

            var localVarPath = "/api/LatestMessage/{latestMessageResponseId}/addSmallImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSmallImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>LatestMessageResponseModel</returns>
        public LatestMessageResponseModel AddVideoFile (string latestMessageResponseId, string mediaItemId)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = AddVideoFileWithHttpInfo(latestMessageResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        public ApiResponse< LatestMessageResponseModel > AddVideoFileWithHttpInfo (string latestMessageResponseId, string mediaItemId)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->AddVideoFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling LatestMessageApi->AddVideoFile");

            var localVarPath = "/api/LatestMessage/{latestMessageResponseId}/addVideoFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVideoFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageResponseModel> AddVideoFileAsync (string latestMessageResponseId, string mediaItemId)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = await AddVideoFileAsyncWithHttpInfo(latestMessageResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> AddVideoFileAsyncWithHttpInfo (string latestMessageResponseId, string mediaItemId)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->AddVideoFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling LatestMessageApi->AddVideoFile");

            var localVarPath = "/api/LatestMessage/{latestMessageResponseId}/addVideoFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVideoFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>LatestMessageWebhookModel</returns>
        public LatestMessageWebhookModel AddWebhook (string latestMessageId, string webhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<LatestMessageWebhookModel> localVarResponse = AddWebhookWithHttpInfo(latestMessageId, webhookId, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageWebhookModel</returns>
        public ApiResponse< LatestMessageWebhookModel > AddWebhookWithHttpInfo (string latestMessageId, string webhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->AddWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling LatestMessageApi->AddWebhook");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of LatestMessageWebhookModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageWebhookModel> AddWebhookAsync (string latestMessageId, string webhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<LatestMessageWebhookModel> localVarResponse = await AddWebhookAsyncWithHttpInfo(latestMessageId, webhookId, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageWebhookModel>> AddWebhookAsyncWithHttpInfo (string latestMessageId, string webhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->AddWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling LatestMessageApi->AddWebhook");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        public LatestMessageModel BulkUpdateLatestMessage (string latestMessageId, BulkUpdateLatestMessageRequest model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = BulkUpdateLatestMessageWithHttpInfo(latestMessageId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        public ApiResponse< LatestMessageModel > BulkUpdateLatestMessageWithHttpInfo (string latestMessageId, BulkUpdateLatestMessageRequest model = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->BulkUpdateLatestMessage");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/bulkUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateLatestMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageModel> BulkUpdateLatestMessageAsync (string latestMessageId, BulkUpdateLatestMessageRequest model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = await BulkUpdateLatestMessageAsyncWithHttpInfo(latestMessageId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> BulkUpdateLatestMessageAsyncWithHttpInfo (string latestMessageId, BulkUpdateLatestMessageRequest model = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->BulkUpdateLatestMessage");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/bulkUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateLatestMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        public LatestMessageModel BulkUpdateLatestMessageStub (string latestMessageId, BulkUpdateLatestMessageStubRequest model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = BulkUpdateLatestMessageStubWithHttpInfo(latestMessageId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        public ApiResponse< LatestMessageModel > BulkUpdateLatestMessageStubWithHttpInfo (string latestMessageId, BulkUpdateLatestMessageStubRequest model = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->BulkUpdateLatestMessageStub");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/bulkUpdate/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateLatestMessageStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageModel> BulkUpdateLatestMessageStubAsync (string latestMessageId, BulkUpdateLatestMessageStubRequest model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = await BulkUpdateLatestMessageStubAsyncWithHttpInfo(latestMessageId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> BulkUpdateLatestMessageStubAsyncWithHttpInfo (string latestMessageId, BulkUpdateLatestMessageStubRequest model = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->BulkUpdateLatestMessageStub");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/bulkUpdate/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateLatestMessageStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>LatestMessageModel</returns>
        public LatestMessageModel CopyContentItem (string latestMessageId)
        {
             ApiResponse<LatestMessageModel> localVarResponse = CopyContentItemWithHttpInfo(latestMessageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        public ApiResponse< LatestMessageModel > CopyContentItemWithHttpInfo (string latestMessageId)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->CopyContentItem");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>Task of LatestMessageModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageModel> CopyContentItemAsync (string latestMessageId)
        {
             ApiResponse<LatestMessageModel> localVarResponse = await CopyContentItemAsyncWithHttpInfo(latestMessageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> CopyContentItemAsyncWithHttpInfo (string latestMessageId)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->CopyContentItem");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        public LatestMessageModel CreateFullContentItem (LatestMessageModel model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = CreateFullContentItemWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        public ApiResponse< LatestMessageModel > CreateFullContentItemWithHttpInfo (LatestMessageModel model = null)
        {

            var localVarPath = "/api/LatestMessage/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageModel> CreateFullContentItemAsync (LatestMessageModel model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = await CreateFullContentItemAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> CreateFullContentItemAsyncWithHttpInfo (LatestMessageModel model = null)
        {

            var localVarPath = "/api/LatestMessage/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Creates a new latest message entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        public LatestMessageModel CreateLatestMessage (NewLatestMessageRequest model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = CreateLatestMessageWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new latest message entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        public ApiResponse< LatestMessageModel > CreateLatestMessageWithHttpInfo (NewLatestMessageRequest model = null)
        {

            var localVarPath = "/api/LatestMessage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLatestMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Creates a new latest message entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageModel> CreateLatestMessageAsync (NewLatestMessageRequest model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = await CreateLatestMessageAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new latest message entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> CreateLatestMessageAsyncWithHttpInfo (NewLatestMessageRequest model = null)
        {

            var localVarPath = "/api/LatestMessage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLatestMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Creates a new latest message entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        public LatestMessageModel CreateLatestMessageStub (NewLatestMessageStubRequest model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = CreateLatestMessageStubWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new latest message entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        public ApiResponse< LatestMessageModel > CreateLatestMessageStubWithHttpInfo (NewLatestMessageStubRequest model = null)
        {

            var localVarPath = "/api/LatestMessage/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLatestMessageStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Creates a new latest message entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageModel> CreateLatestMessageStubAsync (NewLatestMessageStubRequest model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = await CreateLatestMessageStubAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new latest message entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> CreateLatestMessageStubAsyncWithHttpInfo (NewLatestMessageStubRequest model = null)
        {

            var localVarPath = "/api/LatestMessage/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLatestMessageStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageResponseModel</returns>
        public LatestMessageResponseModel CreateResponse (string latestMessageId, NewLatestMessageResponseRequest model = null)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = CreateResponseWithHttpInfo(latestMessageId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        public ApiResponse< LatestMessageResponseModel > CreateResponseWithHttpInfo (string latestMessageId, NewLatestMessageResponseRequest model = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->CreateResponse");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageResponseModel> CreateResponseAsync (string latestMessageId, NewLatestMessageResponseRequest model = null)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = await CreateResponseAsyncWithHttpInfo(latestMessageId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> CreateResponseAsyncWithHttpInfo (string latestMessageId, NewLatestMessageResponseRequest model = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->CreateResponse");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? CreateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = CreateUserDefinedParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > CreateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling LatestMessageApi->CreateUserDefinedParameter");

            var localVarPath = "/api/LatestMessage/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> CreateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await CreateUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> CreateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling LatestMessageApi->CreateUserDefinedParameter");

            var localVarPath = "/api/LatestMessage/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Delete the given latest message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>LatestMessageModel</returns>
        public LatestMessageModel DeleteLatestMessage (string latestMessageId)
        {
             ApiResponse<LatestMessageModel> localVarResponse = DeleteLatestMessageWithHttpInfo(latestMessageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the given latest message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        public ApiResponse< LatestMessageModel > DeleteLatestMessageWithHttpInfo (string latestMessageId)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->DeleteLatestMessage");

            var localVarPath = "/api/LatestMessage/{latestMessageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLatestMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Delete the given latest message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>Task of LatestMessageModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageModel> DeleteLatestMessageAsync (string latestMessageId)
        {
             ApiResponse<LatestMessageModel> localVarResponse = await DeleteLatestMessageAsyncWithHttpInfo(latestMessageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the given latest message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> DeleteLatestMessageAsyncWithHttpInfo (string latestMessageId)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->DeleteLatestMessage");

            var localVarPath = "/api/LatestMessage/{latestMessageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLatestMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>LatestMessageResponseModel</returns>
        public LatestMessageResponseModel DeleteResponse (string latestMessageResponseId)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = DeleteResponseWithHttpInfo(latestMessageResponseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        public ApiResponse< LatestMessageResponseModel > DeleteResponseWithHttpInfo (string latestMessageResponseId)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->DeleteResponse");

            var localVarPath = "/api/LatestMessage/response/{latestMessageResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageResponseModel> DeleteResponseAsync (string latestMessageResponseId)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = await DeleteResponseAsyncWithHttpInfo(latestMessageResponseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> DeleteResponseAsyncWithHttpInfo (string latestMessageResponseId)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->DeleteResponse");

            var localVarPath = "/api/LatestMessage/response/{latestMessageResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>LatestMessageModel</returns>
        public LatestMessageModel FindFullById (string id)
        {
             ApiResponse<LatestMessageModel> localVarResponse = FindFullByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        public ApiResponse< LatestMessageModel > FindFullByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LatestMessageApi->FindFullById");

            var localVarPath = "/api/LatestMessage/full/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFullById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of LatestMessageModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageModel> FindFullByIdAsync (string id)
        {
             ApiResponse<LatestMessageModel> localVarResponse = await FindFullByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> FindFullByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LatestMessageApi->FindFullById");

            var localVarPath = "/api/LatestMessage/full/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFullById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;LatestMessageModel&gt;</returns>
        public List<LatestMessageModel> GetByApplicationFeature (string applicationFeatureId)
        {
             ApiResponse<List<LatestMessageModel>> localVarResponse = GetByApplicationFeatureWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;LatestMessageModel&gt;</returns>
        public ApiResponse< List<LatestMessageModel> > GetByApplicationFeatureWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling LatestMessageApi->GetByApplicationFeature");

            var localVarPath = "/api/LatestMessage/byFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LatestMessageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LatestMessageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LatestMessageModel>)));
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;LatestMessageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LatestMessageModel>> GetByApplicationFeatureAsync (string applicationFeatureId)
        {
             ApiResponse<List<LatestMessageModel>> localVarResponse = await GetByApplicationFeatureAsyncWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;LatestMessageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LatestMessageModel>>> GetByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling LatestMessageApi->GetByApplicationFeature");

            var localVarPath = "/api/LatestMessage/byFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LatestMessageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LatestMessageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LatestMessageModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>List&lt;MediaItemModel&gt;</returns>
        public List<MediaItemModel> GetMediaItemsForLatestMessage (string latestMessageResponseId)
        {
             ApiResponse<List<MediaItemModel>> localVarResponse = GetMediaItemsForLatestMessageWithHttpInfo(latestMessageResponseId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>ApiResponse of List&lt;MediaItemModel&gt;</returns>
        public ApiResponse< List<MediaItemModel> > GetMediaItemsForLatestMessageWithHttpInfo (string latestMessageResponseId)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->GetMediaItemsForLatestMessage");

            var localVarPath = "/api/LatestMessage/response/{latestMessageResponseId}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMediaItemsForLatestMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MediaItemModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MediaItemModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MediaItemModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>Task of List&lt;MediaItemModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<MediaItemModel>> GetMediaItemsForLatestMessageAsync (string latestMessageResponseId)
        {
             ApiResponse<List<MediaItemModel>> localVarResponse = await GetMediaItemsForLatestMessageAsyncWithHttpInfo(latestMessageResponseId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <returns>Task of ApiResponse (List&lt;MediaItemModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MediaItemModel>>> GetMediaItemsForLatestMessageAsyncWithHttpInfo (string latestMessageResponseId)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->GetMediaItemsForLatestMessage");

            var localVarPath = "/api/LatestMessage/response/{latestMessageResponseId}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMediaItemsForLatestMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MediaItemModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MediaItemModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MediaItemModel>)));
        }

        /// <summary>
        /// Gets the latest messages content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;LatestMessageModel&gt;</returns>
        public List<LatestMessageModel> GetMessagesForApplication (string applicationId)
        {
             ApiResponse<List<LatestMessageModel>> localVarResponse = GetMessagesForApplicationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the latest messages content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;LatestMessageModel&gt;</returns>
        public ApiResponse< List<LatestMessageModel> > GetMessagesForApplicationWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LatestMessageApi->GetMessagesForApplication");

            var localVarPath = "/api/LatestMessage/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LatestMessageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LatestMessageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LatestMessageModel>)));
        }

        /// <summary>
        /// Gets the latest messages content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;LatestMessageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LatestMessageModel>> GetMessagesForApplicationAsync (string applicationId)
        {
             ApiResponse<List<LatestMessageModel>> localVarResponse = await GetMessagesForApplicationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the latest messages content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;LatestMessageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LatestMessageModel>>> GetMessagesForApplicationAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling LatestMessageApi->GetMessagesForApplication");

            var localVarPath = "/api/LatestMessage/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LatestMessageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LatestMessageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LatestMessageModel>)));
        }

        /// <summary>
        /// Gets the latest messages for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>List&lt;LatestMessageModel&gt;</returns>
        public List<LatestMessageModel> GetMessagesForModule (string applicationModuleId)
        {
             ApiResponse<List<LatestMessageModel>> localVarResponse = GetMessagesForModuleWithHttpInfo(applicationModuleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the latest messages for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>ApiResponse of List&lt;LatestMessageModel&gt;</returns>
        public ApiResponse< List<LatestMessageModel> > GetMessagesForModuleWithHttpInfo (string applicationModuleId)
        {
            // verify the required parameter 'applicationModuleId' is set
            if (applicationModuleId == null)
                throw new ApiException(400, "Missing required parameter 'applicationModuleId' when calling LatestMessageApi->GetMessagesForModule");

            var localVarPath = "/api/LatestMessage/module/{applicationModuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationModuleId != null) localVarPathParams.Add("applicationModuleId", this.Configuration.ApiClient.ParameterToString(applicationModuleId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LatestMessageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LatestMessageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LatestMessageModel>)));
        }

        /// <summary>
        /// Gets the latest messages for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of List&lt;LatestMessageModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LatestMessageModel>> GetMessagesForModuleAsync (string applicationModuleId)
        {
             ApiResponse<List<LatestMessageModel>> localVarResponse = await GetMessagesForModuleAsyncWithHttpInfo(applicationModuleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the latest messages for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of ApiResponse (List&lt;LatestMessageModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LatestMessageModel>>> GetMessagesForModuleAsyncWithHttpInfo (string applicationModuleId)
        {
            // verify the required parameter 'applicationModuleId' is set
            if (applicationModuleId == null)
                throw new ApiException(400, "Missing required parameter 'applicationModuleId' when calling LatestMessageApi->GetMessagesForModule");

            var localVarPath = "/api/LatestMessage/module/{applicationModuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationModuleId != null) localVarPathParams.Add("applicationModuleId", this.Configuration.ApiClient.ParameterToString(applicationModuleId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LatestMessageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LatestMessageModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LatestMessageModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>List&lt;LatestMessageWebhookModel&gt;</returns>
        public List<LatestMessageWebhookModel> GetWebhooks (string latestMessageId)
        {
             ApiResponse<List<LatestMessageWebhookModel>> localVarResponse = GetWebhooksWithHttpInfo(latestMessageId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>ApiResponse of List&lt;LatestMessageWebhookModel&gt;</returns>
        public ApiResponse< List<LatestMessageWebhookModel> > GetWebhooksWithHttpInfo (string latestMessageId)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->GetWebhooks");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LatestMessageWebhookModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LatestMessageWebhookModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LatestMessageWebhookModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>Task of List&lt;LatestMessageWebhookModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LatestMessageWebhookModel>> GetWebhooksAsync (string latestMessageId)
        {
             ApiResponse<List<LatestMessageWebhookModel>> localVarResponse = await GetWebhooksAsyncWithHttpInfo(latestMessageId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <returns>Task of ApiResponse (List&lt;LatestMessageWebhookModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LatestMessageWebhookModel>>> GetWebhooksAsyncWithHttpInfo (string latestMessageId)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->GetWebhooks");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LatestMessageWebhookModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LatestMessageWebhookModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LatestMessageWebhookModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>LatestMessageModel</returns>
        public LatestMessageModel MoveContentItemToApplicationFeature (string contentItemId, string applicationFeatureId)
        {
             ApiResponse<LatestMessageModel> localVarResponse = MoveContentItemToApplicationFeatureWithHttpInfo(contentItemId, applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        public ApiResponse< LatestMessageModel > MoveContentItemToApplicationFeatureWithHttpInfo (string contentItemId, string applicationFeatureId)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling LatestMessageApi->MoveContentItemToApplicationFeature");
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling LatestMessageApi->MoveContentItemToApplicationFeature");

            var localVarPath = "/api/LatestMessage/{contentItemId}/MoveToFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveContentItemToApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of LatestMessageModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageModel> MoveContentItemToApplicationFeatureAsync (string contentItemId, string applicationFeatureId)
        {
             ApiResponse<LatestMessageModel> localVarResponse = await MoveContentItemToApplicationFeatureAsyncWithHttpInfo(contentItemId, applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> MoveContentItemToApplicationFeatureAsyncWithHttpInfo (string contentItemId, string applicationFeatureId)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling LatestMessageApi->MoveContentItemToApplicationFeature");
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling LatestMessageApi->MoveContentItemToApplicationFeature");

            var localVarPath = "/api/LatestMessage/{contentItemId}/MoveToFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveContentItemToApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>bool?</returns>
        public bool? RemoveUserDefinedParameter (string instanceWebhookId, string parameterName)
        {
             ApiResponse<bool?> localVarResponse = RemoveUserDefinedParameterWithHttpInfo(instanceWebhookId, parameterName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > RemoveUserDefinedParameterWithHttpInfo (string instanceWebhookId, string parameterName)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling LatestMessageApi->RemoveUserDefinedParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling LatestMessageApi->RemoveUserDefinedParameter");

            var localVarPath = "/api/LatestMessage/webhook/{instanceWebhookId}/userParameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> RemoveUserDefinedParameterAsync (string instanceWebhookId, string parameterName)
        {
             ApiResponse<bool?> localVarResponse = await RemoveUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, parameterName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> RemoveUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, string parameterName)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling LatestMessageApi->RemoveUserDefinedParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling LatestMessageApi->RemoveUserDefinedParameter");

            var localVarPath = "/api/LatestMessage/webhook/{instanceWebhookId}/userParameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageWebhookId"></param>
        /// <returns>LatestMessageWebhookModel</returns>
        public LatestMessageWebhookModel RemoveWebhook (string latestMessageWebhookId)
        {
             ApiResponse<LatestMessageWebhookModel> localVarResponse = RemoveWebhookWithHttpInfo(latestMessageWebhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageWebhookId"></param>
        /// <returns>ApiResponse of LatestMessageWebhookModel</returns>
        public ApiResponse< LatestMessageWebhookModel > RemoveWebhookWithHttpInfo (string latestMessageWebhookId)
        {
            // verify the required parameter 'latestMessageWebhookId' is set
            if (latestMessageWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageWebhookId' when calling LatestMessageApi->RemoveWebhook");

            var localVarPath = "/api/LatestMessage/webhook/{latestMessageWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageWebhookId != null) localVarPathParams.Add("latestMessageWebhookId", this.Configuration.ApiClient.ParameterToString(latestMessageWebhookId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageWebhookId"></param>
        /// <returns>Task of LatestMessageWebhookModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageWebhookModel> RemoveWebhookAsync (string latestMessageWebhookId)
        {
             ApiResponse<LatestMessageWebhookModel> localVarResponse = await RemoveWebhookAsyncWithHttpInfo(latestMessageWebhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageWebhookId"></param>
        /// <returns>Task of ApiResponse (LatestMessageWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageWebhookModel>> RemoveWebhookAsyncWithHttpInfo (string latestMessageWebhookId)
        {
            // verify the required parameter 'latestMessageWebhookId' is set
            if (latestMessageWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageWebhookId' when calling LatestMessageApi->RemoveWebhook");

            var localVarPath = "/api/LatestMessage/webhook/{latestMessageWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageWebhookId != null) localVarPathParams.Add("latestMessageWebhookId", this.Configuration.ApiClient.ParameterToString(latestMessageWebhookId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageWebhookModel)));
        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        public LatestMessageModel ToggleLive (string latestMessageId, ToggleLiveRequest model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = ToggleLiveWithHttpInfo(latestMessageId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        public ApiResponse< LatestMessageModel > ToggleLiveWithHttpInfo (string latestMessageId, ToggleLiveRequest model = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->ToggleLive");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/isLive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ToggleLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageModel> ToggleLiveAsync (string latestMessageId, ToggleLiveRequest model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = await ToggleLiveAsyncWithHttpInfo(latestMessageId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> ToggleLiveAsyncWithHttpInfo (string latestMessageId, ToggleLiveRequest model = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->ToggleLive");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/isLive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ToggleLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>LatestMessageWebhookModel</returns>
        public LatestMessageWebhookModel UpdateAttachedWebhook (string latestMessageId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<LatestMessageWebhookModel> localVarResponse = UpdateAttachedWebhookWithHttpInfo(latestMessageId, webhookInstanceId, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageWebhookModel</returns>
        public ApiResponse< LatestMessageWebhookModel > UpdateAttachedWebhookWithHttpInfo (string latestMessageId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->UpdateAttachedWebhook");
            // verify the required parameter 'webhookInstanceId' is set
            if (webhookInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'webhookInstanceId' when calling LatestMessageApi->UpdateAttachedWebhook");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/webhooks/{webhookInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (webhookInstanceId != null) localVarPathParams.Add("webhookInstanceId", this.Configuration.ApiClient.ParameterToString(webhookInstanceId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachedWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of LatestMessageWebhookModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageWebhookModel> UpdateAttachedWebhookAsync (string latestMessageId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<LatestMessageWebhookModel> localVarResponse = await UpdateAttachedWebhookAsyncWithHttpInfo(latestMessageId, webhookInstanceId, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageWebhookModel>> UpdateAttachedWebhookAsyncWithHttpInfo (string latestMessageId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->UpdateAttachedWebhook");
            // verify the required parameter 'webhookInstanceId' is set
            if (webhookInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'webhookInstanceId' when calling LatestMessageApi->UpdateAttachedWebhook");

            var localVarPath = "/api/LatestMessage/{latestMessageId}/webhooks/{webhookInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (webhookInstanceId != null) localVarPathParams.Add("webhookInstanceId", this.Configuration.ApiClient.ParameterToString(webhookInstanceId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachedWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageWebhookModel)));
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        public LatestMessageModel UpdateFullContentItem (string contentItemId, LatestMessageModel model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = UpdateFullContentItemWithHttpInfo(contentItemId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        public ApiResponse< LatestMessageModel > UpdateFullContentItemWithHttpInfo (string contentItemId, LatestMessageModel model = null)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling LatestMessageApi->UpdateFullContentItem");

            var localVarPath = "/api/LatestMessage/{contentItemId}/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageModel> UpdateFullContentItemAsync (string contentItemId, LatestMessageModel model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = await UpdateFullContentItemAsyncWithHttpInfo(contentItemId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> UpdateFullContentItemAsyncWithHttpInfo (string contentItemId, LatestMessageModel model = null)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling LatestMessageApi->UpdateFullContentItem");

            var localVarPath = "/api/LatestMessage/{contentItemId}/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Updates the latest message with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageModel</returns>
        public LatestMessageModel UpdateMessage (string latestMessageId, UpdateLatestMessageRequest model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = UpdateMessageWithHttpInfo(latestMessageId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the latest message with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageModel</returns>
        public ApiResponse< LatestMessageModel > UpdateMessageWithHttpInfo (string latestMessageId, UpdateLatestMessageRequest model = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->UpdateMessage");

            var localVarPath = "/api/LatestMessage/{latestMessageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Updates the latest message with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageModel> UpdateMessageAsync (string latestMessageId, UpdateLatestMessageRequest model = null)
        {
             ApiResponse<LatestMessageModel> localVarResponse = await UpdateMessageAsyncWithHttpInfo(latestMessageId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the latest message with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageModel>> UpdateMessageAsyncWithHttpInfo (string latestMessageId, UpdateLatestMessageRequest model = null)
        {
            // verify the required parameter 'latestMessageId' is set
            if (latestMessageId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageId' when calling LatestMessageApi->UpdateMessage");

            var localVarPath = "/api/LatestMessage/{latestMessageId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageId != null) localVarPathParams.Add("latestMessageId", this.Configuration.ApiClient.ParameterToString(latestMessageId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageModel)));
        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>LatestMessageResponseModel</returns>
        public LatestMessageResponseModel UpdateResponse (string latestMessageResponseId, UpdateLatestMessageResponseRequest model = null)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = UpdateResponseWithHttpInfo(latestMessageResponseId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of LatestMessageResponseModel</returns>
        public ApiResponse< LatestMessageResponseModel > UpdateResponseWithHttpInfo (string latestMessageResponseId, UpdateLatestMessageResponseRequest model = null)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->UpdateResponse");

            var localVarPath = "/api/LatestMessage/response/{latestMessageResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of LatestMessageResponseModel</returns>
        public async System.Threading.Tasks.Task<LatestMessageResponseModel> UpdateResponseAsync (string latestMessageResponseId, UpdateLatestMessageResponseRequest model = null)
        {
             ApiResponse<LatestMessageResponseModel> localVarResponse = await UpdateResponseAsyncWithHttpInfo(latestMessageResponseId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latestMessageResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (LatestMessageResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LatestMessageResponseModel>> UpdateResponseAsyncWithHttpInfo (string latestMessageResponseId, UpdateLatestMessageResponseRequest model = null)
        {
            // verify the required parameter 'latestMessageResponseId' is set
            if (latestMessageResponseId == null)
                throw new ApiException(400, "Missing required parameter 'latestMessageResponseId' when calling LatestMessageApi->UpdateResponse");

            var localVarPath = "/api/LatestMessage/response/{latestMessageResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (latestMessageResponseId != null) localVarPathParams.Add("latestMessageResponseId", this.Configuration.ApiClient.ParameterToString(latestMessageResponseId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LatestMessageResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LatestMessageResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LatestMessageResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? UpdateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = UpdateUserDefinedParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UpdateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling LatestMessageApi->UpdateUserDefinedParameter");

            var localVarPath = "/api/LatestMessage/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UpdateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await UpdateUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling LatestMessageApi->UpdateUserDefinedParameter");

            var localVarPath = "/api/LatestMessage/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? UpdateWebhookParameter (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = UpdateWebhookParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UpdateWebhookParameterWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling LatestMessageApi->UpdateWebhookParameter");

            var localVarPath = "/api/LatestMessage/webhook/{instanceWebhookId}/webhookParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UpdateWebhookParameterAsync (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await UpdateWebhookParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateWebhookParameterAsyncWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling LatestMessageApi->UpdateWebhookParameter");

            var localVarPath = "/api/LatestMessage/webhook/{instanceWebhookId}/webhookParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

    }
}
