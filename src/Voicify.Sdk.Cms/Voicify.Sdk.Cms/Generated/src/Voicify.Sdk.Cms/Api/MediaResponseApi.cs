/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaResponseApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>MediaResponseModel</returns>
        MediaResponseModel CreateMediaResponse (NewMediaResponseRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MediaResponseModel</returns>
        ApiResponse<MediaResponseModel> CreateMediaResponseWithHttpInfo (NewMediaResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>MediaResponseContainerModel</returns>
        MediaResponseContainerModel CreateMediaResponseContainer (NewMediaResponseContainerRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MediaResponseContainerModel</returns>
        ApiResponse<MediaResponseContainerModel> CreateMediaResponseContainerWithHttpInfo (NewMediaResponseContainerRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>MediaResponseContainerModel</returns>
        MediaResponseContainerModel CreateMediaResponseContainer_0 (NewBulkMediaResponseContainerRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MediaResponseContainerModel</returns>
        ApiResponse<MediaResponseContainerModel> CreateMediaResponseContainer_0WithHttpInfo (NewBulkMediaResponseContainerRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ResponseTemplateTypeModel</returns>
        ResponseTemplateTypeModel CreateResponseTemplateType (NewResponseTemplateTypeRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of ResponseTemplateTypeModel</returns>
        ApiResponse<ResponseTemplateTypeModel> CreateResponseTemplateTypeWithHttpInfo (NewResponseTemplateTypeRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaResponseId"></param>
        /// <returns>MediaResponseModel</returns>
        MediaResponseModel DeleteMediaResponse (string mediaResponseId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaResponseId"></param>
        /// <returns>ApiResponse of MediaResponseModel</returns>
        ApiResponse<MediaResponseModel> DeleteMediaResponseWithHttpInfo (string mediaResponseId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>MediaResponseContainerModel</returns>
        MediaResponseContainerModel DeleteMediaResponseContainer (string containerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>ApiResponse of MediaResponseContainerModel</returns>
        ApiResponse<MediaResponseContainerModel> DeleteMediaResponseContainerWithHttpInfo (string containerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="responseTemplateId"> (optional)</param>
        /// <returns>ResponseTemplateTypeModel</returns>
        ResponseTemplateTypeModel DeleteResponseTemplate (string templateId, string responseTemplateId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="responseTemplateId"> (optional)</param>
        /// <returns>ApiResponse of ResponseTemplateTypeModel</returns>
        ApiResponse<ResponseTemplateTypeModel> DeleteResponseTemplateWithHttpInfo (string templateId, string responseTemplateId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResponseTemplateTypeModel&gt;</returns>
        List<ResponseTemplateTypeModel> GetAllResponseTemplates ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResponseTemplateTypeModel&gt;</returns>
        ApiResponse<List<ResponseTemplateTypeModel>> GetAllResponseTemplatesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResponseTemplateTypeModel&gt;</returns>
        List<ResponseTemplateTypeModel> GetEnabledResponseTemplates ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResponseTemplateTypeModel&gt;</returns>
        ApiResponse<List<ResponseTemplateTypeModel>> GetEnabledResponseTemplatesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>MediaResponseContainerModel</returns>
        MediaResponseContainerModel GetResponseContainerById (string containerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>ApiResponse of MediaResponseContainerModel</returns>
        ApiResponse<MediaResponseContainerModel> GetResponseContainerByIdWithHttpInfo (string containerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;MediaResponseContainerModel&gt;</returns>
        List<MediaResponseContainerModel> GetResponseContainersForApp (string applicationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;MediaResponseContainerModel&gt;</returns>
        ApiResponse<List<MediaResponseContainerModel>> GetResponseContainersForAppWithHttpInfo (string applicationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseTemplateId"></param>
        /// <returns>ResponseTemplateTypeModel</returns>
        ResponseTemplateTypeModel GetResponseTemplateById (string responseTemplateId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseTemplateId"></param>
        /// <returns>ApiResponse of ResponseTemplateTypeModel</returns>
        ApiResponse<ResponseTemplateTypeModel> GetResponseTemplateByIdWithHttpInfo (string responseTemplateId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistant"></param>
        /// <returns>List&lt;ResponseTemplateTypeModel&gt;</returns>
        List<ResponseTemplateTypeModel> GetResponseTemplatesByAssistant (string assistant);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistant"></param>
        /// <returns>ApiResponse of List&lt;ResponseTemplateTypeModel&gt;</returns>
        ApiResponse<List<ResponseTemplateTypeModel>> GetResponseTemplatesByAssistantWithHttpInfo (string assistant);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceTargetId"></param>
        /// <returns>List&lt;ResponseTemplateTypeModel&gt;</returns>
        List<ResponseTemplateTypeModel> GetResponseTemplatesByDeviceTarget (string deviceTargetId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceTargetId"></param>
        /// <returns>ApiResponse of List&lt;ResponseTemplateTypeModel&gt;</returns>
        ApiResponse<List<ResponseTemplateTypeModel>> GetResponseTemplatesByDeviceTargetWithHttpInfo (string deviceTargetId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>MediaResponseModel</returns>
        MediaResponseModel UpdateMediaResponse (string responseId, UpdateMediaResponseRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MediaResponseModel</returns>
        ApiResponse<MediaResponseModel> UpdateMediaResponseWithHttpInfo (string responseId, UpdateMediaResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>MediaResponseContainerModel</returns>
        MediaResponseContainerModel UpdateMediaResponseContainer (string containerId, UpdateMediaResponseContainerRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MediaResponseContainerModel</returns>
        ApiResponse<MediaResponseContainerModel> UpdateMediaResponseContainerWithHttpInfo (string containerId, UpdateMediaResponseContainerRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>MediaResponseContainerModel</returns>
        MediaResponseContainerModel UpdateMediaResponseContainer_0 (string containerId, UpdateBulkMediaResponseContainerRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MediaResponseContainerModel</returns>
        ApiResponse<MediaResponseContainerModel> UpdateMediaResponseContainer_0WithHttpInfo (string containerId, UpdateBulkMediaResponseContainerRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ResponseTemplateTypeModel</returns>
        ResponseTemplateTypeModel UpdateResponseTemplateType (string templateId, UpdateResponseTemplateTypeRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of ResponseTemplateTypeModel</returns>
        ApiResponse<ResponseTemplateTypeModel> UpdateResponseTemplateTypeWithHttpInfo (string templateId, UpdateResponseTemplateTypeRequest model = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MediaResponseModel</returns>
        System.Threading.Tasks.Task<MediaResponseModel> CreateMediaResponseAsync (NewMediaResponseRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaResponseModel>> CreateMediaResponseAsyncWithHttpInfo (NewMediaResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MediaResponseContainerModel</returns>
        System.Threading.Tasks.Task<MediaResponseContainerModel> CreateMediaResponseContainerAsync (NewMediaResponseContainerRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaResponseContainerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaResponseContainerModel>> CreateMediaResponseContainerAsyncWithHttpInfo (NewMediaResponseContainerRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MediaResponseContainerModel</returns>
        System.Threading.Tasks.Task<MediaResponseContainerModel> CreateMediaResponseContainer_0Async (NewBulkMediaResponseContainerRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaResponseContainerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaResponseContainerModel>> CreateMediaResponseContainer_0AsyncWithHttpInfo (NewBulkMediaResponseContainerRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ResponseTemplateTypeModel</returns>
        System.Threading.Tasks.Task<ResponseTemplateTypeModel> CreateResponseTemplateTypeAsync (NewResponseTemplateTypeRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTemplateTypeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTemplateTypeModel>> CreateResponseTemplateTypeAsyncWithHttpInfo (NewResponseTemplateTypeRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaResponseId"></param>
        /// <returns>Task of MediaResponseModel</returns>
        System.Threading.Tasks.Task<MediaResponseModel> DeleteMediaResponseAsync (string mediaResponseId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaResponseId"></param>
        /// <returns>Task of ApiResponse (MediaResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaResponseModel>> DeleteMediaResponseAsyncWithHttpInfo (string mediaResponseId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>Task of MediaResponseContainerModel</returns>
        System.Threading.Tasks.Task<MediaResponseContainerModel> DeleteMediaResponseContainerAsync (string containerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>Task of ApiResponse (MediaResponseContainerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaResponseContainerModel>> DeleteMediaResponseContainerAsyncWithHttpInfo (string containerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="responseTemplateId"> (optional)</param>
        /// <returns>Task of ResponseTemplateTypeModel</returns>
        System.Threading.Tasks.Task<ResponseTemplateTypeModel> DeleteResponseTemplateAsync (string templateId, string responseTemplateId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="responseTemplateId"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTemplateTypeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTemplateTypeModel>> DeleteResponseTemplateAsyncWithHttpInfo (string templateId, string responseTemplateId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ResponseTemplateTypeModel&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseTemplateTypeModel>> GetAllResponseTemplatesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ResponseTemplateTypeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseTemplateTypeModel>>> GetAllResponseTemplatesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ResponseTemplateTypeModel&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseTemplateTypeModel>> GetEnabledResponseTemplatesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ResponseTemplateTypeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseTemplateTypeModel>>> GetEnabledResponseTemplatesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>Task of MediaResponseContainerModel</returns>
        System.Threading.Tasks.Task<MediaResponseContainerModel> GetResponseContainerByIdAsync (string containerId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>Task of ApiResponse (MediaResponseContainerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaResponseContainerModel>> GetResponseContainerByIdAsyncWithHttpInfo (string containerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;MediaResponseContainerModel&gt;</returns>
        System.Threading.Tasks.Task<List<MediaResponseContainerModel>> GetResponseContainersForAppAsync (string applicationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;MediaResponseContainerModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MediaResponseContainerModel>>> GetResponseContainersForAppAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseTemplateId"></param>
        /// <returns>Task of ResponseTemplateTypeModel</returns>
        System.Threading.Tasks.Task<ResponseTemplateTypeModel> GetResponseTemplateByIdAsync (string responseTemplateId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseTemplateId"></param>
        /// <returns>Task of ApiResponse (ResponseTemplateTypeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTemplateTypeModel>> GetResponseTemplateByIdAsyncWithHttpInfo (string responseTemplateId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistant"></param>
        /// <returns>Task of List&lt;ResponseTemplateTypeModel&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseTemplateTypeModel>> GetResponseTemplatesByAssistantAsync (string assistant);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistant"></param>
        /// <returns>Task of ApiResponse (List&lt;ResponseTemplateTypeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseTemplateTypeModel>>> GetResponseTemplatesByAssistantAsyncWithHttpInfo (string assistant);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceTargetId"></param>
        /// <returns>Task of List&lt;ResponseTemplateTypeModel&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseTemplateTypeModel>> GetResponseTemplatesByDeviceTargetAsync (string deviceTargetId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceTargetId"></param>
        /// <returns>Task of ApiResponse (List&lt;ResponseTemplateTypeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseTemplateTypeModel>>> GetResponseTemplatesByDeviceTargetAsyncWithHttpInfo (string deviceTargetId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MediaResponseModel</returns>
        System.Threading.Tasks.Task<MediaResponseModel> UpdateMediaResponseAsync (string responseId, UpdateMediaResponseRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaResponseModel>> UpdateMediaResponseAsyncWithHttpInfo (string responseId, UpdateMediaResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MediaResponseContainerModel</returns>
        System.Threading.Tasks.Task<MediaResponseContainerModel> UpdateMediaResponseContainerAsync (string containerId, UpdateMediaResponseContainerRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaResponseContainerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaResponseContainerModel>> UpdateMediaResponseContainerAsyncWithHttpInfo (string containerId, UpdateMediaResponseContainerRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MediaResponseContainerModel</returns>
        System.Threading.Tasks.Task<MediaResponseContainerModel> UpdateMediaResponseContainer_0Async (string containerId, UpdateBulkMediaResponseContainerRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaResponseContainerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaResponseContainerModel>> UpdateMediaResponseContainer_0AsyncWithHttpInfo (string containerId, UpdateBulkMediaResponseContainerRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ResponseTemplateTypeModel</returns>
        System.Threading.Tasks.Task<ResponseTemplateTypeModel> UpdateResponseTemplateTypeAsync (string templateId, UpdateResponseTemplateTypeRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTemplateTypeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTemplateTypeModel>> UpdateResponseTemplateTypeAsyncWithHttpInfo (string templateId, UpdateResponseTemplateTypeRequest model = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MediaResponseApi : IMediaResponseApi
    {
        private Voicify.Sdk.Cms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaResponseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaResponseApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Cms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaResponseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MediaResponseApi(Voicify.Sdk.Cms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Cms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Cms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Cms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>MediaResponseModel</returns>
        public MediaResponseModel CreateMediaResponse (NewMediaResponseRequest model = null)
        {
             ApiResponse<MediaResponseModel> localVarResponse = CreateMediaResponseWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MediaResponseModel</returns>
        public ApiResponse< MediaResponseModel > CreateMediaResponseWithHttpInfo (NewMediaResponseRequest model = null)
        {

            var localVarPath = "/api/MediaResponse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMediaResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MediaResponseModel</returns>
        public async System.Threading.Tasks.Task<MediaResponseModel> CreateMediaResponseAsync (NewMediaResponseRequest model = null)
        {
             ApiResponse<MediaResponseModel> localVarResponse = await CreateMediaResponseAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaResponseModel>> CreateMediaResponseAsyncWithHttpInfo (NewMediaResponseRequest model = null)
        {

            var localVarPath = "/api/MediaResponse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMediaResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>MediaResponseContainerModel</returns>
        public MediaResponseContainerModel CreateMediaResponseContainer (NewMediaResponseContainerRequest model = null)
        {
             ApiResponse<MediaResponseContainerModel> localVarResponse = CreateMediaResponseContainerWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MediaResponseContainerModel</returns>
        public ApiResponse< MediaResponseContainerModel > CreateMediaResponseContainerWithHttpInfo (NewMediaResponseContainerRequest model = null)
        {

            var localVarPath = "/api/MediaResponse/containers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMediaResponseContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MediaResponseContainerModel</returns>
        public async System.Threading.Tasks.Task<MediaResponseContainerModel> CreateMediaResponseContainerAsync (NewMediaResponseContainerRequest model = null)
        {
             ApiResponse<MediaResponseContainerModel> localVarResponse = await CreateMediaResponseContainerAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaResponseContainerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaResponseContainerModel>> CreateMediaResponseContainerAsyncWithHttpInfo (NewMediaResponseContainerRequest model = null)
        {

            var localVarPath = "/api/MediaResponse/containers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMediaResponseContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>MediaResponseContainerModel</returns>
        public MediaResponseContainerModel CreateMediaResponseContainer_0 (NewBulkMediaResponseContainerRequest model = null)
        {
             ApiResponse<MediaResponseContainerModel> localVarResponse = CreateMediaResponseContainer_0WithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MediaResponseContainerModel</returns>
        public ApiResponse< MediaResponseContainerModel > CreateMediaResponseContainer_0WithHttpInfo (NewBulkMediaResponseContainerRequest model = null)
        {

            var localVarPath = "/api/MediaResponse/containers/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMediaResponseContainer_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MediaResponseContainerModel</returns>
        public async System.Threading.Tasks.Task<MediaResponseContainerModel> CreateMediaResponseContainer_0Async (NewBulkMediaResponseContainerRequest model = null)
        {
             ApiResponse<MediaResponseContainerModel> localVarResponse = await CreateMediaResponseContainer_0AsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaResponseContainerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaResponseContainerModel>> CreateMediaResponseContainer_0AsyncWithHttpInfo (NewBulkMediaResponseContainerRequest model = null)
        {

            var localVarPath = "/api/MediaResponse/containers/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMediaResponseContainer_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ResponseTemplateTypeModel</returns>
        public ResponseTemplateTypeModel CreateResponseTemplateType (NewResponseTemplateTypeRequest model = null)
        {
             ApiResponse<ResponseTemplateTypeModel> localVarResponse = CreateResponseTemplateTypeWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of ResponseTemplateTypeModel</returns>
        public ApiResponse< ResponseTemplateTypeModel > CreateResponseTemplateTypeWithHttpInfo (NewResponseTemplateTypeRequest model = null)
        {

            var localVarPath = "/api/MediaResponse/templateType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResponseTemplateType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTemplateTypeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTemplateTypeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTemplateTypeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ResponseTemplateTypeModel</returns>
        public async System.Threading.Tasks.Task<ResponseTemplateTypeModel> CreateResponseTemplateTypeAsync (NewResponseTemplateTypeRequest model = null)
        {
             ApiResponse<ResponseTemplateTypeModel> localVarResponse = await CreateResponseTemplateTypeAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTemplateTypeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTemplateTypeModel>> CreateResponseTemplateTypeAsyncWithHttpInfo (NewResponseTemplateTypeRequest model = null)
        {

            var localVarPath = "/api/MediaResponse/templateType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResponseTemplateType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTemplateTypeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTemplateTypeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTemplateTypeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaResponseId"></param>
        /// <returns>MediaResponseModel</returns>
        public MediaResponseModel DeleteMediaResponse (string mediaResponseId)
        {
             ApiResponse<MediaResponseModel> localVarResponse = DeleteMediaResponseWithHttpInfo(mediaResponseId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaResponseId"></param>
        /// <returns>ApiResponse of MediaResponseModel</returns>
        public ApiResponse< MediaResponseModel > DeleteMediaResponseWithHttpInfo (string mediaResponseId)
        {
            // verify the required parameter 'mediaResponseId' is set
            if (mediaResponseId == null)
                throw new ApiException(400, "Missing required parameter 'mediaResponseId' when calling MediaResponseApi->DeleteMediaResponse");

            var localVarPath = "/api/MediaResponse/{mediaResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediaResponseId != null) localVarPathParams.Add("mediaResponseId", this.Configuration.ApiClient.ParameterToString(mediaResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMediaResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaResponseId"></param>
        /// <returns>Task of MediaResponseModel</returns>
        public async System.Threading.Tasks.Task<MediaResponseModel> DeleteMediaResponseAsync (string mediaResponseId)
        {
             ApiResponse<MediaResponseModel> localVarResponse = await DeleteMediaResponseAsyncWithHttpInfo(mediaResponseId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaResponseId"></param>
        /// <returns>Task of ApiResponse (MediaResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaResponseModel>> DeleteMediaResponseAsyncWithHttpInfo (string mediaResponseId)
        {
            // verify the required parameter 'mediaResponseId' is set
            if (mediaResponseId == null)
                throw new ApiException(400, "Missing required parameter 'mediaResponseId' when calling MediaResponseApi->DeleteMediaResponse");

            var localVarPath = "/api/MediaResponse/{mediaResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediaResponseId != null) localVarPathParams.Add("mediaResponseId", this.Configuration.ApiClient.ParameterToString(mediaResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMediaResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>MediaResponseContainerModel</returns>
        public MediaResponseContainerModel DeleteMediaResponseContainer (string containerId)
        {
             ApiResponse<MediaResponseContainerModel> localVarResponse = DeleteMediaResponseContainerWithHttpInfo(containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>ApiResponse of MediaResponseContainerModel</returns>
        public ApiResponse< MediaResponseContainerModel > DeleteMediaResponseContainerWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling MediaResponseApi->DeleteMediaResponseContainer");

            var localVarPath = "/api/MediaResponse/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMediaResponseContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>Task of MediaResponseContainerModel</returns>
        public async System.Threading.Tasks.Task<MediaResponseContainerModel> DeleteMediaResponseContainerAsync (string containerId)
        {
             ApiResponse<MediaResponseContainerModel> localVarResponse = await DeleteMediaResponseContainerAsyncWithHttpInfo(containerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>Task of ApiResponse (MediaResponseContainerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaResponseContainerModel>> DeleteMediaResponseContainerAsyncWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling MediaResponseApi->DeleteMediaResponseContainer");

            var localVarPath = "/api/MediaResponse/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMediaResponseContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="responseTemplateId"> (optional)</param>
        /// <returns>ResponseTemplateTypeModel</returns>
        public ResponseTemplateTypeModel DeleteResponseTemplate (string templateId, string responseTemplateId = null)
        {
             ApiResponse<ResponseTemplateTypeModel> localVarResponse = DeleteResponseTemplateWithHttpInfo(templateId, responseTemplateId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="responseTemplateId"> (optional)</param>
        /// <returns>ApiResponse of ResponseTemplateTypeModel</returns>
        public ApiResponse< ResponseTemplateTypeModel > DeleteResponseTemplateWithHttpInfo (string templateId, string responseTemplateId = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling MediaResponseApi->DeleteResponseTemplate");

            var localVarPath = "/api/MediaResponse/templateType/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (responseTemplateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseTemplateId", responseTemplateId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResponseTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTemplateTypeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTemplateTypeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTemplateTypeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="responseTemplateId"> (optional)</param>
        /// <returns>Task of ResponseTemplateTypeModel</returns>
        public async System.Threading.Tasks.Task<ResponseTemplateTypeModel> DeleteResponseTemplateAsync (string templateId, string responseTemplateId = null)
        {
             ApiResponse<ResponseTemplateTypeModel> localVarResponse = await DeleteResponseTemplateAsyncWithHttpInfo(templateId, responseTemplateId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="responseTemplateId"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTemplateTypeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTemplateTypeModel>> DeleteResponseTemplateAsyncWithHttpInfo (string templateId, string responseTemplateId = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling MediaResponseApi->DeleteResponseTemplate");

            var localVarPath = "/api/MediaResponse/templateType/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (responseTemplateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseTemplateId", responseTemplateId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResponseTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTemplateTypeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTemplateTypeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTemplateTypeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResponseTemplateTypeModel&gt;</returns>
        public List<ResponseTemplateTypeModel> GetAllResponseTemplates ()
        {
             ApiResponse<List<ResponseTemplateTypeModel>> localVarResponse = GetAllResponseTemplatesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResponseTemplateTypeModel&gt;</returns>
        public ApiResponse< List<ResponseTemplateTypeModel> > GetAllResponseTemplatesWithHttpInfo ()
        {

            var localVarPath = "/api/MediaResponse/templateType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllResponseTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResponseTemplateTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResponseTemplateTypeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResponseTemplateTypeModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ResponseTemplateTypeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseTemplateTypeModel>> GetAllResponseTemplatesAsync ()
        {
             ApiResponse<List<ResponseTemplateTypeModel>> localVarResponse = await GetAllResponseTemplatesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ResponseTemplateTypeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResponseTemplateTypeModel>>> GetAllResponseTemplatesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/MediaResponse/templateType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllResponseTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResponseTemplateTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResponseTemplateTypeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResponseTemplateTypeModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ResponseTemplateTypeModel&gt;</returns>
        public List<ResponseTemplateTypeModel> GetEnabledResponseTemplates ()
        {
             ApiResponse<List<ResponseTemplateTypeModel>> localVarResponse = GetEnabledResponseTemplatesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ResponseTemplateTypeModel&gt;</returns>
        public ApiResponse< List<ResponseTemplateTypeModel> > GetEnabledResponseTemplatesWithHttpInfo ()
        {

            var localVarPath = "/api/MediaResponse/templateType/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnabledResponseTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResponseTemplateTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResponseTemplateTypeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResponseTemplateTypeModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ResponseTemplateTypeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseTemplateTypeModel>> GetEnabledResponseTemplatesAsync ()
        {
             ApiResponse<List<ResponseTemplateTypeModel>> localVarResponse = await GetEnabledResponseTemplatesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ResponseTemplateTypeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResponseTemplateTypeModel>>> GetEnabledResponseTemplatesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/MediaResponse/templateType/enabled";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnabledResponseTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResponseTemplateTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResponseTemplateTypeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResponseTemplateTypeModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>MediaResponseContainerModel</returns>
        public MediaResponseContainerModel GetResponseContainerById (string containerId)
        {
             ApiResponse<MediaResponseContainerModel> localVarResponse = GetResponseContainerByIdWithHttpInfo(containerId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>ApiResponse of MediaResponseContainerModel</returns>
        public ApiResponse< MediaResponseContainerModel > GetResponseContainerByIdWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling MediaResponseApi->GetResponseContainerById");

            var localVarPath = "/api/MediaResponse/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponseContainerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>Task of MediaResponseContainerModel</returns>
        public async System.Threading.Tasks.Task<MediaResponseContainerModel> GetResponseContainerByIdAsync (string containerId)
        {
             ApiResponse<MediaResponseContainerModel> localVarResponse = await GetResponseContainerByIdAsyncWithHttpInfo(containerId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <returns>Task of ApiResponse (MediaResponseContainerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaResponseContainerModel>> GetResponseContainerByIdAsyncWithHttpInfo (string containerId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling MediaResponseApi->GetResponseContainerById");

            var localVarPath = "/api/MediaResponse/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponseContainerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;MediaResponseContainerModel&gt;</returns>
        public List<MediaResponseContainerModel> GetResponseContainersForApp (string applicationId)
        {
             ApiResponse<List<MediaResponseContainerModel>> localVarResponse = GetResponseContainersForAppWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;MediaResponseContainerModel&gt;</returns>
        public ApiResponse< List<MediaResponseContainerModel> > GetResponseContainersForAppWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling MediaResponseApi->GetResponseContainersForApp");

            var localVarPath = "/api/MediaResponse/containers/forApp/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponseContainersForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MediaResponseContainerModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MediaResponseContainerModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MediaResponseContainerModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;MediaResponseContainerModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<MediaResponseContainerModel>> GetResponseContainersForAppAsync (string applicationId)
        {
             ApiResponse<List<MediaResponseContainerModel>> localVarResponse = await GetResponseContainersForAppAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;MediaResponseContainerModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MediaResponseContainerModel>>> GetResponseContainersForAppAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling MediaResponseApi->GetResponseContainersForApp");

            var localVarPath = "/api/MediaResponse/containers/forApp/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponseContainersForApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MediaResponseContainerModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MediaResponseContainerModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MediaResponseContainerModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseTemplateId"></param>
        /// <returns>ResponseTemplateTypeModel</returns>
        public ResponseTemplateTypeModel GetResponseTemplateById (string responseTemplateId)
        {
             ApiResponse<ResponseTemplateTypeModel> localVarResponse = GetResponseTemplateByIdWithHttpInfo(responseTemplateId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseTemplateId"></param>
        /// <returns>ApiResponse of ResponseTemplateTypeModel</returns>
        public ApiResponse< ResponseTemplateTypeModel > GetResponseTemplateByIdWithHttpInfo (string responseTemplateId)
        {
            // verify the required parameter 'responseTemplateId' is set
            if (responseTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'responseTemplateId' when calling MediaResponseApi->GetResponseTemplateById");

            var localVarPath = "/api/MediaResponse/templateType/{responseTemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (responseTemplateId != null) localVarPathParams.Add("responseTemplateId", this.Configuration.ApiClient.ParameterToString(responseTemplateId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponseTemplateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTemplateTypeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTemplateTypeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTemplateTypeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseTemplateId"></param>
        /// <returns>Task of ResponseTemplateTypeModel</returns>
        public async System.Threading.Tasks.Task<ResponseTemplateTypeModel> GetResponseTemplateByIdAsync (string responseTemplateId)
        {
             ApiResponse<ResponseTemplateTypeModel> localVarResponse = await GetResponseTemplateByIdAsyncWithHttpInfo(responseTemplateId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseTemplateId"></param>
        /// <returns>Task of ApiResponse (ResponseTemplateTypeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTemplateTypeModel>> GetResponseTemplateByIdAsyncWithHttpInfo (string responseTemplateId)
        {
            // verify the required parameter 'responseTemplateId' is set
            if (responseTemplateId == null)
                throw new ApiException(400, "Missing required parameter 'responseTemplateId' when calling MediaResponseApi->GetResponseTemplateById");

            var localVarPath = "/api/MediaResponse/templateType/{responseTemplateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (responseTemplateId != null) localVarPathParams.Add("responseTemplateId", this.Configuration.ApiClient.ParameterToString(responseTemplateId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponseTemplateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTemplateTypeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTemplateTypeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTemplateTypeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistant"></param>
        /// <returns>List&lt;ResponseTemplateTypeModel&gt;</returns>
        public List<ResponseTemplateTypeModel> GetResponseTemplatesByAssistant (string assistant)
        {
             ApiResponse<List<ResponseTemplateTypeModel>> localVarResponse = GetResponseTemplatesByAssistantWithHttpInfo(assistant);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistant"></param>
        /// <returns>ApiResponse of List&lt;ResponseTemplateTypeModel&gt;</returns>
        public ApiResponse< List<ResponseTemplateTypeModel> > GetResponseTemplatesByAssistantWithHttpInfo (string assistant)
        {
            // verify the required parameter 'assistant' is set
            if (assistant == null)
                throw new ApiException(400, "Missing required parameter 'assistant' when calling MediaResponseApi->GetResponseTemplatesByAssistant");

            var localVarPath = "/api/MediaResponse/templateType/assistant/{assistant}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistant != null) localVarPathParams.Add("assistant", this.Configuration.ApiClient.ParameterToString(assistant)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponseTemplatesByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResponseTemplateTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResponseTemplateTypeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResponseTemplateTypeModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistant"></param>
        /// <returns>Task of List&lt;ResponseTemplateTypeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseTemplateTypeModel>> GetResponseTemplatesByAssistantAsync (string assistant)
        {
             ApiResponse<List<ResponseTemplateTypeModel>> localVarResponse = await GetResponseTemplatesByAssistantAsyncWithHttpInfo(assistant);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistant"></param>
        /// <returns>Task of ApiResponse (List&lt;ResponseTemplateTypeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResponseTemplateTypeModel>>> GetResponseTemplatesByAssistantAsyncWithHttpInfo (string assistant)
        {
            // verify the required parameter 'assistant' is set
            if (assistant == null)
                throw new ApiException(400, "Missing required parameter 'assistant' when calling MediaResponseApi->GetResponseTemplatesByAssistant");

            var localVarPath = "/api/MediaResponse/templateType/assistant/{assistant}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistant != null) localVarPathParams.Add("assistant", this.Configuration.ApiClient.ParameterToString(assistant)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponseTemplatesByAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResponseTemplateTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResponseTemplateTypeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResponseTemplateTypeModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceTargetId"></param>
        /// <returns>List&lt;ResponseTemplateTypeModel&gt;</returns>
        public List<ResponseTemplateTypeModel> GetResponseTemplatesByDeviceTarget (string deviceTargetId)
        {
             ApiResponse<List<ResponseTemplateTypeModel>> localVarResponse = GetResponseTemplatesByDeviceTargetWithHttpInfo(deviceTargetId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceTargetId"></param>
        /// <returns>ApiResponse of List&lt;ResponseTemplateTypeModel&gt;</returns>
        public ApiResponse< List<ResponseTemplateTypeModel> > GetResponseTemplatesByDeviceTargetWithHttpInfo (string deviceTargetId)
        {
            // verify the required parameter 'deviceTargetId' is set
            if (deviceTargetId == null)
                throw new ApiException(400, "Missing required parameter 'deviceTargetId' when calling MediaResponseApi->GetResponseTemplatesByDeviceTarget");

            var localVarPath = "/api/MediaResponse/templateType/deviceTarget/{deviceTargetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceTargetId != null) localVarPathParams.Add("deviceTargetId", this.Configuration.ApiClient.ParameterToString(deviceTargetId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponseTemplatesByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResponseTemplateTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResponseTemplateTypeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResponseTemplateTypeModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceTargetId"></param>
        /// <returns>Task of List&lt;ResponseTemplateTypeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseTemplateTypeModel>> GetResponseTemplatesByDeviceTargetAsync (string deviceTargetId)
        {
             ApiResponse<List<ResponseTemplateTypeModel>> localVarResponse = await GetResponseTemplatesByDeviceTargetAsyncWithHttpInfo(deviceTargetId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceTargetId"></param>
        /// <returns>Task of ApiResponse (List&lt;ResponseTemplateTypeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResponseTemplateTypeModel>>> GetResponseTemplatesByDeviceTargetAsyncWithHttpInfo (string deviceTargetId)
        {
            // verify the required parameter 'deviceTargetId' is set
            if (deviceTargetId == null)
                throw new ApiException(400, "Missing required parameter 'deviceTargetId' when calling MediaResponseApi->GetResponseTemplatesByDeviceTarget");

            var localVarPath = "/api/MediaResponse/templateType/deviceTarget/{deviceTargetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deviceTargetId != null) localVarPathParams.Add("deviceTargetId", this.Configuration.ApiClient.ParameterToString(deviceTargetId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResponseTemplatesByDeviceTarget", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResponseTemplateTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResponseTemplateTypeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResponseTemplateTypeModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>MediaResponseModel</returns>
        public MediaResponseModel UpdateMediaResponse (string responseId, UpdateMediaResponseRequest model = null)
        {
             ApiResponse<MediaResponseModel> localVarResponse = UpdateMediaResponseWithHttpInfo(responseId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MediaResponseModel</returns>
        public ApiResponse< MediaResponseModel > UpdateMediaResponseWithHttpInfo (string responseId, UpdateMediaResponseRequest model = null)
        {
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling MediaResponseApi->UpdateMediaResponse");

            var localVarPath = "/api/MediaResponse/{responseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (responseId != null) localVarPathParams.Add("responseId", this.Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMediaResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MediaResponseModel</returns>
        public async System.Threading.Tasks.Task<MediaResponseModel> UpdateMediaResponseAsync (string responseId, UpdateMediaResponseRequest model = null)
        {
             ApiResponse<MediaResponseModel> localVarResponse = await UpdateMediaResponseAsyncWithHttpInfo(responseId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaResponseModel>> UpdateMediaResponseAsyncWithHttpInfo (string responseId, UpdateMediaResponseRequest model = null)
        {
            // verify the required parameter 'responseId' is set
            if (responseId == null)
                throw new ApiException(400, "Missing required parameter 'responseId' when calling MediaResponseApi->UpdateMediaResponse");

            var localVarPath = "/api/MediaResponse/{responseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (responseId != null) localVarPathParams.Add("responseId", this.Configuration.ApiClient.ParameterToString(responseId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMediaResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>MediaResponseContainerModel</returns>
        public MediaResponseContainerModel UpdateMediaResponseContainer (string containerId, UpdateMediaResponseContainerRequest model = null)
        {
             ApiResponse<MediaResponseContainerModel> localVarResponse = UpdateMediaResponseContainerWithHttpInfo(containerId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MediaResponseContainerModel</returns>
        public ApiResponse< MediaResponseContainerModel > UpdateMediaResponseContainerWithHttpInfo (string containerId, UpdateMediaResponseContainerRequest model = null)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling MediaResponseApi->UpdateMediaResponseContainer");

            var localVarPath = "/api/MediaResponse/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMediaResponseContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MediaResponseContainerModel</returns>
        public async System.Threading.Tasks.Task<MediaResponseContainerModel> UpdateMediaResponseContainerAsync (string containerId, UpdateMediaResponseContainerRequest model = null)
        {
             ApiResponse<MediaResponseContainerModel> localVarResponse = await UpdateMediaResponseContainerAsyncWithHttpInfo(containerId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaResponseContainerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaResponseContainerModel>> UpdateMediaResponseContainerAsyncWithHttpInfo (string containerId, UpdateMediaResponseContainerRequest model = null)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling MediaResponseApi->UpdateMediaResponseContainer");

            var localVarPath = "/api/MediaResponse/containers/{containerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMediaResponseContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>MediaResponseContainerModel</returns>
        public MediaResponseContainerModel UpdateMediaResponseContainer_0 (string containerId, UpdateBulkMediaResponseContainerRequest model = null)
        {
             ApiResponse<MediaResponseContainerModel> localVarResponse = UpdateMediaResponseContainer_0WithHttpInfo(containerId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of MediaResponseContainerModel</returns>
        public ApiResponse< MediaResponseContainerModel > UpdateMediaResponseContainer_0WithHttpInfo (string containerId, UpdateBulkMediaResponseContainerRequest model = null)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling MediaResponseApi->UpdateMediaResponseContainer_0");

            var localVarPath = "/api/MediaResponse/containers/{containerId}/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMediaResponseContainer_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of MediaResponseContainerModel</returns>
        public async System.Threading.Tasks.Task<MediaResponseContainerModel> UpdateMediaResponseContainer_0Async (string containerId, UpdateBulkMediaResponseContainerRequest model = null)
        {
             ApiResponse<MediaResponseContainerModel> localVarResponse = await UpdateMediaResponseContainer_0AsyncWithHttpInfo(containerId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (MediaResponseContainerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MediaResponseContainerModel>> UpdateMediaResponseContainer_0AsyncWithHttpInfo (string containerId, UpdateBulkMediaResponseContainerRequest model = null)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling MediaResponseApi->UpdateMediaResponseContainer_0");

            var localVarPath = "/api/MediaResponse/containers/{containerId}/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (containerId != null) localVarPathParams.Add("containerId", this.Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMediaResponseContainer_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MediaResponseContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MediaResponseContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MediaResponseContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ResponseTemplateTypeModel</returns>
        public ResponseTemplateTypeModel UpdateResponseTemplateType (string templateId, UpdateResponseTemplateTypeRequest model = null)
        {
             ApiResponse<ResponseTemplateTypeModel> localVarResponse = UpdateResponseTemplateTypeWithHttpInfo(templateId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of ResponseTemplateTypeModel</returns>
        public ApiResponse< ResponseTemplateTypeModel > UpdateResponseTemplateTypeWithHttpInfo (string templateId, UpdateResponseTemplateTypeRequest model = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling MediaResponseApi->UpdateResponseTemplateType");

            var localVarPath = "/api/MediaResponse/templateType/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResponseTemplateType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTemplateTypeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTemplateTypeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTemplateTypeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ResponseTemplateTypeModel</returns>
        public async System.Threading.Tasks.Task<ResponseTemplateTypeModel> UpdateResponseTemplateTypeAsync (string templateId, UpdateResponseTemplateTypeRequest model = null)
        {
             ApiResponse<ResponseTemplateTypeModel> localVarResponse = await UpdateResponseTemplateTypeAsyncWithHttpInfo(templateId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTemplateTypeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTemplateTypeModel>> UpdateResponseTemplateTypeAsyncWithHttpInfo (string templateId, UpdateResponseTemplateTypeRequest model = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling MediaResponseApi->UpdateResponseTemplateType");

            var localVarPath = "/api/MediaResponse/templateType/{templateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarPathParams.Add("templateId", this.Configuration.ApiClient.ParameterToString(templateId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResponseTemplateType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTemplateTypeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTemplateTypeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTemplateTypeModel)));
        }

    }
}
