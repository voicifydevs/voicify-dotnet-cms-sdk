/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The details of the organization (optional)</param>
        /// <returns>OrganizationModel</returns>
        OrganizationModel CreateOrganization (NewOrganizationRequest model = null);

        /// <summary>
        /// Creates a new Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The details of the organization (optional)</param>
        /// <returns>ApiResponse of OrganizationModel</returns>
        ApiResponse<OrganizationModel> CreateOrganizationWithHttpInfo (NewOrganizationRequest model = null);
        /// <summary>
        /// Gets the members of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>List&lt;MembershipModel&gt;</returns>
        List<MembershipModel> GetDetailedMemberships (string organizationId);

        /// <summary>
        /// Gets the members of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>ApiResponse of List&lt;MembershipModel&gt;</returns>
        ApiResponse<List<MembershipModel>> GetDetailedMembershipsWithHttpInfo (string organizationId);
        /// <summary>
        /// Gets the organization that the current user is a member of
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;OrganizationModel&gt;</returns>
        List<OrganizationModel> GetForUser ();

        /// <summary>
        /// Gets the organization that the current user is a member of
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;OrganizationModel&gt;</returns>
        ApiResponse<List<OrganizationModel>> GetForUserWithHttpInfo ();
        /// <summary>
        /// Gets the members of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>List&lt;OrganizationMemberModel&gt;</returns>
        List<OrganizationMemberModel> GetMembers (string organizationId);

        /// <summary>
        /// Gets the members of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>ApiResponse of List&lt;OrganizationMemberModel&gt;</returns>
        ApiResponse<List<OrganizationMemberModel>> GetMembersWithHttpInfo (string organizationId);
        /// <summary>
        /// Leaves the organization and deletes the current user member record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>OrganizationMemberModel</returns>
        OrganizationMemberModel LeaveOrganization (string organizationId);

        /// <summary>
        /// Leaves the organization and deletes the current user member record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of OrganizationMemberModel</returns>
        ApiResponse<OrganizationMemberModel> LeaveOrganizationWithHttpInfo (string organizationId);
        /// <summary>
        /// Regenerates the given org&#39;s secret used for authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>OrganizationModel</returns>
        OrganizationModel RegenerateOrganizationSecret (string organizationId);

        /// <summary>
        /// Regenerates the given org&#39;s secret used for authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of OrganizationModel</returns>
        ApiResponse<OrganizationModel> RegenerateOrganizationSecretWithHttpInfo (string organizationId);
        /// <summary>
        /// Removes a member of the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <returns>OrganizationMemberModel</returns>
        OrganizationMemberModel RemoveMember (string organizationMemberId);

        /// <summary>
        /// Removes a member of the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <returns>ApiResponse of OrganizationMemberModel</returns>
        ApiResponse<OrganizationMemberModel> RemoveMemberWithHttpInfo (string organizationMemberId);
        /// <summary>
        /// Updates the organization&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the id of the organization</param>
        /// <param name="model">The information to update (optional)</param>
        /// <returns>OrganizationModel</returns>
        OrganizationModel UpdateDetails (string organizationId, UpdateOrganizationRequest model = null);

        /// <summary>
        /// Updates the organization&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the id of the organization</param>
        /// <param name="model">The information to update (optional)</param>
        /// <returns>ApiResponse of OrganizationModel</returns>
        ApiResponse<OrganizationModel> UpdateDetailsWithHttpInfo (string organizationId, UpdateOrganizationRequest model = null);
        /// <summary>
        /// Updates the role of a member of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <param name="model">The role information (optional)</param>
        /// <returns>OrganizationMemberModel</returns>
        OrganizationMemberModel UpdateMemberRole (string organizationMemberId, MemberRoleUpdateRequest model = null);

        /// <summary>
        /// Updates the role of a member of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <param name="model">The role information (optional)</param>
        /// <returns>ApiResponse of OrganizationMemberModel</returns>
        ApiResponse<OrganizationMemberModel> UpdateMemberRoleWithHttpInfo (string organizationMemberId, MemberRoleUpdateRequest model = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The details of the organization (optional)</param>
        /// <returns>Task of OrganizationModel</returns>
        System.Threading.Tasks.Task<OrganizationModel> CreateOrganizationAsync (NewOrganizationRequest model = null);

        /// <summary>
        /// Creates a new Organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The details of the organization (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationModel>> CreateOrganizationAsyncWithHttpInfo (NewOrganizationRequest model = null);
        /// <summary>
        /// Gets the members of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>Task of List&lt;MembershipModel&gt;</returns>
        System.Threading.Tasks.Task<List<MembershipModel>> GetDetailedMembershipsAsync (string organizationId);

        /// <summary>
        /// Gets the members of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>Task of ApiResponse (List&lt;MembershipModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MembershipModel>>> GetDetailedMembershipsAsyncWithHttpInfo (string organizationId);
        /// <summary>
        /// Gets the organization that the current user is a member of
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;OrganizationModel&gt;</returns>
        System.Threading.Tasks.Task<List<OrganizationModel>> GetForUserAsync ();

        /// <summary>
        /// Gets the organization that the current user is a member of
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;OrganizationModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrganizationModel>>> GetForUserAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the members of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>Task of List&lt;OrganizationMemberModel&gt;</returns>
        System.Threading.Tasks.Task<List<OrganizationMemberModel>> GetMembersAsync (string organizationId);

        /// <summary>
        /// Gets the members of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>Task of ApiResponse (List&lt;OrganizationMemberModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrganizationMemberModel>>> GetMembersAsyncWithHttpInfo (string organizationId);
        /// <summary>
        /// Leaves the organization and deletes the current user member record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of OrganizationMemberModel</returns>
        System.Threading.Tasks.Task<OrganizationMemberModel> LeaveOrganizationAsync (string organizationId);

        /// <summary>
        /// Leaves the organization and deletes the current user member record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (OrganizationMemberModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationMemberModel>> LeaveOrganizationAsyncWithHttpInfo (string organizationId);
        /// <summary>
        /// Regenerates the given org&#39;s secret used for authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of OrganizationModel</returns>
        System.Threading.Tasks.Task<OrganizationModel> RegenerateOrganizationSecretAsync (string organizationId);

        /// <summary>
        /// Regenerates the given org&#39;s secret used for authentication
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (OrganizationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationModel>> RegenerateOrganizationSecretAsyncWithHttpInfo (string organizationId);
        /// <summary>
        /// Removes a member of the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <returns>Task of OrganizationMemberModel</returns>
        System.Threading.Tasks.Task<OrganizationMemberModel> RemoveMemberAsync (string organizationMemberId);

        /// <summary>
        /// Removes a member of the organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <returns>Task of ApiResponse (OrganizationMemberModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationMemberModel>> RemoveMemberAsyncWithHttpInfo (string organizationMemberId);
        /// <summary>
        /// Updates the organization&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the id of the organization</param>
        /// <param name="model">The information to update (optional)</param>
        /// <returns>Task of OrganizationModel</returns>
        System.Threading.Tasks.Task<OrganizationModel> UpdateDetailsAsync (string organizationId, UpdateOrganizationRequest model = null);

        /// <summary>
        /// Updates the organization&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the id of the organization</param>
        /// <param name="model">The information to update (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationModel>> UpdateDetailsAsyncWithHttpInfo (string organizationId, UpdateOrganizationRequest model = null);
        /// <summary>
        /// Updates the role of a member of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <param name="model">The role information (optional)</param>
        /// <returns>Task of OrganizationMemberModel</returns>
        System.Threading.Tasks.Task<OrganizationMemberModel> UpdateMemberRoleAsync (string organizationMemberId, MemberRoleUpdateRequest model = null);

        /// <summary>
        /// Updates the role of a member of an organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <param name="model">The role information (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationMemberModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationMemberModel>> UpdateMemberRoleAsyncWithHttpInfo (string organizationMemberId, MemberRoleUpdateRequest model = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationApi : IOrganizationApi
    {
        private Voicify.Sdk.Cms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Cms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationApi(Voicify.Sdk.Cms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Cms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Cms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Cms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new Organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The details of the organization (optional)</param>
        /// <returns>OrganizationModel</returns>
        public OrganizationModel CreateOrganization (NewOrganizationRequest model = null)
        {
             ApiResponse<OrganizationModel> localVarResponse = CreateOrganizationWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new Organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The details of the organization (optional)</param>
        /// <returns>ApiResponse of OrganizationModel</returns>
        public ApiResponse< OrganizationModel > CreateOrganizationWithHttpInfo (NewOrganizationRequest model = null)
        {

            var localVarPath = "/api/Organization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationModel)));
        }

        /// <summary>
        /// Creates a new Organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The details of the organization (optional)</param>
        /// <returns>Task of OrganizationModel</returns>
        public async System.Threading.Tasks.Task<OrganizationModel> CreateOrganizationAsync (NewOrganizationRequest model = null)
        {
             ApiResponse<OrganizationModel> localVarResponse = await CreateOrganizationAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new Organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">The details of the organization (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationModel>> CreateOrganizationAsyncWithHttpInfo (NewOrganizationRequest model = null)
        {

            var localVarPath = "/api/Organization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationModel)));
        }

        /// <summary>
        /// Gets the members of an organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>List&lt;MembershipModel&gt;</returns>
        public List<MembershipModel> GetDetailedMemberships (string organizationId)
        {
             ApiResponse<List<MembershipModel>> localVarResponse = GetDetailedMembershipsWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the members of an organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>ApiResponse of List&lt;MembershipModel&gt;</returns>
        public ApiResponse< List<MembershipModel> > GetDetailedMembershipsWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->GetDetailedMemberships");

            var localVarPath = "/api/Organization/{organizationId}/members/detailed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDetailedMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MembershipModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MembershipModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MembershipModel>)));
        }

        /// <summary>
        /// Gets the members of an organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>Task of List&lt;MembershipModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<MembershipModel>> GetDetailedMembershipsAsync (string organizationId)
        {
             ApiResponse<List<MembershipModel>> localVarResponse = await GetDetailedMembershipsAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the members of an organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>Task of ApiResponse (List&lt;MembershipModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MembershipModel>>> GetDetailedMembershipsAsyncWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->GetDetailedMemberships");

            var localVarPath = "/api/Organization/{organizationId}/members/detailed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDetailedMemberships", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MembershipModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MembershipModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MembershipModel>)));
        }

        /// <summary>
        /// Gets the organization that the current user is a member of 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;OrganizationModel&gt;</returns>
        public List<OrganizationModel> GetForUser ()
        {
             ApiResponse<List<OrganizationModel>> localVarResponse = GetForUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the organization that the current user is a member of 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;OrganizationModel&gt;</returns>
        public ApiResponse< List<OrganizationModel> > GetForUserWithHttpInfo ()
        {

            var localVarPath = "/api/Organization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrganizationModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrganizationModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrganizationModel>)));
        }

        /// <summary>
        /// Gets the organization that the current user is a member of 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;OrganizationModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrganizationModel>> GetForUserAsync ()
        {
             ApiResponse<List<OrganizationModel>> localVarResponse = await GetForUserAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the organization that the current user is a member of 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;OrganizationModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrganizationModel>>> GetForUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Organization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrganizationModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrganizationModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrganizationModel>)));
        }

        /// <summary>
        /// Gets the members of an organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>List&lt;OrganizationMemberModel&gt;</returns>
        public List<OrganizationMemberModel> GetMembers (string organizationId)
        {
             ApiResponse<List<OrganizationMemberModel>> localVarResponse = GetMembersWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the members of an organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>ApiResponse of List&lt;OrganizationMemberModel&gt;</returns>
        public ApiResponse< List<OrganizationMemberModel> > GetMembersWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->GetMembers");

            var localVarPath = "/api/Organization/{organizationId}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrganizationMemberModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrganizationMemberModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrganizationMemberModel>)));
        }

        /// <summary>
        /// Gets the members of an organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>Task of List&lt;OrganizationMemberModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrganizationMemberModel>> GetMembersAsync (string organizationId)
        {
             ApiResponse<List<OrganizationMemberModel>> localVarResponse = await GetMembersAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the members of an organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">The id of the organization</param>
        /// <returns>Task of ApiResponse (List&lt;OrganizationMemberModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrganizationMemberModel>>> GetMembersAsyncWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->GetMembers");

            var localVarPath = "/api/Organization/{organizationId}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrganizationMemberModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrganizationMemberModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrganizationMemberModel>)));
        }

        /// <summary>
        /// Leaves the organization and deletes the current user member record 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>OrganizationMemberModel</returns>
        public OrganizationMemberModel LeaveOrganization (string organizationId)
        {
             ApiResponse<OrganizationMemberModel> localVarResponse = LeaveOrganizationWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Leaves the organization and deletes the current user member record 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of OrganizationMemberModel</returns>
        public ApiResponse< OrganizationMemberModel > LeaveOrganizationWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->LeaveOrganization");

            var localVarPath = "/api/Organization/{organizationId}/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMemberModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationMemberModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMemberModel)));
        }

        /// <summary>
        /// Leaves the organization and deletes the current user member record 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of OrganizationMemberModel</returns>
        public async System.Threading.Tasks.Task<OrganizationMemberModel> LeaveOrganizationAsync (string organizationId)
        {
             ApiResponse<OrganizationMemberModel> localVarResponse = await LeaveOrganizationAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Leaves the organization and deletes the current user member record 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (OrganizationMemberModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationMemberModel>> LeaveOrganizationAsyncWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->LeaveOrganization");

            var localVarPath = "/api/Organization/{organizationId}/leave";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeaveOrganization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMemberModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationMemberModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMemberModel)));
        }

        /// <summary>
        /// Regenerates the given org&#39;s secret used for authentication 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>OrganizationModel</returns>
        public OrganizationModel RegenerateOrganizationSecret (string organizationId)
        {
             ApiResponse<OrganizationModel> localVarResponse = RegenerateOrganizationSecretWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerates the given org&#39;s secret used for authentication 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of OrganizationModel</returns>
        public ApiResponse< OrganizationModel > RegenerateOrganizationSecretWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->RegenerateOrganizationSecret");

            var localVarPath = "/api/Organization/{organizationId}/regenerateSecrets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegenerateOrganizationSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationModel)));
        }

        /// <summary>
        /// Regenerates the given org&#39;s secret used for authentication 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of OrganizationModel</returns>
        public async System.Threading.Tasks.Task<OrganizationModel> RegenerateOrganizationSecretAsync (string organizationId)
        {
             ApiResponse<OrganizationModel> localVarResponse = await RegenerateOrganizationSecretAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Regenerates the given org&#39;s secret used for authentication 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (OrganizationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationModel>> RegenerateOrganizationSecretAsyncWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->RegenerateOrganizationSecret");

            var localVarPath = "/api/Organization/{organizationId}/regenerateSecrets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegenerateOrganizationSecret", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationModel)));
        }

        /// <summary>
        /// Removes a member of the organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <returns>OrganizationMemberModel</returns>
        public OrganizationMemberModel RemoveMember (string organizationMemberId)
        {
             ApiResponse<OrganizationMemberModel> localVarResponse = RemoveMemberWithHttpInfo(organizationMemberId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a member of the organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <returns>ApiResponse of OrganizationMemberModel</returns>
        public ApiResponse< OrganizationMemberModel > RemoveMemberWithHttpInfo (string organizationMemberId)
        {
            // verify the required parameter 'organizationMemberId' is set
            if (organizationMemberId == null)
                throw new ApiException(400, "Missing required parameter 'organizationMemberId' when calling OrganizationApi->RemoveMember");

            var localVarPath = "/api/Organization/members/{organizationMemberId}/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationMemberId != null) localVarPathParams.Add("organizationMemberId", this.Configuration.ApiClient.ParameterToString(organizationMemberId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMemberModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationMemberModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMemberModel)));
        }

        /// <summary>
        /// Removes a member of the organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <returns>Task of OrganizationMemberModel</returns>
        public async System.Threading.Tasks.Task<OrganizationMemberModel> RemoveMemberAsync (string organizationMemberId)
        {
             ApiResponse<OrganizationMemberModel> localVarResponse = await RemoveMemberAsyncWithHttpInfo(organizationMemberId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a member of the organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <returns>Task of ApiResponse (OrganizationMemberModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationMemberModel>> RemoveMemberAsyncWithHttpInfo (string organizationMemberId)
        {
            // verify the required parameter 'organizationMemberId' is set
            if (organizationMemberId == null)
                throw new ApiException(400, "Missing required parameter 'organizationMemberId' when calling OrganizationApi->RemoveMember");

            var localVarPath = "/api/Organization/members/{organizationMemberId}/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationMemberId != null) localVarPathParams.Add("organizationMemberId", this.Configuration.ApiClient.ParameterToString(organizationMemberId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMemberModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationMemberModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMemberModel)));
        }

        /// <summary>
        /// Updates the organization&#39;s details 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the id of the organization</param>
        /// <param name="model">The information to update (optional)</param>
        /// <returns>OrganizationModel</returns>
        public OrganizationModel UpdateDetails (string organizationId, UpdateOrganizationRequest model = null)
        {
             ApiResponse<OrganizationModel> localVarResponse = UpdateDetailsWithHttpInfo(organizationId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the organization&#39;s details 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the id of the organization</param>
        /// <param name="model">The information to update (optional)</param>
        /// <returns>ApiResponse of OrganizationModel</returns>
        public ApiResponse< OrganizationModel > UpdateDetailsWithHttpInfo (string organizationId, UpdateOrganizationRequest model = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->UpdateDetails");

            var localVarPath = "/api/Organization/{organizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationModel)));
        }

        /// <summary>
        /// Updates the organization&#39;s details 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the id of the organization</param>
        /// <param name="model">The information to update (optional)</param>
        /// <returns>Task of OrganizationModel</returns>
        public async System.Threading.Tasks.Task<OrganizationModel> UpdateDetailsAsync (string organizationId, UpdateOrganizationRequest model = null)
        {
             ApiResponse<OrganizationModel> localVarResponse = await UpdateDetailsAsyncWithHttpInfo(organizationId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the organization&#39;s details 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId">the id of the organization</param>
        /// <param name="model">The information to update (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationModel>> UpdateDetailsAsyncWithHttpInfo (string organizationId, UpdateOrganizationRequest model = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling OrganizationApi->UpdateDetails");

            var localVarPath = "/api/Organization/{organizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationModel)));
        }

        /// <summary>
        /// Updates the role of a member of an organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <param name="model">The role information (optional)</param>
        /// <returns>OrganizationMemberModel</returns>
        public OrganizationMemberModel UpdateMemberRole (string organizationMemberId, MemberRoleUpdateRequest model = null)
        {
             ApiResponse<OrganizationMemberModel> localVarResponse = UpdateMemberRoleWithHttpInfo(organizationMemberId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the role of a member of an organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <param name="model">The role information (optional)</param>
        /// <returns>ApiResponse of OrganizationMemberModel</returns>
        public ApiResponse< OrganizationMemberModel > UpdateMemberRoleWithHttpInfo (string organizationMemberId, MemberRoleUpdateRequest model = null)
        {
            // verify the required parameter 'organizationMemberId' is set
            if (organizationMemberId == null)
                throw new ApiException(400, "Missing required parameter 'organizationMemberId' when calling OrganizationApi->UpdateMemberRole");

            var localVarPath = "/api/Organization/members/{organizationMemberId}/role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationMemberId != null) localVarPathParams.Add("organizationMemberId", this.Configuration.ApiClient.ParameterToString(organizationMemberId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMemberRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMemberModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationMemberModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMemberModel)));
        }

        /// <summary>
        /// Updates the role of a member of an organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <param name="model">The role information (optional)</param>
        /// <returns>Task of OrganizationMemberModel</returns>
        public async System.Threading.Tasks.Task<OrganizationMemberModel> UpdateMemberRoleAsync (string organizationMemberId, MemberRoleUpdateRequest model = null)
        {
             ApiResponse<OrganizationMemberModel> localVarResponse = await UpdateMemberRoleAsyncWithHttpInfo(organizationMemberId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the role of a member of an organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationMemberId">The member id</param>
        /// <param name="model">The role information (optional)</param>
        /// <returns>Task of ApiResponse (OrganizationMemberModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationMemberModel>> UpdateMemberRoleAsyncWithHttpInfo (string organizationMemberId, MemberRoleUpdateRequest model = null)
        {
            // verify the required parameter 'organizationMemberId' is set
            if (organizationMemberId == null)
                throw new ApiException(400, "Missing required parameter 'organizationMemberId' when calling OrganizationApi->UpdateMemberRole");

            var localVarPath = "/api/Organization/members/{organizationMemberId}/role";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationMemberId != null) localVarPathParams.Add("organizationMemberId", this.Configuration.ApiClient.ParameterToString(organizationMemberId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMemberRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMemberModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationMemberModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMemberModel)));
        }

    }
}
