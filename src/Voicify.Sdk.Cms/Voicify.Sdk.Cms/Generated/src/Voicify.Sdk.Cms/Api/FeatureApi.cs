/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeatureApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a top level application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApplicationFeatureModel</returns>
        ApplicationFeatureModel AddFeatureAsync (string applicationId, CreateApplicationFeatureRequest request = null);

        /// <summary>
        /// Create a top level application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        ApiResponse<ApplicationFeatureModel> AddFeatureAsyncWithHttpInfo (string applicationId, CreateApplicationFeatureRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApplicationFeatureWebhookModel</returns>
        ApplicationFeatureWebhookModel AddWebhook (string applicationFeatureId, string webhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of ApplicationFeatureWebhookModel</returns>
        ApiResponse<ApplicationFeatureWebhookModel> AddWebhookWithHttpInfo (string applicationFeatureId, string webhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="applicationModuleId"></param>
        /// <returns>ApplicationFeatureModel</returns>
        ApplicationFeatureModel ChangeModule (string applicationFeatureId, string applicationModuleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="applicationModuleId"></param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        ApiResponse<ApplicationFeatureModel> ChangeModuleWithHttpInfo (string applicationFeatureId, string applicationModuleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? CreateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> CreateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);
        /// <summary>
        /// Deletes the given feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>ApplicationFeatureModel</returns>
        ApplicationFeatureModel DeleteFeature (string applicationFeatureId);

        /// <summary>
        /// Deletes the given feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        ApiResponse<ApplicationFeatureModel> DeleteFeatureWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Disables the given feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>ApplicationFeatureModel</returns>
        ApplicationFeatureModel DisableFeature (string applicationFeatureId);

        /// <summary>
        /// Disables the given feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        ApiResponse<ApplicationFeatureModel> DisableFeatureWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Enables the given feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>ApplicationFeatureModel</returns>
        ApplicationFeatureModel EnableFeature (string applicationFeatureId);

        /// <summary>
        /// Enables the given feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        ApiResponse<ApplicationFeatureModel> EnableFeatureWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;ConversationCountModel&gt;</returns>
        List<ConversationCountModel> GetAppFeaturesWithCounts (string applicationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;ConversationCountModel&gt;</returns>
        ApiResponse<List<ConversationCountModel>> GetAppFeaturesWithCountsWithHttpInfo (string applicationId);
        /// <summary>
        /// Get the list of available features for an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The Id of an application</param>
        /// <returns>List&lt;FeatureModel&gt;</returns>
        List<FeatureModel> GetAvailableApplicationFeatures (string applicationId);

        /// <summary>
        /// Get the list of available features for an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The Id of an application</param>
        /// <returns>ApiResponse of List&lt;FeatureModel&gt;</returns>
        ApiResponse<List<FeatureModel>> GetAvailableApplicationFeaturesWithHttpInfo (string applicationId);
        /// <summary>
        /// Get the built in features supported by Voicify
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FeatureModel&gt;</returns>
        List<FeatureModel> GetBuiltInFeatures ();

        /// <summary>
        /// Get the built in features supported by Voicify
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FeatureModel&gt;</returns>
        ApiResponse<List<FeatureModel>> GetBuiltInFeaturesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;GenericContentModel&gt;</returns>
        List<GenericContentModel> GetContentItemsForApplicationFeature (string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;GenericContentModel&gt;</returns>
        ApiResponse<List<GenericContentModel>> GetContentItemsForApplicationFeatureWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Gets all the available feature types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FeatureTypeModel&gt;</returns>
        List<FeatureTypeModel> GetFeatureTypes ();

        /// <summary>
        /// Gets all the available feature types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FeatureTypeModel&gt;</returns>
        ApiResponse<List<FeatureTypeModel>> GetFeatureTypesWithHttpInfo ();
        /// <summary>
        /// Get the features for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;ApplicationFeatureModel&gt;</returns>
        List<ApplicationFeatureModel> GetFeaturesForApplication (string applicationId);

        /// <summary>
        /// Get the features for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;ApplicationFeatureModel&gt;</returns>
        ApiResponse<List<ApplicationFeatureModel>> GetFeaturesForApplicationWithHttpInfo (string applicationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;ApplicationFeatureWebhookModel&gt;</returns>
        List<ApplicationFeatureWebhookModel> GetWebhooks (string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;ApplicationFeatureWebhookModel&gt;</returns>
        ApiResponse<List<ApplicationFeatureWebhookModel>> GetWebhooksWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>bool?</returns>
        bool? RemoveUserDefinedParameter (string instanceWebhookId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> RemoveUserDefinedParameterWithHttpInfo (string instanceWebhookId, string parameterName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureWebhookId"></param>
        /// <returns>ApplicationFeatureWebhookModel</returns>
        ApplicationFeatureWebhookModel RemoveWebhook (string applicationFeatureWebhookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureWebhookId"></param>
        /// <returns>ApiResponse of ApplicationFeatureWebhookModel</returns>
        ApiResponse<ApplicationFeatureWebhookModel> RemoveWebhookWithHttpInfo (string applicationFeatureWebhookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="parentApplicationFeatureId"> (optional)</param>
        /// <param name="applicationFeatureIds"> (optional)</param>
        /// <returns>List&lt;ApplicationFeatureModel&gt;</returns>
        List<ApplicationFeatureModel> SetApplicationFeatureOrder (string applicationId, string parentApplicationFeatureId = null, List<string> applicationFeatureIds = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="parentApplicationFeatureId"> (optional)</param>
        /// <param name="applicationFeatureIds"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ApplicationFeatureModel&gt;</returns>
        ApiResponse<List<ApplicationFeatureModel>> SetApplicationFeatureOrderWithHttpInfo (string applicationId, string parentApplicationFeatureId = null, List<string> applicationFeatureIds = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApplicationFeatureModel</returns>
        ApplicationFeatureModel UpdateApplicationFeature (string applicationFeatureId, UpdateApplicationFeatureRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        ApiResponse<ApplicationFeatureModel> UpdateApplicationFeatureWithHttpInfo (string applicationFeatureId, UpdateApplicationFeatureRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApplicationFeatureWebhookModel</returns>
        ApplicationFeatureWebhookModel UpdateAttachedWebhook (string applicationFeatureId, string webhookInstanceId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of ApplicationFeatureWebhookModel</returns>
        ApiResponse<ApplicationFeatureWebhookModel> UpdateAttachedWebhookWithHttpInfo (string applicationFeatureId, string webhookInstanceId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="parentApplicationFeatureId"></param>
        /// <returns>ApplicationFeatureModel</returns>
        ApplicationFeatureModel UpdateParentForApplicationFeature (string applicationFeatureId, string parentApplicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="parentApplicationFeatureId"></param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        ApiResponse<ApplicationFeatureModel> UpdateParentForApplicationFeatureWithHttpInfo (string applicationFeatureId, string parentApplicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? UpdateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UpdateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? UpdateWebhookParameter (string instanceWebhookId, WebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UpdateWebhookParameterWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a top level application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        System.Threading.Tasks.Task<ApplicationFeatureModel> AddFeatureAsyncAsync (string applicationId, CreateApplicationFeatureRequest request = null);

        /// <summary>
        /// Create a top level application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> AddFeatureAsyncAsyncWithHttpInfo (string applicationId, CreateApplicationFeatureRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApplicationFeatureWebhookModel</returns>
        System.Threading.Tasks.Task<ApplicationFeatureWebhookModel> AddWebhookAsync (string applicationFeatureId, string webhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureWebhookModel>> AddWebhookAsyncWithHttpInfo (string applicationFeatureId, string webhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        System.Threading.Tasks.Task<ApplicationFeatureModel> ChangeModuleAsync (string applicationFeatureId, string applicationModuleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> ChangeModuleAsyncWithHttpInfo (string applicationFeatureId, string applicationModuleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> CreateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> CreateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);
        /// <summary>
        /// Deletes the given feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        System.Threading.Tasks.Task<ApplicationFeatureModel> DeleteFeatureAsync (string applicationFeatureId);

        /// <summary>
        /// Deletes the given feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> DeleteFeatureAsyncWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Disables the given feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        System.Threading.Tasks.Task<ApplicationFeatureModel> DisableFeatureAsync (string applicationFeatureId);

        /// <summary>
        /// Disables the given feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> DisableFeatureAsyncWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Enables the given feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        System.Threading.Tasks.Task<ApplicationFeatureModel> EnableFeatureAsync (string applicationFeatureId);

        /// <summary>
        /// Enables the given feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> EnableFeatureAsyncWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;ConversationCountModel&gt;</returns>
        System.Threading.Tasks.Task<List<ConversationCountModel>> GetAppFeaturesWithCountsAsync (string applicationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;ConversationCountModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConversationCountModel>>> GetAppFeaturesWithCountsAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// Get the list of available features for an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The Id of an application</param>
        /// <returns>Task of List&lt;FeatureModel&gt;</returns>
        System.Threading.Tasks.Task<List<FeatureModel>> GetAvailableApplicationFeaturesAsync (string applicationId);

        /// <summary>
        /// Get the list of available features for an application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The Id of an application</param>
        /// <returns>Task of ApiResponse (List&lt;FeatureModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeatureModel>>> GetAvailableApplicationFeaturesAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// Get the built in features supported by Voicify
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FeatureModel&gt;</returns>
        System.Threading.Tasks.Task<List<FeatureModel>> GetBuiltInFeaturesAsync ();

        /// <summary>
        /// Get the built in features supported by Voicify
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FeatureModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeatureModel>>> GetBuiltInFeaturesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;GenericContentModel&gt;</returns>
        System.Threading.Tasks.Task<List<GenericContentModel>> GetContentItemsForApplicationFeatureAsync (string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;GenericContentModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GenericContentModel>>> GetContentItemsForApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Gets all the available feature types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FeatureTypeModel&gt;</returns>
        System.Threading.Tasks.Task<List<FeatureTypeModel>> GetFeatureTypesAsync ();

        /// <summary>
        /// Gets all the available feature types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FeatureTypeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FeatureTypeModel>>> GetFeatureTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Get the features for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;ApplicationFeatureModel&gt;</returns>
        System.Threading.Tasks.Task<List<ApplicationFeatureModel>> GetFeaturesForApplicationAsync (string applicationId);

        /// <summary>
        /// Get the features for the given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationFeatureModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApplicationFeatureModel>>> GetFeaturesForApplicationAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;ApplicationFeatureWebhookModel&gt;</returns>
        System.Threading.Tasks.Task<List<ApplicationFeatureWebhookModel>> GetWebhooksAsync (string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationFeatureWebhookModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApplicationFeatureWebhookModel>>> GetWebhooksAsyncWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> RemoveUserDefinedParameterAsync (string instanceWebhookId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> RemoveUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, string parameterName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureWebhookId"></param>
        /// <returns>Task of ApplicationFeatureWebhookModel</returns>
        System.Threading.Tasks.Task<ApplicationFeatureWebhookModel> RemoveWebhookAsync (string applicationFeatureWebhookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureWebhookId"></param>
        /// <returns>Task of ApiResponse (ApplicationFeatureWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureWebhookModel>> RemoveWebhookAsyncWithHttpInfo (string applicationFeatureWebhookId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="parentApplicationFeatureId"> (optional)</param>
        /// <param name="applicationFeatureIds"> (optional)</param>
        /// <returns>Task of List&lt;ApplicationFeatureModel&gt;</returns>
        System.Threading.Tasks.Task<List<ApplicationFeatureModel>> SetApplicationFeatureOrderAsync (string applicationId, string parentApplicationFeatureId = null, List<string> applicationFeatureIds = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="parentApplicationFeatureId"> (optional)</param>
        /// <param name="applicationFeatureIds"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationFeatureModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApplicationFeatureModel>>> SetApplicationFeatureOrderAsyncWithHttpInfo (string applicationId, string parentApplicationFeatureId = null, List<string> applicationFeatureIds = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        System.Threading.Tasks.Task<ApplicationFeatureModel> UpdateApplicationFeatureAsync (string applicationFeatureId, UpdateApplicationFeatureRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> UpdateApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId, UpdateApplicationFeatureRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApplicationFeatureWebhookModel</returns>
        System.Threading.Tasks.Task<ApplicationFeatureWebhookModel> UpdateAttachedWebhookAsync (string applicationFeatureId, string webhookInstanceId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureWebhookModel>> UpdateAttachedWebhookAsyncWithHttpInfo (string applicationFeatureId, string webhookInstanceId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="parentApplicationFeatureId"></param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        System.Threading.Tasks.Task<ApplicationFeatureModel> UpdateParentForApplicationFeatureAsync (string applicationFeatureId, string parentApplicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="parentApplicationFeatureId"></param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> UpdateParentForApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId, string parentApplicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UpdateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UpdateWebhookParameterAsync (string instanceWebhookId, WebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateWebhookParameterAsyncWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeatureApi : IFeatureApi
    {
        private Voicify.Sdk.Cms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeatureApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Cms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeatureApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeatureApi(Voicify.Sdk.Cms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Cms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Cms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Cms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a top level application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApplicationFeatureModel</returns>
        public ApplicationFeatureModel AddFeatureAsync (string applicationId, CreateApplicationFeatureRequest request = null)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = AddFeatureAsyncWithHttpInfo(applicationId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a top level application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        public ApiResponse< ApplicationFeatureModel > AddFeatureAsyncWithHttpInfo (string applicationId, CreateApplicationFeatureRequest request = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FeatureApi->AddFeatureAsync");

            var localVarPath = "/api/Feature/{applicationId}/AddFeature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFeatureAsync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        /// Create a top level application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        public async System.Threading.Tasks.Task<ApplicationFeatureModel> AddFeatureAsyncAsync (string applicationId, CreateApplicationFeatureRequest request = null)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = await AddFeatureAsyncAsyncWithHttpInfo(applicationId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a top level application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> AddFeatureAsyncAsyncWithHttpInfo (string applicationId, CreateApplicationFeatureRequest request = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FeatureApi->AddFeatureAsync");

            var localVarPath = "/api/Feature/{applicationId}/AddFeature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFeatureAsync", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApplicationFeatureWebhookModel</returns>
        public ApplicationFeatureWebhookModel AddWebhook (string applicationFeatureId, string webhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<ApplicationFeatureWebhookModel> localVarResponse = AddWebhookWithHttpInfo(applicationFeatureId, webhookId, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of ApplicationFeatureWebhookModel</returns>
        public ApiResponse< ApplicationFeatureWebhookModel > AddWebhookWithHttpInfo (string applicationFeatureId, string webhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->AddWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling FeatureApi->AddWebhook");

            var localVarPath = "/api/Feature/{applicationFeatureId}/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter
            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApplicationFeatureWebhookModel</returns>
        public async System.Threading.Tasks.Task<ApplicationFeatureWebhookModel> AddWebhookAsync (string applicationFeatureId, string webhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<ApplicationFeatureWebhookModel> localVarResponse = await AddWebhookAsyncWithHttpInfo(applicationFeatureId, webhookId, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureWebhookModel>> AddWebhookAsyncWithHttpInfo (string applicationFeatureId, string webhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->AddWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling FeatureApi->AddWebhook");

            var localVarPath = "/api/Feature/{applicationFeatureId}/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter
            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="applicationModuleId"></param>
        /// <returns>ApplicationFeatureModel</returns>
        public ApplicationFeatureModel ChangeModule (string applicationFeatureId, string applicationModuleId)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = ChangeModuleWithHttpInfo(applicationFeatureId, applicationModuleId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="applicationModuleId"></param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        public ApiResponse< ApplicationFeatureModel > ChangeModuleWithHttpInfo (string applicationFeatureId, string applicationModuleId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->ChangeModule");
            // verify the required parameter 'applicationModuleId' is set
            if (applicationModuleId == null)
                throw new ApiException(400, "Missing required parameter 'applicationModuleId' when calling FeatureApi->ChangeModule");

            var localVarPath = "/api/Feature/{applicationFeatureId}/changeModule/{applicationModuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter
            if (applicationModuleId != null) localVarPathParams.Add("applicationModuleId", this.Configuration.ApiClient.ParameterToString(applicationModuleId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        public async System.Threading.Tasks.Task<ApplicationFeatureModel> ChangeModuleAsync (string applicationFeatureId, string applicationModuleId)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = await ChangeModuleAsyncWithHttpInfo(applicationFeatureId, applicationModuleId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> ChangeModuleAsyncWithHttpInfo (string applicationFeatureId, string applicationModuleId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->ChangeModule");
            // verify the required parameter 'applicationModuleId' is set
            if (applicationModuleId == null)
                throw new ApiException(400, "Missing required parameter 'applicationModuleId' when calling FeatureApi->ChangeModule");

            var localVarPath = "/api/Feature/{applicationFeatureId}/changeModule/{applicationModuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter
            if (applicationModuleId != null) localVarPathParams.Add("applicationModuleId", this.Configuration.ApiClient.ParameterToString(applicationModuleId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? CreateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = CreateUserDefinedParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > CreateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling FeatureApi->CreateUserDefinedParameter");

            var localVarPath = "/api/Feature/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> CreateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await CreateUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> CreateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling FeatureApi->CreateUserDefinedParameter");

            var localVarPath = "/api/Feature/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Deletes the given feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>ApplicationFeatureModel</returns>
        public ApplicationFeatureModel DeleteFeature (string applicationFeatureId)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = DeleteFeatureWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the given feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        public ApiResponse< ApplicationFeatureModel > DeleteFeatureWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->DeleteFeature");

            var localVarPath = "/api/Feature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        /// Deletes the given feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        public async System.Threading.Tasks.Task<ApplicationFeatureModel> DeleteFeatureAsync (string applicationFeatureId)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = await DeleteFeatureAsyncWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the given feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> DeleteFeatureAsyncWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->DeleteFeature");

            var localVarPath = "/api/Feature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        /// Disables the given feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>ApplicationFeatureModel</returns>
        public ApplicationFeatureModel DisableFeature (string applicationFeatureId)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = DisableFeatureWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disables the given feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        public ApiResponse< ApplicationFeatureModel > DisableFeatureWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->DisableFeature");

            var localVarPath = "/api/Feature/{applicationFeatureId}/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        /// Disables the given feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        public async System.Threading.Tasks.Task<ApplicationFeatureModel> DisableFeatureAsync (string applicationFeatureId)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = await DisableFeatureAsyncWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disables the given feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> DisableFeatureAsyncWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->DisableFeature");

            var localVarPath = "/api/Feature/{applicationFeatureId}/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        /// Enables the given feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>ApplicationFeatureModel</returns>
        public ApplicationFeatureModel EnableFeature (string applicationFeatureId)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = EnableFeatureWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enables the given feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        public ApiResponse< ApplicationFeatureModel > EnableFeatureWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->EnableFeature");

            var localVarPath = "/api/Feature/{applicationFeatureId}/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        /// Enables the given feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        public async System.Threading.Tasks.Task<ApplicationFeatureModel> EnableFeatureAsync (string applicationFeatureId)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = await EnableFeatureAsyncWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enables the given feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId">The id of the application feature</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> EnableFeatureAsyncWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->EnableFeature");

            var localVarPath = "/api/Feature/{applicationFeatureId}/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;ConversationCountModel&gt;</returns>
        public List<ConversationCountModel> GetAppFeaturesWithCounts (string applicationId)
        {
             ApiResponse<List<ConversationCountModel>> localVarResponse = GetAppFeaturesWithCountsWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;ConversationCountModel&gt;</returns>
        public ApiResponse< List<ConversationCountModel> > GetAppFeaturesWithCountsWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FeatureApi->GetAppFeaturesWithCounts");

            var localVarPath = "/api/Feature/{applicationId}/features/conversationCounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppFeaturesWithCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConversationCountModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ConversationCountModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConversationCountModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;ConversationCountModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConversationCountModel>> GetAppFeaturesWithCountsAsync (string applicationId)
        {
             ApiResponse<List<ConversationCountModel>> localVarResponse = await GetAppFeaturesWithCountsAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;ConversationCountModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ConversationCountModel>>> GetAppFeaturesWithCountsAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FeatureApi->GetAppFeaturesWithCounts");

            var localVarPath = "/api/Feature/{applicationId}/features/conversationCounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppFeaturesWithCounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ConversationCountModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ConversationCountModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ConversationCountModel>)));
        }

        /// <summary>
        /// Get the list of available features for an application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The Id of an application</param>
        /// <returns>List&lt;FeatureModel&gt;</returns>
        public List<FeatureModel> GetAvailableApplicationFeatures (string applicationId)
        {
             ApiResponse<List<FeatureModel>> localVarResponse = GetAvailableApplicationFeaturesWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of available features for an application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The Id of an application</param>
        /// <returns>ApiResponse of List&lt;FeatureModel&gt;</returns>
        public ApiResponse< List<FeatureModel> > GetAvailableApplicationFeaturesWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FeatureApi->GetAvailableApplicationFeatures");

            var localVarPath = "/api/Feature/{applicationId}/Available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableApplicationFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureModel>)));
        }

        /// <summary>
        /// Get the list of available features for an application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The Id of an application</param>
        /// <returns>Task of List&lt;FeatureModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeatureModel>> GetAvailableApplicationFeaturesAsync (string applicationId)
        {
             ApiResponse<List<FeatureModel>> localVarResponse = await GetAvailableApplicationFeaturesAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of available features for an application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">The Id of an application</param>
        /// <returns>Task of ApiResponse (List&lt;FeatureModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FeatureModel>>> GetAvailableApplicationFeaturesAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FeatureApi->GetAvailableApplicationFeatures");

            var localVarPath = "/api/Feature/{applicationId}/Available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableApplicationFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureModel>)));
        }

        /// <summary>
        /// Get the built in features supported by Voicify 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FeatureModel&gt;</returns>
        public List<FeatureModel> GetBuiltInFeatures ()
        {
             ApiResponse<List<FeatureModel>> localVarResponse = GetBuiltInFeaturesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the built in features supported by Voicify 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FeatureModel&gt;</returns>
        public ApiResponse< List<FeatureModel> > GetBuiltInFeaturesWithHttpInfo ()
        {

            var localVarPath = "/api/Feature/BuiltIn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuiltInFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureModel>)));
        }

        /// <summary>
        /// Get the built in features supported by Voicify 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FeatureModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeatureModel>> GetBuiltInFeaturesAsync ()
        {
             ApiResponse<List<FeatureModel>> localVarResponse = await GetBuiltInFeaturesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the built in features supported by Voicify 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FeatureModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FeatureModel>>> GetBuiltInFeaturesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Feature/BuiltIn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuiltInFeatures", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;GenericContentModel&gt;</returns>
        public List<GenericContentModel> GetContentItemsForApplicationFeature (string applicationFeatureId)
        {
             ApiResponse<List<GenericContentModel>> localVarResponse = GetContentItemsForApplicationFeatureWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;GenericContentModel&gt;</returns>
        public ApiResponse< List<GenericContentModel> > GetContentItemsForApplicationFeatureWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->GetContentItemsForApplicationFeature");

            var localVarPath = "/api/Feature/{applicationFeatureId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentItemsForApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GenericContentModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GenericContentModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GenericContentModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;GenericContentModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<GenericContentModel>> GetContentItemsForApplicationFeatureAsync (string applicationFeatureId)
        {
             ApiResponse<List<GenericContentModel>> localVarResponse = await GetContentItemsForApplicationFeatureAsyncWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;GenericContentModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GenericContentModel>>> GetContentItemsForApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->GetContentItemsForApplicationFeature");

            var localVarPath = "/api/Feature/{applicationFeatureId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContentItemsForApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GenericContentModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GenericContentModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GenericContentModel>)));
        }

        /// <summary>
        /// Gets all the available feature types 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;FeatureTypeModel&gt;</returns>
        public List<FeatureTypeModel> GetFeatureTypes ()
        {
             ApiResponse<List<FeatureTypeModel>> localVarResponse = GetFeatureTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the available feature types 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;FeatureTypeModel&gt;</returns>
        public ApiResponse< List<FeatureTypeModel> > GetFeatureTypesWithHttpInfo ()
        {

            var localVarPath = "/api/Feature/Types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureTypeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureTypeModel>)));
        }

        /// <summary>
        /// Gets all the available feature types 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;FeatureTypeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<FeatureTypeModel>> GetFeatureTypesAsync ()
        {
             ApiResponse<List<FeatureTypeModel>> localVarResponse = await GetFeatureTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the available feature types 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;FeatureTypeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FeatureTypeModel>>> GetFeatureTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Feature/Types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeatureTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FeatureTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FeatureTypeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FeatureTypeModel>)));
        }

        /// <summary>
        /// Get the features for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;ApplicationFeatureModel&gt;</returns>
        public List<ApplicationFeatureModel> GetFeaturesForApplication (string applicationId)
        {
             ApiResponse<List<ApplicationFeatureModel>> localVarResponse = GetFeaturesForApplicationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the features for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;ApplicationFeatureModel&gt;</returns>
        public ApiResponse< List<ApplicationFeatureModel> > GetFeaturesForApplicationWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FeatureApi->GetFeaturesForApplication");

            var localVarPath = "/api/Feature/{applicationId}/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeaturesForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApplicationFeatureModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApplicationFeatureModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationFeatureModel>)));
        }

        /// <summary>
        /// Get the features for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;ApplicationFeatureModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApplicationFeatureModel>> GetFeaturesForApplicationAsync (string applicationId)
        {
             ApiResponse<List<ApplicationFeatureModel>> localVarResponse = await GetFeaturesForApplicationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the features for the given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationFeatureModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApplicationFeatureModel>>> GetFeaturesForApplicationAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FeatureApi->GetFeaturesForApplication");

            var localVarPath = "/api/Feature/{applicationId}/features";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFeaturesForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApplicationFeatureModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApplicationFeatureModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationFeatureModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;ApplicationFeatureWebhookModel&gt;</returns>
        public List<ApplicationFeatureWebhookModel> GetWebhooks (string applicationFeatureId)
        {
             ApiResponse<List<ApplicationFeatureWebhookModel>> localVarResponse = GetWebhooksWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;ApplicationFeatureWebhookModel&gt;</returns>
        public ApiResponse< List<ApplicationFeatureWebhookModel> > GetWebhooksWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->GetWebhooks");

            var localVarPath = "/api/Feature/{applicationFeatureId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApplicationFeatureWebhookModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApplicationFeatureWebhookModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationFeatureWebhookModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;ApplicationFeatureWebhookModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApplicationFeatureWebhookModel>> GetWebhooksAsync (string applicationFeatureId)
        {
             ApiResponse<List<ApplicationFeatureWebhookModel>> localVarResponse = await GetWebhooksAsyncWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationFeatureWebhookModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApplicationFeatureWebhookModel>>> GetWebhooksAsyncWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->GetWebhooks");

            var localVarPath = "/api/Feature/{applicationFeatureId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApplicationFeatureWebhookModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApplicationFeatureWebhookModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationFeatureWebhookModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>bool?</returns>
        public bool? RemoveUserDefinedParameter (string instanceWebhookId, string parameterName)
        {
             ApiResponse<bool?> localVarResponse = RemoveUserDefinedParameterWithHttpInfo(instanceWebhookId, parameterName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > RemoveUserDefinedParameterWithHttpInfo (string instanceWebhookId, string parameterName)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling FeatureApi->RemoveUserDefinedParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling FeatureApi->RemoveUserDefinedParameter");

            var localVarPath = "/api/Feature/webhook/{instanceWebhookId}/userParameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> RemoveUserDefinedParameterAsync (string instanceWebhookId, string parameterName)
        {
             ApiResponse<bool?> localVarResponse = await RemoveUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, parameterName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> RemoveUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, string parameterName)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling FeatureApi->RemoveUserDefinedParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling FeatureApi->RemoveUserDefinedParameter");

            var localVarPath = "/api/Feature/webhook/{instanceWebhookId}/userParameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureWebhookId"></param>
        /// <returns>ApplicationFeatureWebhookModel</returns>
        public ApplicationFeatureWebhookModel RemoveWebhook (string applicationFeatureWebhookId)
        {
             ApiResponse<ApplicationFeatureWebhookModel> localVarResponse = RemoveWebhookWithHttpInfo(applicationFeatureWebhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureWebhookId"></param>
        /// <returns>ApiResponse of ApplicationFeatureWebhookModel</returns>
        public ApiResponse< ApplicationFeatureWebhookModel > RemoveWebhookWithHttpInfo (string applicationFeatureWebhookId)
        {
            // verify the required parameter 'applicationFeatureWebhookId' is set
            if (applicationFeatureWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureWebhookId' when calling FeatureApi->RemoveWebhook");

            var localVarPath = "/api/Feature/webhook/{applicationFeatureWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureWebhookId != null) localVarPathParams.Add("applicationFeatureWebhookId", this.Configuration.ApiClient.ParameterToString(applicationFeatureWebhookId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureWebhookId"></param>
        /// <returns>Task of ApplicationFeatureWebhookModel</returns>
        public async System.Threading.Tasks.Task<ApplicationFeatureWebhookModel> RemoveWebhookAsync (string applicationFeatureWebhookId)
        {
             ApiResponse<ApplicationFeatureWebhookModel> localVarResponse = await RemoveWebhookAsyncWithHttpInfo(applicationFeatureWebhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureWebhookId"></param>
        /// <returns>Task of ApiResponse (ApplicationFeatureWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureWebhookModel>> RemoveWebhookAsyncWithHttpInfo (string applicationFeatureWebhookId)
        {
            // verify the required parameter 'applicationFeatureWebhookId' is set
            if (applicationFeatureWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureWebhookId' when calling FeatureApi->RemoveWebhook");

            var localVarPath = "/api/Feature/webhook/{applicationFeatureWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureWebhookId != null) localVarPathParams.Add("applicationFeatureWebhookId", this.Configuration.ApiClient.ParameterToString(applicationFeatureWebhookId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="parentApplicationFeatureId"> (optional)</param>
        /// <param name="applicationFeatureIds"> (optional)</param>
        /// <returns>List&lt;ApplicationFeatureModel&gt;</returns>
        public List<ApplicationFeatureModel> SetApplicationFeatureOrder (string applicationId, string parentApplicationFeatureId = null, List<string> applicationFeatureIds = null)
        {
             ApiResponse<List<ApplicationFeatureModel>> localVarResponse = SetApplicationFeatureOrderWithHttpInfo(applicationId, parentApplicationFeatureId, applicationFeatureIds);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="parentApplicationFeatureId"> (optional)</param>
        /// <param name="applicationFeatureIds"> (optional)</param>
        /// <returns>ApiResponse of List&lt;ApplicationFeatureModel&gt;</returns>
        public ApiResponse< List<ApplicationFeatureModel> > SetApplicationFeatureOrderWithHttpInfo (string applicationId, string parentApplicationFeatureId = null, List<string> applicationFeatureIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FeatureApi->SetApplicationFeatureOrder");

            var localVarPath = "/api/Feature/{applicationId}/reorderFeatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (parentApplicationFeatureId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentApplicationFeatureId", parentApplicationFeatureId)); // query parameter
            if (applicationFeatureIds != null && applicationFeatureIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationFeatureIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationFeatureIds; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetApplicationFeatureOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApplicationFeatureModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApplicationFeatureModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationFeatureModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="parentApplicationFeatureId"> (optional)</param>
        /// <param name="applicationFeatureIds"> (optional)</param>
        /// <returns>Task of List&lt;ApplicationFeatureModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApplicationFeatureModel>> SetApplicationFeatureOrderAsync (string applicationId, string parentApplicationFeatureId = null, List<string> applicationFeatureIds = null)
        {
             ApiResponse<List<ApplicationFeatureModel>> localVarResponse = await SetApplicationFeatureOrderAsyncWithHttpInfo(applicationId, parentApplicationFeatureId, applicationFeatureIds);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="parentApplicationFeatureId"> (optional)</param>
        /// <param name="applicationFeatureIds"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ApplicationFeatureModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApplicationFeatureModel>>> SetApplicationFeatureOrderAsyncWithHttpInfo (string applicationId, string parentApplicationFeatureId = null, List<string> applicationFeatureIds = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FeatureApi->SetApplicationFeatureOrder");

            var localVarPath = "/api/Feature/{applicationId}/reorderFeatures";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (parentApplicationFeatureId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parentApplicationFeatureId", parentApplicationFeatureId)); // query parameter
            if (applicationFeatureIds != null && applicationFeatureIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationFeatureIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationFeatureIds; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetApplicationFeatureOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApplicationFeatureModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ApplicationFeatureModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApplicationFeatureModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApplicationFeatureModel</returns>
        public ApplicationFeatureModel UpdateApplicationFeature (string applicationFeatureId, UpdateApplicationFeatureRequest model = null)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = UpdateApplicationFeatureWithHttpInfo(applicationFeatureId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        public ApiResponse< ApplicationFeatureModel > UpdateApplicationFeatureWithHttpInfo (string applicationFeatureId, UpdateApplicationFeatureRequest model = null)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->UpdateApplicationFeature");

            var localVarPath = "/api/Feature/{applicationFeatureId}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        public async System.Threading.Tasks.Task<ApplicationFeatureModel> UpdateApplicationFeatureAsync (string applicationFeatureId, UpdateApplicationFeatureRequest model = null)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = await UpdateApplicationFeatureAsyncWithHttpInfo(applicationFeatureId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> UpdateApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId, UpdateApplicationFeatureRequest model = null)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->UpdateApplicationFeature");

            var localVarPath = "/api/Feature/{applicationFeatureId}/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApplicationFeatureWebhookModel</returns>
        public ApplicationFeatureWebhookModel UpdateAttachedWebhook (string applicationFeatureId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<ApplicationFeatureWebhookModel> localVarResponse = UpdateAttachedWebhookWithHttpInfo(applicationFeatureId, webhookInstanceId, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of ApplicationFeatureWebhookModel</returns>
        public ApiResponse< ApplicationFeatureWebhookModel > UpdateAttachedWebhookWithHttpInfo (string applicationFeatureId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->UpdateAttachedWebhook");
            // verify the required parameter 'webhookInstanceId' is set
            if (webhookInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'webhookInstanceId' when calling FeatureApi->UpdateAttachedWebhook");

            var localVarPath = "/api/Feature/{applicationFeatureId}/webhooks/{webhookInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter
            if (webhookInstanceId != null) localVarPathParams.Add("webhookInstanceId", this.Configuration.ApiClient.ParameterToString(webhookInstanceId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachedWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApplicationFeatureWebhookModel</returns>
        public async System.Threading.Tasks.Task<ApplicationFeatureWebhookModel> UpdateAttachedWebhookAsync (string applicationFeatureId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<ApplicationFeatureWebhookModel> localVarResponse = await UpdateAttachedWebhookAsyncWithHttpInfo(applicationFeatureId, webhookInstanceId, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationFeatureWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureWebhookModel>> UpdateAttachedWebhookAsyncWithHttpInfo (string applicationFeatureId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->UpdateAttachedWebhook");
            // verify the required parameter 'webhookInstanceId' is set
            if (webhookInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'webhookInstanceId' when calling FeatureApi->UpdateAttachedWebhook");

            var localVarPath = "/api/Feature/{applicationFeatureId}/webhooks/{webhookInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter
            if (webhookInstanceId != null) localVarPathParams.Add("webhookInstanceId", this.Configuration.ApiClient.ParameterToString(webhookInstanceId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachedWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="parentApplicationFeatureId"></param>
        /// <returns>ApplicationFeatureModel</returns>
        public ApplicationFeatureModel UpdateParentForApplicationFeature (string applicationFeatureId, string parentApplicationFeatureId)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = UpdateParentForApplicationFeatureWithHttpInfo(applicationFeatureId, parentApplicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="parentApplicationFeatureId"></param>
        /// <returns>ApiResponse of ApplicationFeatureModel</returns>
        public ApiResponse< ApplicationFeatureModel > UpdateParentForApplicationFeatureWithHttpInfo (string applicationFeatureId, string parentApplicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->UpdateParentForApplicationFeature");
            // verify the required parameter 'parentApplicationFeatureId' is set
            if (parentApplicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'parentApplicationFeatureId' when calling FeatureApi->UpdateParentForApplicationFeature");

            var localVarPath = "/api/Feature/{applicationFeatureId}/updateParent/{parentApplicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter
            if (parentApplicationFeatureId != null) localVarPathParams.Add("parentApplicationFeatureId", this.Configuration.ApiClient.ParameterToString(parentApplicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateParentForApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="parentApplicationFeatureId"></param>
        /// <returns>Task of ApplicationFeatureModel</returns>
        public async System.Threading.Tasks.Task<ApplicationFeatureModel> UpdateParentForApplicationFeatureAsync (string applicationFeatureId, string parentApplicationFeatureId)
        {
             ApiResponse<ApplicationFeatureModel> localVarResponse = await UpdateParentForApplicationFeatureAsyncWithHttpInfo(applicationFeatureId, parentApplicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="parentApplicationFeatureId"></param>
        /// <returns>Task of ApiResponse (ApplicationFeatureModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationFeatureModel>> UpdateParentForApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId, string parentApplicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling FeatureApi->UpdateParentForApplicationFeature");
            // verify the required parameter 'parentApplicationFeatureId' is set
            if (parentApplicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'parentApplicationFeatureId' when calling FeatureApi->UpdateParentForApplicationFeature");

            var localVarPath = "/api/Feature/{applicationFeatureId}/updateParent/{parentApplicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter
            if (parentApplicationFeatureId != null) localVarPathParams.Add("parentApplicationFeatureId", this.Configuration.ApiClient.ParameterToString(parentApplicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateParentForApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationFeatureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationFeatureModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationFeatureModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? UpdateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = UpdateUserDefinedParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UpdateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling FeatureApi->UpdateUserDefinedParameter");

            var localVarPath = "/api/Feature/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UpdateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await UpdateUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling FeatureApi->UpdateUserDefinedParameter");

            var localVarPath = "/api/Feature/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? UpdateWebhookParameter (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = UpdateWebhookParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UpdateWebhookParameterWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling FeatureApi->UpdateWebhookParameter");

            var localVarPath = "/api/Feature/webhook/{instanceWebhookId}/webhookParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UpdateWebhookParameterAsync (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await UpdateWebhookParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateWebhookParameterAsyncWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling FeatureApi->UpdateWebhookParameter");

            var localVarPath = "/api/Feature/webhook/{instanceWebhookId}/webhookParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

    }
}
