/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomRequestApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>CustomRequestResponseModel</returns>
        CustomRequestResponseModel AddAudioFile (string customRequestResponseId, string mediaItemId);

        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        ApiResponse<CustomRequestResponseModel> AddAudioFileWithHttpInfo (string customRequestResponseId, string mediaItemId);
        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>CustomRequestResponseModel</returns>
        CustomRequestResponseModel AddLargeImage (string customRequestResponseId, string mediaItemId);

        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        ApiResponse<CustomRequestResponseModel> AddLargeImageWithHttpInfo (string customRequestResponseId, string mediaItemId);
        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>CustomRequestResponseModel</returns>
        CustomRequestResponseModel AddSmallImage (string customRequestResponseId, string mediaItemId);

        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        ApiResponse<CustomRequestResponseModel> AddSmallImageWithHttpInfo (string customRequestResponseId, string mediaItemId);
        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>CustomRequestResponseModel</returns>
        CustomRequestResponseModel AddVideoFile (string customRequestResponseId, string mediaItemId);

        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        ApiResponse<CustomRequestResponseModel> AddVideoFileWithHttpInfo (string customRequestResponseId, string mediaItemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>CustomRequestWebhookModel</returns>
        CustomRequestWebhookModel AddWebhook (string customRequestId, string webhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestWebhookModel</returns>
        ApiResponse<CustomRequestWebhookModel> AddWebhookWithHttpInfo (string customRequestId, string webhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        CustomRequestModel BulkUpdateCustomRequest (string customRequestId, BulkUpdateCustomRequestRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        ApiResponse<CustomRequestModel> BulkUpdateCustomRequestWithHttpInfo (string customRequestId, BulkUpdateCustomRequestRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        CustomRequestModel BulkUpdateCustomRequestStub (string customRequestId, BulkUpdateCustomRequestStubRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        ApiResponse<CustomRequestModel> BulkUpdateCustomRequestStubWithHttpInfo (string customRequestId, BulkUpdateCustomRequestStubRequest model = null);
        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>CustomRequestModel</returns>
        CustomRequestModel CopyContentItem (string customRequestId);

        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        ApiResponse<CustomRequestModel> CopyContentItemWithHttpInfo (string customRequestId);
        /// <summary>
        /// Creates a new custom request entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        CustomRequestModel CreateCustomRequest (NewCustomRequestRequest model = null);

        /// <summary>
        /// Creates a new custom request entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        ApiResponse<CustomRequestModel> CreateCustomRequestWithHttpInfo (NewCustomRequestRequest model = null);
        /// <summary>
        /// Creates a new custom request entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        CustomRequestModel CreateCustomRequestStub (NewCustomRequestStubRequest model = null);

        /// <summary>
        /// Creates a new custom request entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        ApiResponse<CustomRequestModel> CreateCustomRequestStubWithHttpInfo (NewCustomRequestStubRequest model = null);
        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        CustomRequestModel CreateFullContentItem (CustomRequestModel model = null);

        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        ApiResponse<CustomRequestModel> CreateFullContentItemWithHttpInfo (CustomRequestModel model = null);
        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestResponseModel</returns>
        CustomRequestResponseModel CreateResponse (string customRequestId, NewCustomRequestResponseRequest model = null);

        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        ApiResponse<CustomRequestResponseModel> CreateResponseWithHttpInfo (string customRequestId, NewCustomRequestResponseRequest model = null);
        /// <summary>
        /// Delete the given custom request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>CustomRequestModel</returns>
        CustomRequestModel DeleteCustomRequest (string customRequestId);

        /// <summary>
        /// Delete the given custom request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        ApiResponse<CustomRequestModel> DeleteCustomRequestWithHttpInfo (string customRequestId);
        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>CustomRequestResponseModel</returns>
        CustomRequestResponseModel DeleteResponse (string customRequestResponseId);

        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        ApiResponse<CustomRequestResponseModel> DeleteResponseWithHttpInfo (string customRequestResponseId);
        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CustomRequestModel</returns>
        CustomRequestModel FindFullById (string id);

        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        ApiResponse<CustomRequestModel> FindFullByIdWithHttpInfo (string id);
        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;CustomRequestModel&gt;</returns>
        List<CustomRequestModel> GetByApplicationFeature (string applicationFeatureId);

        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;CustomRequestModel&gt;</returns>
        ApiResponse<List<CustomRequestModel>> GetByApplicationFeatureWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>List&lt;MediaItemModel&gt;</returns>
        List<MediaItemModel> GetMediaItemsForCustomRequest (string customRequestResponseId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>ApiResponse of List&lt;MediaItemModel&gt;</returns>
        ApiResponse<List<MediaItemModel>> GetMediaItemsForCustomRequestWithHttpInfo (string customRequestResponseId);
        /// <summary>
        /// Gets the custom requests content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;CustomRequestModel&gt;</returns>
        List<CustomRequestModel> GetMessagesForApplication (string applicationId);

        /// <summary>
        /// Gets the custom requests content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;CustomRequestModel&gt;</returns>
        ApiResponse<List<CustomRequestModel>> GetMessagesForApplicationWithHttpInfo (string applicationId);
        /// <summary>
        /// Gets the custom requests for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>List&lt;CustomRequestModel&gt;</returns>
        List<CustomRequestModel> GetMessagesForModule (string applicationModuleId);

        /// <summary>
        /// Gets the custom requests for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>ApiResponse of List&lt;CustomRequestModel&gt;</returns>
        ApiResponse<List<CustomRequestModel>> GetMessagesForModuleWithHttpInfo (string applicationModuleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>List&lt;CustomRequestWebhookModel&gt;</returns>
        List<CustomRequestWebhookModel> GetWebhooks (string customRequestId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>ApiResponse of List&lt;CustomRequestWebhookModel&gt;</returns>
        ApiResponse<List<CustomRequestWebhookModel>> GetWebhooksWithHttpInfo (string customRequestId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>CustomRequestModel</returns>
        CustomRequestModel MoveContentItemToApplicationFeature (string contentItemId, string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        ApiResponse<CustomRequestModel> MoveContentItemToApplicationFeatureWithHttpInfo (string contentItemId, string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestWebhookId"></param>
        /// <returns>CustomRequestWebhookModel</returns>
        CustomRequestWebhookModel RemoveWebhook (string customRequestWebhookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestWebhookId"></param>
        /// <returns>ApiResponse of CustomRequestWebhookModel</returns>
        ApiResponse<CustomRequestWebhookModel> RemoveWebhookWithHttpInfo (string customRequestWebhookId);
        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        CustomRequestModel ToggleLive (string customRequestId, ToggleLiveRequest model = null);

        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        ApiResponse<CustomRequestModel> ToggleLiveWithHttpInfo (string customRequestId, ToggleLiveRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>CustomRequestWebhookModel</returns>
        CustomRequestWebhookModel UpdateAttachedWebhook (string customRequestId, string webhookInstanceId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestWebhookModel</returns>
        ApiResponse<CustomRequestWebhookModel> UpdateAttachedWebhookWithHttpInfo (string customRequestId, string webhookInstanceId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        CustomRequestModel UpdateFullContentItem (string contentItemId, CustomRequestModel model = null);

        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        ApiResponse<CustomRequestModel> UpdateFullContentItemWithHttpInfo (string contentItemId, CustomRequestModel model = null);
        /// <summary>
        /// Updates the custom request with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        CustomRequestModel UpdateMessage (string customRequestId, UpdateCustomRequestRequest model = null);

        /// <summary>
        /// Updates the custom request with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        ApiResponse<CustomRequestModel> UpdateMessageWithHttpInfo (string customRequestId, UpdateCustomRequestRequest model = null);
        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestResponseModel</returns>
        CustomRequestResponseModel UpdateResponse (string customRequestResponseId, UpdateCustomRequestResponseRequest model = null);

        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        ApiResponse<CustomRequestResponseModel> UpdateResponseWithHttpInfo (string customRequestResponseId, UpdateCustomRequestResponseRequest model = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        System.Threading.Tasks.Task<CustomRequestResponseModel> AddAudioFileAsync (string customRequestResponseId, string mediaItemId);

        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> AddAudioFileAsyncWithHttpInfo (string customRequestResponseId, string mediaItemId);
        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        System.Threading.Tasks.Task<CustomRequestResponseModel> AddLargeImageAsync (string customRequestResponseId, string mediaItemId);

        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> AddLargeImageAsyncWithHttpInfo (string customRequestResponseId, string mediaItemId);
        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        System.Threading.Tasks.Task<CustomRequestResponseModel> AddSmallImageAsync (string customRequestResponseId, string mediaItemId);

        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> AddSmallImageAsyncWithHttpInfo (string customRequestResponseId, string mediaItemId);
        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        System.Threading.Tasks.Task<CustomRequestResponseModel> AddVideoFileAsync (string customRequestResponseId, string mediaItemId);

        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> AddVideoFileAsyncWithHttpInfo (string customRequestResponseId, string mediaItemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of CustomRequestWebhookModel</returns>
        System.Threading.Tasks.Task<CustomRequestWebhookModel> AddWebhookAsync (string customRequestId, string webhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestWebhookModel>> AddWebhookAsyncWithHttpInfo (string customRequestId, string webhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        System.Threading.Tasks.Task<CustomRequestModel> BulkUpdateCustomRequestAsync (string customRequestId, BulkUpdateCustomRequestRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> BulkUpdateCustomRequestAsyncWithHttpInfo (string customRequestId, BulkUpdateCustomRequestRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        System.Threading.Tasks.Task<CustomRequestModel> BulkUpdateCustomRequestStubAsync (string customRequestId, BulkUpdateCustomRequestStubRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> BulkUpdateCustomRequestStubAsyncWithHttpInfo (string customRequestId, BulkUpdateCustomRequestStubRequest model = null);
        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>Task of CustomRequestModel</returns>
        System.Threading.Tasks.Task<CustomRequestModel> CopyContentItemAsync (string customRequestId);

        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> CopyContentItemAsyncWithHttpInfo (string customRequestId);
        /// <summary>
        /// Creates a new custom request entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        System.Threading.Tasks.Task<CustomRequestModel> CreateCustomRequestAsync (NewCustomRequestRequest model = null);

        /// <summary>
        /// Creates a new custom request entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> CreateCustomRequestAsyncWithHttpInfo (NewCustomRequestRequest model = null);
        /// <summary>
        /// Creates a new custom request entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        System.Threading.Tasks.Task<CustomRequestModel> CreateCustomRequestStubAsync (NewCustomRequestStubRequest model = null);

        /// <summary>
        /// Creates a new custom request entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> CreateCustomRequestStubAsyncWithHttpInfo (NewCustomRequestStubRequest model = null);
        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        System.Threading.Tasks.Task<CustomRequestModel> CreateFullContentItemAsync (CustomRequestModel model = null);

        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> CreateFullContentItemAsyncWithHttpInfo (CustomRequestModel model = null);
        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        System.Threading.Tasks.Task<CustomRequestResponseModel> CreateResponseAsync (string customRequestId, NewCustomRequestResponseRequest model = null);

        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> CreateResponseAsyncWithHttpInfo (string customRequestId, NewCustomRequestResponseRequest model = null);
        /// <summary>
        /// Delete the given custom request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>Task of CustomRequestModel</returns>
        System.Threading.Tasks.Task<CustomRequestModel> DeleteCustomRequestAsync (string customRequestId);

        /// <summary>
        /// Delete the given custom request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> DeleteCustomRequestAsyncWithHttpInfo (string customRequestId);
        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        System.Threading.Tasks.Task<CustomRequestResponseModel> DeleteResponseAsync (string customRequestResponseId);

        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> DeleteResponseAsyncWithHttpInfo (string customRequestResponseId);
        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CustomRequestModel</returns>
        System.Threading.Tasks.Task<CustomRequestModel> FindFullByIdAsync (string id);

        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> FindFullByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;CustomRequestModel&gt;</returns>
        System.Threading.Tasks.Task<List<CustomRequestModel>> GetByApplicationFeatureAsync (string applicationFeatureId);

        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;CustomRequestModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomRequestModel>>> GetByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>Task of List&lt;MediaItemModel&gt;</returns>
        System.Threading.Tasks.Task<List<MediaItemModel>> GetMediaItemsForCustomRequestAsync (string customRequestResponseId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>Task of ApiResponse (List&lt;MediaItemModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MediaItemModel>>> GetMediaItemsForCustomRequestAsyncWithHttpInfo (string customRequestResponseId);
        /// <summary>
        /// Gets the custom requests content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;CustomRequestModel&gt;</returns>
        System.Threading.Tasks.Task<List<CustomRequestModel>> GetMessagesForApplicationAsync (string applicationId);

        /// <summary>
        /// Gets the custom requests content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;CustomRequestModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomRequestModel>>> GetMessagesForApplicationAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// Gets the custom requests for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of List&lt;CustomRequestModel&gt;</returns>
        System.Threading.Tasks.Task<List<CustomRequestModel>> GetMessagesForModuleAsync (string applicationModuleId);

        /// <summary>
        /// Gets the custom requests for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of ApiResponse (List&lt;CustomRequestModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomRequestModel>>> GetMessagesForModuleAsyncWithHttpInfo (string applicationModuleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>Task of List&lt;CustomRequestWebhookModel&gt;</returns>
        System.Threading.Tasks.Task<List<CustomRequestWebhookModel>> GetWebhooksAsync (string customRequestId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>Task of ApiResponse (List&lt;CustomRequestWebhookModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CustomRequestWebhookModel>>> GetWebhooksAsyncWithHttpInfo (string customRequestId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of CustomRequestModel</returns>
        System.Threading.Tasks.Task<CustomRequestModel> MoveContentItemToApplicationFeatureAsync (string contentItemId, string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> MoveContentItemToApplicationFeatureAsyncWithHttpInfo (string contentItemId, string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestWebhookId"></param>
        /// <returns>Task of CustomRequestWebhookModel</returns>
        System.Threading.Tasks.Task<CustomRequestWebhookModel> RemoveWebhookAsync (string customRequestWebhookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestWebhookId"></param>
        /// <returns>Task of ApiResponse (CustomRequestWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestWebhookModel>> RemoveWebhookAsyncWithHttpInfo (string customRequestWebhookId);
        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        System.Threading.Tasks.Task<CustomRequestModel> ToggleLiveAsync (string customRequestId, ToggleLiveRequest model = null);

        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> ToggleLiveAsyncWithHttpInfo (string customRequestId, ToggleLiveRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of CustomRequestWebhookModel</returns>
        System.Threading.Tasks.Task<CustomRequestWebhookModel> UpdateAttachedWebhookAsync (string customRequestId, string webhookInstanceId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestWebhookModel>> UpdateAttachedWebhookAsyncWithHttpInfo (string customRequestId, string webhookInstanceId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        System.Threading.Tasks.Task<CustomRequestModel> UpdateFullContentItemAsync (string contentItemId, CustomRequestModel model = null);

        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> UpdateFullContentItemAsyncWithHttpInfo (string contentItemId, CustomRequestModel model = null);
        /// <summary>
        /// Updates the custom request with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        System.Threading.Tasks.Task<CustomRequestModel> UpdateMessageAsync (string customRequestId, UpdateCustomRequestRequest model = null);

        /// <summary>
        /// Updates the custom request with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> UpdateMessageAsyncWithHttpInfo (string customRequestId, UpdateCustomRequestRequest model = null);
        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        System.Threading.Tasks.Task<CustomRequestResponseModel> UpdateResponseAsync (string customRequestResponseId, UpdateCustomRequestResponseRequest model = null);

        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> UpdateResponseAsyncWithHttpInfo (string customRequestResponseId, UpdateCustomRequestResponseRequest model = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomRequestApi : ICustomRequestApi
    {
        private Voicify.Sdk.Cms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomRequestApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomRequestApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Cms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomRequestApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomRequestApi(Voicify.Sdk.Cms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Cms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Cms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Cms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>CustomRequestResponseModel</returns>
        public CustomRequestResponseModel AddAudioFile (string customRequestResponseId, string mediaItemId)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = AddAudioFileWithHttpInfo(customRequestResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        public ApiResponse< CustomRequestResponseModel > AddAudioFileWithHttpInfo (string customRequestResponseId, string mediaItemId)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->AddAudioFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling CustomRequestApi->AddAudioFile");

            var localVarPath = "/api/CustomRequest/{customRequestResponseId}/addAudioFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAudioFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestResponseModel> AddAudioFileAsync (string customRequestResponseId, string mediaItemId)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = await AddAudioFileAsyncWithHttpInfo(customRequestResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> AddAudioFileAsyncWithHttpInfo (string customRequestResponseId, string mediaItemId)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->AddAudioFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling CustomRequestApi->AddAudioFile");

            var localVarPath = "/api/CustomRequest/{customRequestResponseId}/addAudioFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAudioFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>CustomRequestResponseModel</returns>
        public CustomRequestResponseModel AddLargeImage (string customRequestResponseId, string mediaItemId)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = AddLargeImageWithHttpInfo(customRequestResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        public ApiResponse< CustomRequestResponseModel > AddLargeImageWithHttpInfo (string customRequestResponseId, string mediaItemId)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->AddLargeImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling CustomRequestApi->AddLargeImage");

            var localVarPath = "/api/CustomRequest/{customRequestResponseId}/addLargeImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLargeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestResponseModel> AddLargeImageAsync (string customRequestResponseId, string mediaItemId)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = await AddLargeImageAsyncWithHttpInfo(customRequestResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> AddLargeImageAsyncWithHttpInfo (string customRequestResponseId, string mediaItemId)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->AddLargeImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling CustomRequestApi->AddLargeImage");

            var localVarPath = "/api/CustomRequest/{customRequestResponseId}/addLargeImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLargeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>CustomRequestResponseModel</returns>
        public CustomRequestResponseModel AddSmallImage (string customRequestResponseId, string mediaItemId)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = AddSmallImageWithHttpInfo(customRequestResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        public ApiResponse< CustomRequestResponseModel > AddSmallImageWithHttpInfo (string customRequestResponseId, string mediaItemId)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->AddSmallImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling CustomRequestApi->AddSmallImage");

            var localVarPath = "/api/CustomRequest/{customRequestResponseId}/addSmallImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSmallImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestResponseModel> AddSmallImageAsync (string customRequestResponseId, string mediaItemId)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = await AddSmallImageAsyncWithHttpInfo(customRequestResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> AddSmallImageAsyncWithHttpInfo (string customRequestResponseId, string mediaItemId)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->AddSmallImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling CustomRequestApi->AddSmallImage");

            var localVarPath = "/api/CustomRequest/{customRequestResponseId}/addSmallImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSmallImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>CustomRequestResponseModel</returns>
        public CustomRequestResponseModel AddVideoFile (string customRequestResponseId, string mediaItemId)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = AddVideoFileWithHttpInfo(customRequestResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        public ApiResponse< CustomRequestResponseModel > AddVideoFileWithHttpInfo (string customRequestResponseId, string mediaItemId)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->AddVideoFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling CustomRequestApi->AddVideoFile");

            var localVarPath = "/api/CustomRequest/{customRequestResponseId}/addVideoFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVideoFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestResponseModel> AddVideoFileAsync (string customRequestResponseId, string mediaItemId)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = await AddVideoFileAsyncWithHttpInfo(customRequestResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> AddVideoFileAsyncWithHttpInfo (string customRequestResponseId, string mediaItemId)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->AddVideoFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling CustomRequestApi->AddVideoFile");

            var localVarPath = "/api/CustomRequest/{customRequestResponseId}/addVideoFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVideoFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>CustomRequestWebhookModel</returns>
        public CustomRequestWebhookModel AddWebhook (string customRequestId, string webhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<CustomRequestWebhookModel> localVarResponse = AddWebhookWithHttpInfo(customRequestId, webhookId, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestWebhookModel</returns>
        public ApiResponse< CustomRequestWebhookModel > AddWebhookWithHttpInfo (string customRequestId, string webhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->AddWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling CustomRequestApi->AddWebhook");

            var localVarPath = "/api/CustomRequest/{customRequestId}/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of CustomRequestWebhookModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestWebhookModel> AddWebhookAsync (string customRequestId, string webhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<CustomRequestWebhookModel> localVarResponse = await AddWebhookAsyncWithHttpInfo(customRequestId, webhookId, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestWebhookModel>> AddWebhookAsyncWithHttpInfo (string customRequestId, string webhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->AddWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling CustomRequestApi->AddWebhook");

            var localVarPath = "/api/CustomRequest/{customRequestId}/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        public CustomRequestModel BulkUpdateCustomRequest (string customRequestId, BulkUpdateCustomRequestRequest model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = BulkUpdateCustomRequestWithHttpInfo(customRequestId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        public ApiResponse< CustomRequestModel > BulkUpdateCustomRequestWithHttpInfo (string customRequestId, BulkUpdateCustomRequestRequest model = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->BulkUpdateCustomRequest");

            var localVarPath = "/api/CustomRequest/{customRequestId}/bulkUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateCustomRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestModel> BulkUpdateCustomRequestAsync (string customRequestId, BulkUpdateCustomRequestRequest model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = await BulkUpdateCustomRequestAsyncWithHttpInfo(customRequestId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> BulkUpdateCustomRequestAsyncWithHttpInfo (string customRequestId, BulkUpdateCustomRequestRequest model = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->BulkUpdateCustomRequest");

            var localVarPath = "/api/CustomRequest/{customRequestId}/bulkUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateCustomRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        public CustomRequestModel BulkUpdateCustomRequestStub (string customRequestId, BulkUpdateCustomRequestStubRequest model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = BulkUpdateCustomRequestStubWithHttpInfo(customRequestId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        public ApiResponse< CustomRequestModel > BulkUpdateCustomRequestStubWithHttpInfo (string customRequestId, BulkUpdateCustomRequestStubRequest model = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->BulkUpdateCustomRequestStub");

            var localVarPath = "/api/CustomRequest/{customRequestId}/bulkUpdate/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateCustomRequestStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestModel> BulkUpdateCustomRequestStubAsync (string customRequestId, BulkUpdateCustomRequestStubRequest model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = await BulkUpdateCustomRequestStubAsyncWithHttpInfo(customRequestId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> BulkUpdateCustomRequestStubAsyncWithHttpInfo (string customRequestId, BulkUpdateCustomRequestStubRequest model = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->BulkUpdateCustomRequestStub");

            var localVarPath = "/api/CustomRequest/{customRequestId}/bulkUpdate/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateCustomRequestStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>CustomRequestModel</returns>
        public CustomRequestModel CopyContentItem (string customRequestId)
        {
             ApiResponse<CustomRequestModel> localVarResponse = CopyContentItemWithHttpInfo(customRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        public ApiResponse< CustomRequestModel > CopyContentItemWithHttpInfo (string customRequestId)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->CopyContentItem");

            var localVarPath = "/api/CustomRequest/{customRequestId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>Task of CustomRequestModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestModel> CopyContentItemAsync (string customRequestId)
        {
             ApiResponse<CustomRequestModel> localVarResponse = await CopyContentItemAsyncWithHttpInfo(customRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> CopyContentItemAsyncWithHttpInfo (string customRequestId)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->CopyContentItem");

            var localVarPath = "/api/CustomRequest/{customRequestId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Creates a new custom request entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        public CustomRequestModel CreateCustomRequest (NewCustomRequestRequest model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = CreateCustomRequestWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new custom request entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        public ApiResponse< CustomRequestModel > CreateCustomRequestWithHttpInfo (NewCustomRequestRequest model = null)
        {

            var localVarPath = "/api/CustomRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Creates a new custom request entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestModel> CreateCustomRequestAsync (NewCustomRequestRequest model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = await CreateCustomRequestAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new custom request entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> CreateCustomRequestAsyncWithHttpInfo (NewCustomRequestRequest model = null)
        {

            var localVarPath = "/api/CustomRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Creates a new custom request entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        public CustomRequestModel CreateCustomRequestStub (NewCustomRequestStubRequest model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = CreateCustomRequestStubWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new custom request entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        public ApiResponse< CustomRequestModel > CreateCustomRequestStubWithHttpInfo (NewCustomRequestStubRequest model = null)
        {

            var localVarPath = "/api/CustomRequest/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomRequestStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Creates a new custom request entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestModel> CreateCustomRequestStubAsync (NewCustomRequestStubRequest model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = await CreateCustomRequestStubAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new custom request entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> CreateCustomRequestStubAsyncWithHttpInfo (NewCustomRequestStubRequest model = null)
        {

            var localVarPath = "/api/CustomRequest/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomRequestStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        public CustomRequestModel CreateFullContentItem (CustomRequestModel model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = CreateFullContentItemWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        public ApiResponse< CustomRequestModel > CreateFullContentItemWithHttpInfo (CustomRequestModel model = null)
        {

            var localVarPath = "/api/CustomRequest/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestModel> CreateFullContentItemAsync (CustomRequestModel model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = await CreateFullContentItemAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> CreateFullContentItemAsyncWithHttpInfo (CustomRequestModel model = null)
        {

            var localVarPath = "/api/CustomRequest/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestResponseModel</returns>
        public CustomRequestResponseModel CreateResponse (string customRequestId, NewCustomRequestResponseRequest model = null)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = CreateResponseWithHttpInfo(customRequestId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        public ApiResponse< CustomRequestResponseModel > CreateResponseWithHttpInfo (string customRequestId, NewCustomRequestResponseRequest model = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->CreateResponse");

            var localVarPath = "/api/CustomRequest/{customRequestId}/response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestResponseModel> CreateResponseAsync (string customRequestId, NewCustomRequestResponseRequest model = null)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = await CreateResponseAsyncWithHttpInfo(customRequestId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> CreateResponseAsyncWithHttpInfo (string customRequestId, NewCustomRequestResponseRequest model = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->CreateResponse");

            var localVarPath = "/api/CustomRequest/{customRequestId}/response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        /// Delete the given custom request 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>CustomRequestModel</returns>
        public CustomRequestModel DeleteCustomRequest (string customRequestId)
        {
             ApiResponse<CustomRequestModel> localVarResponse = DeleteCustomRequestWithHttpInfo(customRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the given custom request 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        public ApiResponse< CustomRequestModel > DeleteCustomRequestWithHttpInfo (string customRequestId)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->DeleteCustomRequest");

            var localVarPath = "/api/CustomRequest/{customRequestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Delete the given custom request 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>Task of CustomRequestModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestModel> DeleteCustomRequestAsync (string customRequestId)
        {
             ApiResponse<CustomRequestModel> localVarResponse = await DeleteCustomRequestAsyncWithHttpInfo(customRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the given custom request 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> DeleteCustomRequestAsyncWithHttpInfo (string customRequestId)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->DeleteCustomRequest");

            var localVarPath = "/api/CustomRequest/{customRequestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCustomRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>CustomRequestResponseModel</returns>
        public CustomRequestResponseModel DeleteResponse (string customRequestResponseId)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = DeleteResponseWithHttpInfo(customRequestResponseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        public ApiResponse< CustomRequestResponseModel > DeleteResponseWithHttpInfo (string customRequestResponseId)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->DeleteResponse");

            var localVarPath = "/api/CustomRequest/response/{customRequestResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestResponseModel> DeleteResponseAsync (string customRequestResponseId)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = await DeleteResponseAsyncWithHttpInfo(customRequestResponseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> DeleteResponseAsyncWithHttpInfo (string customRequestResponseId)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->DeleteResponse");

            var localVarPath = "/api/CustomRequest/response/{customRequestResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CustomRequestModel</returns>
        public CustomRequestModel FindFullById (string id)
        {
             ApiResponse<CustomRequestModel> localVarResponse = FindFullByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        public ApiResponse< CustomRequestModel > FindFullByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomRequestApi->FindFullById");

            var localVarPath = "/api/CustomRequest/full/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFullById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CustomRequestModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestModel> FindFullByIdAsync (string id)
        {
             ApiResponse<CustomRequestModel> localVarResponse = await FindFullByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> FindFullByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CustomRequestApi->FindFullById");

            var localVarPath = "/api/CustomRequest/full/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFullById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;CustomRequestModel&gt;</returns>
        public List<CustomRequestModel> GetByApplicationFeature (string applicationFeatureId)
        {
             ApiResponse<List<CustomRequestModel>> localVarResponse = GetByApplicationFeatureWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;CustomRequestModel&gt;</returns>
        public ApiResponse< List<CustomRequestModel> > GetByApplicationFeatureWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling CustomRequestApi->GetByApplicationFeature");

            var localVarPath = "/api/CustomRequest/byFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomRequestModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomRequestModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomRequestModel>)));
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;CustomRequestModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomRequestModel>> GetByApplicationFeatureAsync (string applicationFeatureId)
        {
             ApiResponse<List<CustomRequestModel>> localVarResponse = await GetByApplicationFeatureAsyncWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;CustomRequestModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CustomRequestModel>>> GetByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling CustomRequestApi->GetByApplicationFeature");

            var localVarPath = "/api/CustomRequest/byFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomRequestModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomRequestModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomRequestModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>List&lt;MediaItemModel&gt;</returns>
        public List<MediaItemModel> GetMediaItemsForCustomRequest (string customRequestResponseId)
        {
             ApiResponse<List<MediaItemModel>> localVarResponse = GetMediaItemsForCustomRequestWithHttpInfo(customRequestResponseId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>ApiResponse of List&lt;MediaItemModel&gt;</returns>
        public ApiResponse< List<MediaItemModel> > GetMediaItemsForCustomRequestWithHttpInfo (string customRequestResponseId)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->GetMediaItemsForCustomRequest");

            var localVarPath = "/api/CustomRequest/response/{customRequestResponseId}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMediaItemsForCustomRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MediaItemModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MediaItemModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MediaItemModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>Task of List&lt;MediaItemModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<MediaItemModel>> GetMediaItemsForCustomRequestAsync (string customRequestResponseId)
        {
             ApiResponse<List<MediaItemModel>> localVarResponse = await GetMediaItemsForCustomRequestAsyncWithHttpInfo(customRequestResponseId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <returns>Task of ApiResponse (List&lt;MediaItemModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MediaItemModel>>> GetMediaItemsForCustomRequestAsyncWithHttpInfo (string customRequestResponseId)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->GetMediaItemsForCustomRequest");

            var localVarPath = "/api/CustomRequest/response/{customRequestResponseId}/media";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMediaItemsForCustomRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MediaItemModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MediaItemModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MediaItemModel>)));
        }

        /// <summary>
        /// Gets the custom requests content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;CustomRequestModel&gt;</returns>
        public List<CustomRequestModel> GetMessagesForApplication (string applicationId)
        {
             ApiResponse<List<CustomRequestModel>> localVarResponse = GetMessagesForApplicationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom requests content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;CustomRequestModel&gt;</returns>
        public ApiResponse< List<CustomRequestModel> > GetMessagesForApplicationWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling CustomRequestApi->GetMessagesForApplication");

            var localVarPath = "/api/CustomRequest/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomRequestModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomRequestModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomRequestModel>)));
        }

        /// <summary>
        /// Gets the custom requests content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;CustomRequestModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomRequestModel>> GetMessagesForApplicationAsync (string applicationId)
        {
             ApiResponse<List<CustomRequestModel>> localVarResponse = await GetMessagesForApplicationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the custom requests content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;CustomRequestModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CustomRequestModel>>> GetMessagesForApplicationAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling CustomRequestApi->GetMessagesForApplication");

            var localVarPath = "/api/CustomRequest/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomRequestModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomRequestModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomRequestModel>)));
        }

        /// <summary>
        /// Gets the custom requests for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>List&lt;CustomRequestModel&gt;</returns>
        public List<CustomRequestModel> GetMessagesForModule (string applicationModuleId)
        {
             ApiResponse<List<CustomRequestModel>> localVarResponse = GetMessagesForModuleWithHttpInfo(applicationModuleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the custom requests for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>ApiResponse of List&lt;CustomRequestModel&gt;</returns>
        public ApiResponse< List<CustomRequestModel> > GetMessagesForModuleWithHttpInfo (string applicationModuleId)
        {
            // verify the required parameter 'applicationModuleId' is set
            if (applicationModuleId == null)
                throw new ApiException(400, "Missing required parameter 'applicationModuleId' when calling CustomRequestApi->GetMessagesForModule");

            var localVarPath = "/api/CustomRequest/module/{applicationModuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationModuleId != null) localVarPathParams.Add("applicationModuleId", this.Configuration.ApiClient.ParameterToString(applicationModuleId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomRequestModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomRequestModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomRequestModel>)));
        }

        /// <summary>
        /// Gets the custom requests for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of List&lt;CustomRequestModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomRequestModel>> GetMessagesForModuleAsync (string applicationModuleId)
        {
             ApiResponse<List<CustomRequestModel>> localVarResponse = await GetMessagesForModuleAsyncWithHttpInfo(applicationModuleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the custom requests for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of ApiResponse (List&lt;CustomRequestModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CustomRequestModel>>> GetMessagesForModuleAsyncWithHttpInfo (string applicationModuleId)
        {
            // verify the required parameter 'applicationModuleId' is set
            if (applicationModuleId == null)
                throw new ApiException(400, "Missing required parameter 'applicationModuleId' when calling CustomRequestApi->GetMessagesForModule");

            var localVarPath = "/api/CustomRequest/module/{applicationModuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationModuleId != null) localVarPathParams.Add("applicationModuleId", this.Configuration.ApiClient.ParameterToString(applicationModuleId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomRequestModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomRequestModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomRequestModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>List&lt;CustomRequestWebhookModel&gt;</returns>
        public List<CustomRequestWebhookModel> GetWebhooks (string customRequestId)
        {
             ApiResponse<List<CustomRequestWebhookModel>> localVarResponse = GetWebhooksWithHttpInfo(customRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>ApiResponse of List&lt;CustomRequestWebhookModel&gt;</returns>
        public ApiResponse< List<CustomRequestWebhookModel> > GetWebhooksWithHttpInfo (string customRequestId)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->GetWebhooks");

            var localVarPath = "/api/CustomRequest/{customRequestId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomRequestWebhookModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomRequestWebhookModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomRequestWebhookModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>Task of List&lt;CustomRequestWebhookModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CustomRequestWebhookModel>> GetWebhooksAsync (string customRequestId)
        {
             ApiResponse<List<CustomRequestWebhookModel>> localVarResponse = await GetWebhooksAsyncWithHttpInfo(customRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <returns>Task of ApiResponse (List&lt;CustomRequestWebhookModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CustomRequestWebhookModel>>> GetWebhooksAsyncWithHttpInfo (string customRequestId)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->GetWebhooks");

            var localVarPath = "/api/CustomRequest/{customRequestId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CustomRequestWebhookModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CustomRequestWebhookModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CustomRequestWebhookModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>CustomRequestModel</returns>
        public CustomRequestModel MoveContentItemToApplicationFeature (string contentItemId, string applicationFeatureId)
        {
             ApiResponse<CustomRequestModel> localVarResponse = MoveContentItemToApplicationFeatureWithHttpInfo(contentItemId, applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        public ApiResponse< CustomRequestModel > MoveContentItemToApplicationFeatureWithHttpInfo (string contentItemId, string applicationFeatureId)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling CustomRequestApi->MoveContentItemToApplicationFeature");
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling CustomRequestApi->MoveContentItemToApplicationFeature");

            var localVarPath = "/api/CustomRequest/{contentItemId}/MoveToFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveContentItemToApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of CustomRequestModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestModel> MoveContentItemToApplicationFeatureAsync (string contentItemId, string applicationFeatureId)
        {
             ApiResponse<CustomRequestModel> localVarResponse = await MoveContentItemToApplicationFeatureAsyncWithHttpInfo(contentItemId, applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> MoveContentItemToApplicationFeatureAsyncWithHttpInfo (string contentItemId, string applicationFeatureId)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling CustomRequestApi->MoveContentItemToApplicationFeature");
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling CustomRequestApi->MoveContentItemToApplicationFeature");

            var localVarPath = "/api/CustomRequest/{contentItemId}/MoveToFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveContentItemToApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestWebhookId"></param>
        /// <returns>CustomRequestWebhookModel</returns>
        public CustomRequestWebhookModel RemoveWebhook (string customRequestWebhookId)
        {
             ApiResponse<CustomRequestWebhookModel> localVarResponse = RemoveWebhookWithHttpInfo(customRequestWebhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestWebhookId"></param>
        /// <returns>ApiResponse of CustomRequestWebhookModel</returns>
        public ApiResponse< CustomRequestWebhookModel > RemoveWebhookWithHttpInfo (string customRequestWebhookId)
        {
            // verify the required parameter 'customRequestWebhookId' is set
            if (customRequestWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestWebhookId' when calling CustomRequestApi->RemoveWebhook");

            var localVarPath = "/api/CustomRequest/webhook/{customRequestWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestWebhookId != null) localVarPathParams.Add("customRequestWebhookId", this.Configuration.ApiClient.ParameterToString(customRequestWebhookId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestWebhookId"></param>
        /// <returns>Task of CustomRequestWebhookModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestWebhookModel> RemoveWebhookAsync (string customRequestWebhookId)
        {
             ApiResponse<CustomRequestWebhookModel> localVarResponse = await RemoveWebhookAsyncWithHttpInfo(customRequestWebhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestWebhookId"></param>
        /// <returns>Task of ApiResponse (CustomRequestWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestWebhookModel>> RemoveWebhookAsyncWithHttpInfo (string customRequestWebhookId)
        {
            // verify the required parameter 'customRequestWebhookId' is set
            if (customRequestWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestWebhookId' when calling CustomRequestApi->RemoveWebhook");

            var localVarPath = "/api/CustomRequest/webhook/{customRequestWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestWebhookId != null) localVarPathParams.Add("customRequestWebhookId", this.Configuration.ApiClient.ParameterToString(customRequestWebhookId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestWebhookModel)));
        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        public CustomRequestModel ToggleLive (string customRequestId, ToggleLiveRequest model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = ToggleLiveWithHttpInfo(customRequestId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        public ApiResponse< CustomRequestModel > ToggleLiveWithHttpInfo (string customRequestId, ToggleLiveRequest model = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->ToggleLive");

            var localVarPath = "/api/CustomRequest/{customRequestId}/isLive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ToggleLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestModel> ToggleLiveAsync (string customRequestId, ToggleLiveRequest model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = await ToggleLiveAsyncWithHttpInfo(customRequestId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> ToggleLiveAsyncWithHttpInfo (string customRequestId, ToggleLiveRequest model = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->ToggleLive");

            var localVarPath = "/api/CustomRequest/{customRequestId}/isLive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ToggleLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>CustomRequestWebhookModel</returns>
        public CustomRequestWebhookModel UpdateAttachedWebhook (string customRequestId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<CustomRequestWebhookModel> localVarResponse = UpdateAttachedWebhookWithHttpInfo(customRequestId, webhookInstanceId, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestWebhookModel</returns>
        public ApiResponse< CustomRequestWebhookModel > UpdateAttachedWebhookWithHttpInfo (string customRequestId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->UpdateAttachedWebhook");
            // verify the required parameter 'webhookInstanceId' is set
            if (webhookInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'webhookInstanceId' when calling CustomRequestApi->UpdateAttachedWebhook");

            var localVarPath = "/api/CustomRequest/{customRequestId}/webhooks/{webhookInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (webhookInstanceId != null) localVarPathParams.Add("webhookInstanceId", this.Configuration.ApiClient.ParameterToString(webhookInstanceId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachedWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of CustomRequestWebhookModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestWebhookModel> UpdateAttachedWebhookAsync (string customRequestId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<CustomRequestWebhookModel> localVarResponse = await UpdateAttachedWebhookAsyncWithHttpInfo(customRequestId, webhookInstanceId, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestWebhookModel>> UpdateAttachedWebhookAsyncWithHttpInfo (string customRequestId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->UpdateAttachedWebhook");
            // verify the required parameter 'webhookInstanceId' is set
            if (webhookInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'webhookInstanceId' when calling CustomRequestApi->UpdateAttachedWebhook");

            var localVarPath = "/api/CustomRequest/{customRequestId}/webhooks/{webhookInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (webhookInstanceId != null) localVarPathParams.Add("webhookInstanceId", this.Configuration.ApiClient.ParameterToString(webhookInstanceId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachedWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestWebhookModel)));
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        public CustomRequestModel UpdateFullContentItem (string contentItemId, CustomRequestModel model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = UpdateFullContentItemWithHttpInfo(contentItemId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        public ApiResponse< CustomRequestModel > UpdateFullContentItemWithHttpInfo (string contentItemId, CustomRequestModel model = null)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling CustomRequestApi->UpdateFullContentItem");

            var localVarPath = "/api/CustomRequest/{contentItemId}/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestModel> UpdateFullContentItemAsync (string contentItemId, CustomRequestModel model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = await UpdateFullContentItemAsyncWithHttpInfo(contentItemId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> UpdateFullContentItemAsyncWithHttpInfo (string contentItemId, CustomRequestModel model = null)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling CustomRequestApi->UpdateFullContentItem");

            var localVarPath = "/api/CustomRequest/{contentItemId}/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Updates the custom request with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestModel</returns>
        public CustomRequestModel UpdateMessage (string customRequestId, UpdateCustomRequestRequest model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = UpdateMessageWithHttpInfo(customRequestId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the custom request with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestModel</returns>
        public ApiResponse< CustomRequestModel > UpdateMessageWithHttpInfo (string customRequestId, UpdateCustomRequestRequest model = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->UpdateMessage");

            var localVarPath = "/api/CustomRequest/{customRequestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Updates the custom request with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestModel> UpdateMessageAsync (string customRequestId, UpdateCustomRequestRequest model = null)
        {
             ApiResponse<CustomRequestModel> localVarResponse = await UpdateMessageAsyncWithHttpInfo(customRequestId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the custom request with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestModel>> UpdateMessageAsyncWithHttpInfo (string customRequestId, UpdateCustomRequestRequest model = null)
        {
            // verify the required parameter 'customRequestId' is set
            if (customRequestId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestId' when calling CustomRequestApi->UpdateMessage");

            var localVarPath = "/api/CustomRequest/{customRequestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestId != null) localVarPathParams.Add("customRequestId", this.Configuration.ApiClient.ParameterToString(customRequestId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestModel)));
        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>CustomRequestResponseModel</returns>
        public CustomRequestResponseModel UpdateResponse (string customRequestResponseId, UpdateCustomRequestResponseRequest model = null)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = UpdateResponseWithHttpInfo(customRequestResponseId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of CustomRequestResponseModel</returns>
        public ApiResponse< CustomRequestResponseModel > UpdateResponseWithHttpInfo (string customRequestResponseId, UpdateCustomRequestResponseRequest model = null)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->UpdateResponse");

            var localVarPath = "/api/CustomRequest/response/{customRequestResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of CustomRequestResponseModel</returns>
        public async System.Threading.Tasks.Task<CustomRequestResponseModel> UpdateResponseAsync (string customRequestResponseId, UpdateCustomRequestResponseRequest model = null)
        {
             ApiResponse<CustomRequestResponseModel> localVarResponse = await UpdateResponseAsyncWithHttpInfo(customRequestResponseId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRequestResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomRequestResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomRequestResponseModel>> UpdateResponseAsyncWithHttpInfo (string customRequestResponseId, UpdateCustomRequestResponseRequest model = null)
        {
            // verify the required parameter 'customRequestResponseId' is set
            if (customRequestResponseId == null)
                throw new ApiException(400, "Missing required parameter 'customRequestResponseId' when calling CustomRequestApi->UpdateResponse");

            var localVarPath = "/api/CustomRequest/response/{customRequestResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customRequestResponseId != null) localVarPathParams.Add("customRequestResponseId", this.Configuration.ApiClient.ParameterToString(customRequestResponseId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomRequestResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CustomRequestResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomRequestResponseModel)));
        }

    }
}
