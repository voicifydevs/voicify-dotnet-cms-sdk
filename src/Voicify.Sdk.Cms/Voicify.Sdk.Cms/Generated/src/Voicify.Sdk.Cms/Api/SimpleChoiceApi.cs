/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimpleChoiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>SimpleChoiceResponseModel</returns>
        SimpleChoiceResponseModel AddAudioFile (string simpleChoiceResponseId, string mediaItemId);

        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        ApiResponse<SimpleChoiceResponseModel> AddAudioFileWithHttpInfo (string simpleChoiceResponseId, string mediaItemId);
        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>SimpleChoiceResponseModel</returns>
        SimpleChoiceResponseModel AddLargeImage (string simpleChoiceResponseId, string mediaItemId);

        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        ApiResponse<SimpleChoiceResponseModel> AddLargeImageWithHttpInfo (string simpleChoiceResponseId, string mediaItemId);
        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>SimpleChoiceResponseModel</returns>
        SimpleChoiceResponseModel AddSmallImage (string simpleChoiceResponseId, string mediaItemId);

        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        ApiResponse<SimpleChoiceResponseModel> AddSmallImageWithHttpInfo (string simpleChoiceResponseId, string mediaItemId);
        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>SimpleChoiceResponseModel</returns>
        SimpleChoiceResponseModel AddVideoFile (string simpleChoiceResponseId, string mediaItemId);

        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        ApiResponse<SimpleChoiceResponseModel> AddVideoFileWithHttpInfo (string simpleChoiceResponseId, string mediaItemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>SimpleChoiceWebhookModel</returns>
        SimpleChoiceWebhookModel AddWebhook (string simpleChoiceId, string webhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceWebhookModel</returns>
        ApiResponse<SimpleChoiceWebhookModel> AddWebhookWithHttpInfo (string simpleChoiceId, string webhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        SimpleChoiceModel BulkUpdateSimpleChoice (string simpleChoiceId, BulkUpdateSimpleChoiceRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        ApiResponse<SimpleChoiceModel> BulkUpdateSimpleChoiceWithHttpInfo (string simpleChoiceId, BulkUpdateSimpleChoiceRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        SimpleChoiceModel BulkUpdateSimpleChoiceStub (string simpleChoiceId, BulkUpdateSimpleChoiceStubRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        ApiResponse<SimpleChoiceModel> BulkUpdateSimpleChoiceStubWithHttpInfo (string simpleChoiceId, BulkUpdateSimpleChoiceStubRequest model = null);
        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>SimpleChoiceModel</returns>
        SimpleChoiceModel CopyContentItem (string simpleChoiceId);

        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        ApiResponse<SimpleChoiceModel> CopyContentItemWithHttpInfo (string simpleChoiceId);
        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        SimpleChoiceModel CreateFullContentItem (SimpleChoiceModel model = null);

        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        ApiResponse<SimpleChoiceModel> CreateFullContentItemWithHttpInfo (SimpleChoiceModel model = null);
        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceResponseModel</returns>
        SimpleChoiceResponseModel CreateResponse (string simpleChoiceId, NewSimpleChoiceResponseRequest model = null);

        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        ApiResponse<SimpleChoiceResponseModel> CreateResponseWithHttpInfo (string simpleChoiceId, NewSimpleChoiceResponseRequest model = null);
        /// <summary>
        /// Creates a new simple choice entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        SimpleChoiceModel CreateSimpleChoice (NewSimpleChoiceRequest model = null);

        /// <summary>
        /// Creates a new simple choice entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        ApiResponse<SimpleChoiceModel> CreateSimpleChoiceWithHttpInfo (NewSimpleChoiceRequest model = null);
        /// <summary>
        /// Creates a new simple choice entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        SimpleChoiceModel CreateSimpleChoiceStub (NewSimpleChoiceStubRequest model = null);

        /// <summary>
        /// Creates a new simple choice entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        ApiResponse<SimpleChoiceModel> CreateSimpleChoiceStubWithHttpInfo (NewSimpleChoiceStubRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? CreateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> CreateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);
        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <returns>SimpleChoiceResponseModel</returns>
        SimpleChoiceResponseModel DeleteResponse (string simpleChoiceResponseId);

        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        ApiResponse<SimpleChoiceResponseModel> DeleteResponseWithHttpInfo (string simpleChoiceResponseId);
        /// <summary>
        /// Delete the given simple choice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>SimpleChoiceModel</returns>
        SimpleChoiceModel DeleteSimpleChoice (string simpleChoiceId);

        /// <summary>
        /// Delete the given simple choice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        ApiResponse<SimpleChoiceModel> DeleteSimpleChoiceWithHttpInfo (string simpleChoiceId);
        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SimpleChoiceModel</returns>
        SimpleChoiceModel FindFullById (string id);

        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        ApiResponse<SimpleChoiceModel> FindFullByIdWithHttpInfo (string id);
        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;SimpleChoiceModel&gt;</returns>
        List<SimpleChoiceModel> GetByApplicationFeature (string applicationFeatureId);

        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;SimpleChoiceModel&gt;</returns>
        ApiResponse<List<SimpleChoiceModel>> GetByApplicationFeatureWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Gets the simple choices content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;SimpleChoiceModel&gt;</returns>
        List<SimpleChoiceModel> GetMessagesForApplication (string applicationId);

        /// <summary>
        /// Gets the simple choices content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;SimpleChoiceModel&gt;</returns>
        ApiResponse<List<SimpleChoiceModel>> GetMessagesForApplicationWithHttpInfo (string applicationId);
        /// <summary>
        /// Gets the simple choices for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>List&lt;SimpleChoiceModel&gt;</returns>
        List<SimpleChoiceModel> GetMessagesForModule (string applicationModuleId);

        /// <summary>
        /// Gets the simple choices for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>ApiResponse of List&lt;SimpleChoiceModel&gt;</returns>
        ApiResponse<List<SimpleChoiceModel>> GetMessagesForModuleWithHttpInfo (string applicationModuleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>List&lt;SimpleChoiceWebhookModel&gt;</returns>
        List<SimpleChoiceWebhookModel> GetWebhooks (string simpleChoiceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>ApiResponse of List&lt;SimpleChoiceWebhookModel&gt;</returns>
        ApiResponse<List<SimpleChoiceWebhookModel>> GetWebhooksWithHttpInfo (string simpleChoiceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>SimpleChoiceModel</returns>
        SimpleChoiceModel MoveContentItemToApplicationFeature (string contentItemId, string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        ApiResponse<SimpleChoiceModel> MoveContentItemToApplicationFeatureWithHttpInfo (string contentItemId, string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>bool?</returns>
        bool? RemoveUserDefinedParameter (string instanceWebhookId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> RemoveUserDefinedParameterWithHttpInfo (string instanceWebhookId, string parameterName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceWebhookId"></param>
        /// <returns>SimpleChoiceWebhookModel</returns>
        SimpleChoiceWebhookModel RemoveWebhook (string simpleChoiceWebhookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceWebhookId"></param>
        /// <returns>ApiResponse of SimpleChoiceWebhookModel</returns>
        ApiResponse<SimpleChoiceWebhookModel> RemoveWebhookWithHttpInfo (string simpleChoiceWebhookId);
        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        SimpleChoiceModel ToggleLive (string simpleChoiceId, ToggleLiveRequest model = null);

        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        ApiResponse<SimpleChoiceModel> ToggleLiveWithHttpInfo (string simpleChoiceId, ToggleLiveRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>SimpleChoiceWebhookModel</returns>
        SimpleChoiceWebhookModel UpdateAttachedWebhook (string simpleChoiceId, string webhookInstanceId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceWebhookModel</returns>
        ApiResponse<SimpleChoiceWebhookModel> UpdateAttachedWebhookWithHttpInfo (string simpleChoiceId, string webhookInstanceId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        SimpleChoiceModel UpdateFullContentItem (string contentItemId, SimpleChoiceModel model = null);

        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        ApiResponse<SimpleChoiceModel> UpdateFullContentItemWithHttpInfo (string contentItemId, SimpleChoiceModel model = null);
        /// <summary>
        /// Updates the simple choice with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        SimpleChoiceModel UpdateMessage (string simpleChoiceId, UpdateSimpleChoiceRequest model = null);

        /// <summary>
        /// Updates the simple choice with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        ApiResponse<SimpleChoiceModel> UpdateMessageWithHttpInfo (string simpleChoiceId, UpdateSimpleChoiceRequest model = null);
        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceResponseModel</returns>
        SimpleChoiceResponseModel UpdateResponse (string simpleChoiceResponseId, UpdateSimpleChoiceResponseRequest model = null);

        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        ApiResponse<SimpleChoiceResponseModel> UpdateResponseWithHttpInfo (string simpleChoiceResponseId, UpdateSimpleChoiceResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? UpdateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UpdateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? UpdateWebhookParameter (string instanceWebhookId, WebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UpdateWebhookParameterWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceResponseModel> AddAudioFileAsync (string simpleChoiceResponseId, string mediaItemId);

        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> AddAudioFileAsyncWithHttpInfo (string simpleChoiceResponseId, string mediaItemId);
        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceResponseModel> AddLargeImageAsync (string simpleChoiceResponseId, string mediaItemId);

        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> AddLargeImageAsyncWithHttpInfo (string simpleChoiceResponseId, string mediaItemId);
        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceResponseModel> AddSmallImageAsync (string simpleChoiceResponseId, string mediaItemId);

        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> AddSmallImageAsyncWithHttpInfo (string simpleChoiceResponseId, string mediaItemId);
        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceResponseModel> AddVideoFileAsync (string simpleChoiceResponseId, string mediaItemId);

        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> AddVideoFileAsyncWithHttpInfo (string simpleChoiceResponseId, string mediaItemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of SimpleChoiceWebhookModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceWebhookModel> AddWebhookAsync (string simpleChoiceId, string webhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceWebhookModel>> AddWebhookAsyncWithHttpInfo (string simpleChoiceId, string webhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceModel> BulkUpdateSimpleChoiceAsync (string simpleChoiceId, BulkUpdateSimpleChoiceRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> BulkUpdateSimpleChoiceAsyncWithHttpInfo (string simpleChoiceId, BulkUpdateSimpleChoiceRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceModel> BulkUpdateSimpleChoiceStubAsync (string simpleChoiceId, BulkUpdateSimpleChoiceStubRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> BulkUpdateSimpleChoiceStubAsyncWithHttpInfo (string simpleChoiceId, BulkUpdateSimpleChoiceStubRequest model = null);
        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>Task of SimpleChoiceModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceModel> CopyContentItemAsync (string simpleChoiceId);

        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> CopyContentItemAsyncWithHttpInfo (string simpleChoiceId);
        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceModel> CreateFullContentItemAsync (SimpleChoiceModel model = null);

        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> CreateFullContentItemAsyncWithHttpInfo (SimpleChoiceModel model = null);
        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceResponseModel> CreateResponseAsync (string simpleChoiceId, NewSimpleChoiceResponseRequest model = null);

        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> CreateResponseAsyncWithHttpInfo (string simpleChoiceId, NewSimpleChoiceResponseRequest model = null);
        /// <summary>
        /// Creates a new simple choice entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceModel> CreateSimpleChoiceAsync (NewSimpleChoiceRequest model = null);

        /// <summary>
        /// Creates a new simple choice entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> CreateSimpleChoiceAsyncWithHttpInfo (NewSimpleChoiceRequest model = null);
        /// <summary>
        /// Creates a new simple choice entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceModel> CreateSimpleChoiceStubAsync (NewSimpleChoiceStubRequest model = null);

        /// <summary>
        /// Creates a new simple choice entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> CreateSimpleChoiceStubAsyncWithHttpInfo (NewSimpleChoiceStubRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> CreateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> CreateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);
        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceResponseModel> DeleteResponseAsync (string simpleChoiceResponseId);

        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> DeleteResponseAsyncWithHttpInfo (string simpleChoiceResponseId);
        /// <summary>
        /// Delete the given simple choice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>Task of SimpleChoiceModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceModel> DeleteSimpleChoiceAsync (string simpleChoiceId);

        /// <summary>
        /// Delete the given simple choice
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> DeleteSimpleChoiceAsyncWithHttpInfo (string simpleChoiceId);
        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SimpleChoiceModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceModel> FindFullByIdAsync (string id);

        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> FindFullByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;SimpleChoiceModel&gt;</returns>
        System.Threading.Tasks.Task<List<SimpleChoiceModel>> GetByApplicationFeatureAsync (string applicationFeatureId);

        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;SimpleChoiceModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SimpleChoiceModel>>> GetByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Gets the simple choices content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;SimpleChoiceModel&gt;</returns>
        System.Threading.Tasks.Task<List<SimpleChoiceModel>> GetMessagesForApplicationAsync (string applicationId);

        /// <summary>
        /// Gets the simple choices content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;SimpleChoiceModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SimpleChoiceModel>>> GetMessagesForApplicationAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// Gets the simple choices for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of List&lt;SimpleChoiceModel&gt;</returns>
        System.Threading.Tasks.Task<List<SimpleChoiceModel>> GetMessagesForModuleAsync (string applicationModuleId);

        /// <summary>
        /// Gets the simple choices for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of ApiResponse (List&lt;SimpleChoiceModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SimpleChoiceModel>>> GetMessagesForModuleAsyncWithHttpInfo (string applicationModuleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>Task of List&lt;SimpleChoiceWebhookModel&gt;</returns>
        System.Threading.Tasks.Task<List<SimpleChoiceWebhookModel>> GetWebhooksAsync (string simpleChoiceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>Task of ApiResponse (List&lt;SimpleChoiceWebhookModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SimpleChoiceWebhookModel>>> GetWebhooksAsyncWithHttpInfo (string simpleChoiceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of SimpleChoiceModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceModel> MoveContentItemToApplicationFeatureAsync (string contentItemId, string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> MoveContentItemToApplicationFeatureAsyncWithHttpInfo (string contentItemId, string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> RemoveUserDefinedParameterAsync (string instanceWebhookId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> RemoveUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, string parameterName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceWebhookId"></param>
        /// <returns>Task of SimpleChoiceWebhookModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceWebhookModel> RemoveWebhookAsync (string simpleChoiceWebhookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceWebhookId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceWebhookModel>> RemoveWebhookAsyncWithHttpInfo (string simpleChoiceWebhookId);
        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceModel> ToggleLiveAsync (string simpleChoiceId, ToggleLiveRequest model = null);

        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> ToggleLiveAsyncWithHttpInfo (string simpleChoiceId, ToggleLiveRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of SimpleChoiceWebhookModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceWebhookModel> UpdateAttachedWebhookAsync (string simpleChoiceId, string webhookInstanceId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceWebhookModel>> UpdateAttachedWebhookAsyncWithHttpInfo (string simpleChoiceId, string webhookInstanceId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceModel> UpdateFullContentItemAsync (string contentItemId, SimpleChoiceModel model = null);

        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> UpdateFullContentItemAsyncWithHttpInfo (string contentItemId, SimpleChoiceModel model = null);
        /// <summary>
        /// Updates the simple choice with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceModel> UpdateMessageAsync (string simpleChoiceId, UpdateSimpleChoiceRequest model = null);

        /// <summary>
        /// Updates the simple choice with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> UpdateMessageAsyncWithHttpInfo (string simpleChoiceId, UpdateSimpleChoiceRequest model = null);
        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        System.Threading.Tasks.Task<SimpleChoiceResponseModel> UpdateResponseAsync (string simpleChoiceResponseId, UpdateSimpleChoiceResponseRequest model = null);

        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> UpdateResponseAsyncWithHttpInfo (string simpleChoiceResponseId, UpdateSimpleChoiceResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UpdateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UpdateWebhookParameterAsync (string instanceWebhookId, WebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateWebhookParameterAsyncWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SimpleChoiceApi : ISimpleChoiceApi
    {
        private Voicify.Sdk.Cms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleChoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SimpleChoiceApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Cms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleChoiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SimpleChoiceApi(Voicify.Sdk.Cms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Cms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Cms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Cms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>SimpleChoiceResponseModel</returns>
        public SimpleChoiceResponseModel AddAudioFile (string simpleChoiceResponseId, string mediaItemId)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = AddAudioFileWithHttpInfo(simpleChoiceResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        public ApiResponse< SimpleChoiceResponseModel > AddAudioFileWithHttpInfo (string simpleChoiceResponseId, string mediaItemId)
        {
            // verify the required parameter 'simpleChoiceResponseId' is set
            if (simpleChoiceResponseId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceResponseId' when calling SimpleChoiceApi->AddAudioFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling SimpleChoiceApi->AddAudioFile");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceResponseId}/addAudioFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceResponseId != null) localVarPathParams.Add("simpleChoiceResponseId", this.Configuration.ApiClient.ParameterToString(simpleChoiceResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAudioFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceResponseModel> AddAudioFileAsync (string simpleChoiceResponseId, string mediaItemId)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = await AddAudioFileAsyncWithHttpInfo(simpleChoiceResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> AddAudioFileAsyncWithHttpInfo (string simpleChoiceResponseId, string mediaItemId)
        {
            // verify the required parameter 'simpleChoiceResponseId' is set
            if (simpleChoiceResponseId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceResponseId' when calling SimpleChoiceApi->AddAudioFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling SimpleChoiceApi->AddAudioFile");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceResponseId}/addAudioFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceResponseId != null) localVarPathParams.Add("simpleChoiceResponseId", this.Configuration.ApiClient.ParameterToString(simpleChoiceResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAudioFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>SimpleChoiceResponseModel</returns>
        public SimpleChoiceResponseModel AddLargeImage (string simpleChoiceResponseId, string mediaItemId)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = AddLargeImageWithHttpInfo(simpleChoiceResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        public ApiResponse< SimpleChoiceResponseModel > AddLargeImageWithHttpInfo (string simpleChoiceResponseId, string mediaItemId)
        {
            // verify the required parameter 'simpleChoiceResponseId' is set
            if (simpleChoiceResponseId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceResponseId' when calling SimpleChoiceApi->AddLargeImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling SimpleChoiceApi->AddLargeImage");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceResponseId}/addLargeImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceResponseId != null) localVarPathParams.Add("simpleChoiceResponseId", this.Configuration.ApiClient.ParameterToString(simpleChoiceResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLargeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceResponseModel> AddLargeImageAsync (string simpleChoiceResponseId, string mediaItemId)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = await AddLargeImageAsyncWithHttpInfo(simpleChoiceResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> AddLargeImageAsyncWithHttpInfo (string simpleChoiceResponseId, string mediaItemId)
        {
            // verify the required parameter 'simpleChoiceResponseId' is set
            if (simpleChoiceResponseId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceResponseId' when calling SimpleChoiceApi->AddLargeImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling SimpleChoiceApi->AddLargeImage");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceResponseId}/addLargeImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceResponseId != null) localVarPathParams.Add("simpleChoiceResponseId", this.Configuration.ApiClient.ParameterToString(simpleChoiceResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLargeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>SimpleChoiceResponseModel</returns>
        public SimpleChoiceResponseModel AddSmallImage (string simpleChoiceResponseId, string mediaItemId)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = AddSmallImageWithHttpInfo(simpleChoiceResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        public ApiResponse< SimpleChoiceResponseModel > AddSmallImageWithHttpInfo (string simpleChoiceResponseId, string mediaItemId)
        {
            // verify the required parameter 'simpleChoiceResponseId' is set
            if (simpleChoiceResponseId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceResponseId' when calling SimpleChoiceApi->AddSmallImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling SimpleChoiceApi->AddSmallImage");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceResponseId}/addSmallImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceResponseId != null) localVarPathParams.Add("simpleChoiceResponseId", this.Configuration.ApiClient.ParameterToString(simpleChoiceResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSmallImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceResponseModel> AddSmallImageAsync (string simpleChoiceResponseId, string mediaItemId)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = await AddSmallImageAsyncWithHttpInfo(simpleChoiceResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> AddSmallImageAsyncWithHttpInfo (string simpleChoiceResponseId, string mediaItemId)
        {
            // verify the required parameter 'simpleChoiceResponseId' is set
            if (simpleChoiceResponseId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceResponseId' when calling SimpleChoiceApi->AddSmallImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling SimpleChoiceApi->AddSmallImage");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceResponseId}/addSmallImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceResponseId != null) localVarPathParams.Add("simpleChoiceResponseId", this.Configuration.ApiClient.ParameterToString(simpleChoiceResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSmallImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>SimpleChoiceResponseModel</returns>
        public SimpleChoiceResponseModel AddVideoFile (string simpleChoiceResponseId, string mediaItemId)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = AddVideoFileWithHttpInfo(simpleChoiceResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        public ApiResponse< SimpleChoiceResponseModel > AddVideoFileWithHttpInfo (string simpleChoiceResponseId, string mediaItemId)
        {
            // verify the required parameter 'simpleChoiceResponseId' is set
            if (simpleChoiceResponseId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceResponseId' when calling SimpleChoiceApi->AddVideoFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling SimpleChoiceApi->AddVideoFile");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceResponseId}/addVideoFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceResponseId != null) localVarPathParams.Add("simpleChoiceResponseId", this.Configuration.ApiClient.ParameterToString(simpleChoiceResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVideoFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceResponseModel> AddVideoFileAsync (string simpleChoiceResponseId, string mediaItemId)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = await AddVideoFileAsyncWithHttpInfo(simpleChoiceResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> AddVideoFileAsyncWithHttpInfo (string simpleChoiceResponseId, string mediaItemId)
        {
            // verify the required parameter 'simpleChoiceResponseId' is set
            if (simpleChoiceResponseId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceResponseId' when calling SimpleChoiceApi->AddVideoFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling SimpleChoiceApi->AddVideoFile");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceResponseId}/addVideoFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceResponseId != null) localVarPathParams.Add("simpleChoiceResponseId", this.Configuration.ApiClient.ParameterToString(simpleChoiceResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVideoFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>SimpleChoiceWebhookModel</returns>
        public SimpleChoiceWebhookModel AddWebhook (string simpleChoiceId, string webhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<SimpleChoiceWebhookModel> localVarResponse = AddWebhookWithHttpInfo(simpleChoiceId, webhookId, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceWebhookModel</returns>
        public ApiResponse< SimpleChoiceWebhookModel > AddWebhookWithHttpInfo (string simpleChoiceId, string webhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->AddWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling SimpleChoiceApi->AddWebhook");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of SimpleChoiceWebhookModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceWebhookModel> AddWebhookAsync (string simpleChoiceId, string webhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<SimpleChoiceWebhookModel> localVarResponse = await AddWebhookAsyncWithHttpInfo(simpleChoiceId, webhookId, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceWebhookModel>> AddWebhookAsyncWithHttpInfo (string simpleChoiceId, string webhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->AddWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling SimpleChoiceApi->AddWebhook");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        public SimpleChoiceModel BulkUpdateSimpleChoice (string simpleChoiceId, BulkUpdateSimpleChoiceRequest model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = BulkUpdateSimpleChoiceWithHttpInfo(simpleChoiceId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        public ApiResponse< SimpleChoiceModel > BulkUpdateSimpleChoiceWithHttpInfo (string simpleChoiceId, BulkUpdateSimpleChoiceRequest model = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->BulkUpdateSimpleChoice");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/bulkUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateSimpleChoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceModel> BulkUpdateSimpleChoiceAsync (string simpleChoiceId, BulkUpdateSimpleChoiceRequest model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = await BulkUpdateSimpleChoiceAsyncWithHttpInfo(simpleChoiceId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> BulkUpdateSimpleChoiceAsyncWithHttpInfo (string simpleChoiceId, BulkUpdateSimpleChoiceRequest model = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->BulkUpdateSimpleChoice");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/bulkUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateSimpleChoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        public SimpleChoiceModel BulkUpdateSimpleChoiceStub (string simpleChoiceId, BulkUpdateSimpleChoiceStubRequest model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = BulkUpdateSimpleChoiceStubWithHttpInfo(simpleChoiceId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        public ApiResponse< SimpleChoiceModel > BulkUpdateSimpleChoiceStubWithHttpInfo (string simpleChoiceId, BulkUpdateSimpleChoiceStubRequest model = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->BulkUpdateSimpleChoiceStub");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/bulkUpdate/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateSimpleChoiceStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceModel> BulkUpdateSimpleChoiceStubAsync (string simpleChoiceId, BulkUpdateSimpleChoiceStubRequest model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = await BulkUpdateSimpleChoiceStubAsyncWithHttpInfo(simpleChoiceId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> BulkUpdateSimpleChoiceStubAsyncWithHttpInfo (string simpleChoiceId, BulkUpdateSimpleChoiceStubRequest model = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->BulkUpdateSimpleChoiceStub");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/bulkUpdate/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateSimpleChoiceStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>SimpleChoiceModel</returns>
        public SimpleChoiceModel CopyContentItem (string simpleChoiceId)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = CopyContentItemWithHttpInfo(simpleChoiceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        public ApiResponse< SimpleChoiceModel > CopyContentItemWithHttpInfo (string simpleChoiceId)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->CopyContentItem");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>Task of SimpleChoiceModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceModel> CopyContentItemAsync (string simpleChoiceId)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = await CopyContentItemAsyncWithHttpInfo(simpleChoiceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> CopyContentItemAsyncWithHttpInfo (string simpleChoiceId)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->CopyContentItem");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        public SimpleChoiceModel CreateFullContentItem (SimpleChoiceModel model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = CreateFullContentItemWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        public ApiResponse< SimpleChoiceModel > CreateFullContentItemWithHttpInfo (SimpleChoiceModel model = null)
        {

            var localVarPath = "/api/SimpleChoice/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceModel> CreateFullContentItemAsync (SimpleChoiceModel model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = await CreateFullContentItemAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> CreateFullContentItemAsyncWithHttpInfo (SimpleChoiceModel model = null)
        {

            var localVarPath = "/api/SimpleChoice/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceResponseModel</returns>
        public SimpleChoiceResponseModel CreateResponse (string simpleChoiceId, NewSimpleChoiceResponseRequest model = null)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = CreateResponseWithHttpInfo(simpleChoiceId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        public ApiResponse< SimpleChoiceResponseModel > CreateResponseWithHttpInfo (string simpleChoiceId, NewSimpleChoiceResponseRequest model = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->CreateResponse");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceResponseModel> CreateResponseAsync (string simpleChoiceId, NewSimpleChoiceResponseRequest model = null)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = await CreateResponseAsyncWithHttpInfo(simpleChoiceId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> CreateResponseAsyncWithHttpInfo (string simpleChoiceId, NewSimpleChoiceResponseRequest model = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->CreateResponse");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        /// Creates a new simple choice entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        public SimpleChoiceModel CreateSimpleChoice (NewSimpleChoiceRequest model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = CreateSimpleChoiceWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new simple choice entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        public ApiResponse< SimpleChoiceModel > CreateSimpleChoiceWithHttpInfo (NewSimpleChoiceRequest model = null)
        {

            var localVarPath = "/api/SimpleChoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSimpleChoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Creates a new simple choice entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceModel> CreateSimpleChoiceAsync (NewSimpleChoiceRequest model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = await CreateSimpleChoiceAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new simple choice entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> CreateSimpleChoiceAsyncWithHttpInfo (NewSimpleChoiceRequest model = null)
        {

            var localVarPath = "/api/SimpleChoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSimpleChoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Creates a new simple choice entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        public SimpleChoiceModel CreateSimpleChoiceStub (NewSimpleChoiceStubRequest model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = CreateSimpleChoiceStubWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new simple choice entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        public ApiResponse< SimpleChoiceModel > CreateSimpleChoiceStubWithHttpInfo (NewSimpleChoiceStubRequest model = null)
        {

            var localVarPath = "/api/SimpleChoice/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSimpleChoiceStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Creates a new simple choice entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceModel> CreateSimpleChoiceStubAsync (NewSimpleChoiceStubRequest model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = await CreateSimpleChoiceStubAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new simple choice entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> CreateSimpleChoiceStubAsyncWithHttpInfo (NewSimpleChoiceStubRequest model = null)
        {

            var localVarPath = "/api/SimpleChoice/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSimpleChoiceStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? CreateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = CreateUserDefinedParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > CreateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling SimpleChoiceApi->CreateUserDefinedParameter");

            var localVarPath = "/api/SimpleChoice/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> CreateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await CreateUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> CreateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling SimpleChoiceApi->CreateUserDefinedParameter");

            var localVarPath = "/api/SimpleChoice/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <returns>SimpleChoiceResponseModel</returns>
        public SimpleChoiceResponseModel DeleteResponse (string simpleChoiceResponseId)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = DeleteResponseWithHttpInfo(simpleChoiceResponseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        public ApiResponse< SimpleChoiceResponseModel > DeleteResponseWithHttpInfo (string simpleChoiceResponseId)
        {
            // verify the required parameter 'simpleChoiceResponseId' is set
            if (simpleChoiceResponseId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceResponseId' when calling SimpleChoiceApi->DeleteResponse");

            var localVarPath = "/api/SimpleChoice/response/{simpleChoiceResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceResponseId != null) localVarPathParams.Add("simpleChoiceResponseId", this.Configuration.ApiClient.ParameterToString(simpleChoiceResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceResponseModel> DeleteResponseAsync (string simpleChoiceResponseId)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = await DeleteResponseAsyncWithHttpInfo(simpleChoiceResponseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> DeleteResponseAsyncWithHttpInfo (string simpleChoiceResponseId)
        {
            // verify the required parameter 'simpleChoiceResponseId' is set
            if (simpleChoiceResponseId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceResponseId' when calling SimpleChoiceApi->DeleteResponse");

            var localVarPath = "/api/SimpleChoice/response/{simpleChoiceResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceResponseId != null) localVarPathParams.Add("simpleChoiceResponseId", this.Configuration.ApiClient.ParameterToString(simpleChoiceResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        /// Delete the given simple choice 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>SimpleChoiceModel</returns>
        public SimpleChoiceModel DeleteSimpleChoice (string simpleChoiceId)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = DeleteSimpleChoiceWithHttpInfo(simpleChoiceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the given simple choice 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        public ApiResponse< SimpleChoiceModel > DeleteSimpleChoiceWithHttpInfo (string simpleChoiceId)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->DeleteSimpleChoice");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSimpleChoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Delete the given simple choice 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>Task of SimpleChoiceModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceModel> DeleteSimpleChoiceAsync (string simpleChoiceId)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = await DeleteSimpleChoiceAsyncWithHttpInfo(simpleChoiceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the given simple choice 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> DeleteSimpleChoiceAsyncWithHttpInfo (string simpleChoiceId)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->DeleteSimpleChoice");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSimpleChoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>SimpleChoiceModel</returns>
        public SimpleChoiceModel FindFullById (string id)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = FindFullByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        public ApiResponse< SimpleChoiceModel > FindFullByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SimpleChoiceApi->FindFullById");

            var localVarPath = "/api/SimpleChoice/full/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFullById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of SimpleChoiceModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceModel> FindFullByIdAsync (string id)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = await FindFullByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> FindFullByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SimpleChoiceApi->FindFullById");

            var localVarPath = "/api/SimpleChoice/full/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFullById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;SimpleChoiceModel&gt;</returns>
        public List<SimpleChoiceModel> GetByApplicationFeature (string applicationFeatureId)
        {
             ApiResponse<List<SimpleChoiceModel>> localVarResponse = GetByApplicationFeatureWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;SimpleChoiceModel&gt;</returns>
        public ApiResponse< List<SimpleChoiceModel> > GetByApplicationFeatureWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling SimpleChoiceApi->GetByApplicationFeature");

            var localVarPath = "/api/SimpleChoice/byFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SimpleChoiceModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SimpleChoiceModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SimpleChoiceModel>)));
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;SimpleChoiceModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<SimpleChoiceModel>> GetByApplicationFeatureAsync (string applicationFeatureId)
        {
             ApiResponse<List<SimpleChoiceModel>> localVarResponse = await GetByApplicationFeatureAsyncWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;SimpleChoiceModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SimpleChoiceModel>>> GetByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling SimpleChoiceApi->GetByApplicationFeature");

            var localVarPath = "/api/SimpleChoice/byFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SimpleChoiceModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SimpleChoiceModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SimpleChoiceModel>)));
        }

        /// <summary>
        /// Gets the simple choices content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;SimpleChoiceModel&gt;</returns>
        public List<SimpleChoiceModel> GetMessagesForApplication (string applicationId)
        {
             ApiResponse<List<SimpleChoiceModel>> localVarResponse = GetMessagesForApplicationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the simple choices content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;SimpleChoiceModel&gt;</returns>
        public ApiResponse< List<SimpleChoiceModel> > GetMessagesForApplicationWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling SimpleChoiceApi->GetMessagesForApplication");

            var localVarPath = "/api/SimpleChoice/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SimpleChoiceModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SimpleChoiceModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SimpleChoiceModel>)));
        }

        /// <summary>
        /// Gets the simple choices content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;SimpleChoiceModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<SimpleChoiceModel>> GetMessagesForApplicationAsync (string applicationId)
        {
             ApiResponse<List<SimpleChoiceModel>> localVarResponse = await GetMessagesForApplicationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the simple choices content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;SimpleChoiceModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SimpleChoiceModel>>> GetMessagesForApplicationAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling SimpleChoiceApi->GetMessagesForApplication");

            var localVarPath = "/api/SimpleChoice/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SimpleChoiceModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SimpleChoiceModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SimpleChoiceModel>)));
        }

        /// <summary>
        /// Gets the simple choices for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>List&lt;SimpleChoiceModel&gt;</returns>
        public List<SimpleChoiceModel> GetMessagesForModule (string applicationModuleId)
        {
             ApiResponse<List<SimpleChoiceModel>> localVarResponse = GetMessagesForModuleWithHttpInfo(applicationModuleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the simple choices for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>ApiResponse of List&lt;SimpleChoiceModel&gt;</returns>
        public ApiResponse< List<SimpleChoiceModel> > GetMessagesForModuleWithHttpInfo (string applicationModuleId)
        {
            // verify the required parameter 'applicationModuleId' is set
            if (applicationModuleId == null)
                throw new ApiException(400, "Missing required parameter 'applicationModuleId' when calling SimpleChoiceApi->GetMessagesForModule");

            var localVarPath = "/api/SimpleChoice/module/{applicationModuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationModuleId != null) localVarPathParams.Add("applicationModuleId", this.Configuration.ApiClient.ParameterToString(applicationModuleId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SimpleChoiceModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SimpleChoiceModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SimpleChoiceModel>)));
        }

        /// <summary>
        /// Gets the simple choices for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of List&lt;SimpleChoiceModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<SimpleChoiceModel>> GetMessagesForModuleAsync (string applicationModuleId)
        {
             ApiResponse<List<SimpleChoiceModel>> localVarResponse = await GetMessagesForModuleAsyncWithHttpInfo(applicationModuleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the simple choices for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of ApiResponse (List&lt;SimpleChoiceModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SimpleChoiceModel>>> GetMessagesForModuleAsyncWithHttpInfo (string applicationModuleId)
        {
            // verify the required parameter 'applicationModuleId' is set
            if (applicationModuleId == null)
                throw new ApiException(400, "Missing required parameter 'applicationModuleId' when calling SimpleChoiceApi->GetMessagesForModule");

            var localVarPath = "/api/SimpleChoice/module/{applicationModuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationModuleId != null) localVarPathParams.Add("applicationModuleId", this.Configuration.ApiClient.ParameterToString(applicationModuleId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SimpleChoiceModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SimpleChoiceModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SimpleChoiceModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>List&lt;SimpleChoiceWebhookModel&gt;</returns>
        public List<SimpleChoiceWebhookModel> GetWebhooks (string simpleChoiceId)
        {
             ApiResponse<List<SimpleChoiceWebhookModel>> localVarResponse = GetWebhooksWithHttpInfo(simpleChoiceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>ApiResponse of List&lt;SimpleChoiceWebhookModel&gt;</returns>
        public ApiResponse< List<SimpleChoiceWebhookModel> > GetWebhooksWithHttpInfo (string simpleChoiceId)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->GetWebhooks");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SimpleChoiceWebhookModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SimpleChoiceWebhookModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SimpleChoiceWebhookModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>Task of List&lt;SimpleChoiceWebhookModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<SimpleChoiceWebhookModel>> GetWebhooksAsync (string simpleChoiceId)
        {
             ApiResponse<List<SimpleChoiceWebhookModel>> localVarResponse = await GetWebhooksAsyncWithHttpInfo(simpleChoiceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <returns>Task of ApiResponse (List&lt;SimpleChoiceWebhookModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SimpleChoiceWebhookModel>>> GetWebhooksAsyncWithHttpInfo (string simpleChoiceId)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->GetWebhooks");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SimpleChoiceWebhookModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SimpleChoiceWebhookModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SimpleChoiceWebhookModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>SimpleChoiceModel</returns>
        public SimpleChoiceModel MoveContentItemToApplicationFeature (string contentItemId, string applicationFeatureId)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = MoveContentItemToApplicationFeatureWithHttpInfo(contentItemId, applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        public ApiResponse< SimpleChoiceModel > MoveContentItemToApplicationFeatureWithHttpInfo (string contentItemId, string applicationFeatureId)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling SimpleChoiceApi->MoveContentItemToApplicationFeature");
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling SimpleChoiceApi->MoveContentItemToApplicationFeature");

            var localVarPath = "/api/SimpleChoice/{contentItemId}/MoveToFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveContentItemToApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of SimpleChoiceModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceModel> MoveContentItemToApplicationFeatureAsync (string contentItemId, string applicationFeatureId)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = await MoveContentItemToApplicationFeatureAsyncWithHttpInfo(contentItemId, applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> MoveContentItemToApplicationFeatureAsyncWithHttpInfo (string contentItemId, string applicationFeatureId)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling SimpleChoiceApi->MoveContentItemToApplicationFeature");
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling SimpleChoiceApi->MoveContentItemToApplicationFeature");

            var localVarPath = "/api/SimpleChoice/{contentItemId}/MoveToFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveContentItemToApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>bool?</returns>
        public bool? RemoveUserDefinedParameter (string instanceWebhookId, string parameterName)
        {
             ApiResponse<bool?> localVarResponse = RemoveUserDefinedParameterWithHttpInfo(instanceWebhookId, parameterName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > RemoveUserDefinedParameterWithHttpInfo (string instanceWebhookId, string parameterName)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling SimpleChoiceApi->RemoveUserDefinedParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling SimpleChoiceApi->RemoveUserDefinedParameter");

            var localVarPath = "/api/SimpleChoice/webhook/{instanceWebhookId}/userParameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> RemoveUserDefinedParameterAsync (string instanceWebhookId, string parameterName)
        {
             ApiResponse<bool?> localVarResponse = await RemoveUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, parameterName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> RemoveUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, string parameterName)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling SimpleChoiceApi->RemoveUserDefinedParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling SimpleChoiceApi->RemoveUserDefinedParameter");

            var localVarPath = "/api/SimpleChoice/webhook/{instanceWebhookId}/userParameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceWebhookId"></param>
        /// <returns>SimpleChoiceWebhookModel</returns>
        public SimpleChoiceWebhookModel RemoveWebhook (string simpleChoiceWebhookId)
        {
             ApiResponse<SimpleChoiceWebhookModel> localVarResponse = RemoveWebhookWithHttpInfo(simpleChoiceWebhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceWebhookId"></param>
        /// <returns>ApiResponse of SimpleChoiceWebhookModel</returns>
        public ApiResponse< SimpleChoiceWebhookModel > RemoveWebhookWithHttpInfo (string simpleChoiceWebhookId)
        {
            // verify the required parameter 'simpleChoiceWebhookId' is set
            if (simpleChoiceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceWebhookId' when calling SimpleChoiceApi->RemoveWebhook");

            var localVarPath = "/api/SimpleChoice/webhook/{simpleChoiceWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceWebhookId != null) localVarPathParams.Add("simpleChoiceWebhookId", this.Configuration.ApiClient.ParameterToString(simpleChoiceWebhookId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceWebhookId"></param>
        /// <returns>Task of SimpleChoiceWebhookModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceWebhookModel> RemoveWebhookAsync (string simpleChoiceWebhookId)
        {
             ApiResponse<SimpleChoiceWebhookModel> localVarResponse = await RemoveWebhookAsyncWithHttpInfo(simpleChoiceWebhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceWebhookId"></param>
        /// <returns>Task of ApiResponse (SimpleChoiceWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceWebhookModel>> RemoveWebhookAsyncWithHttpInfo (string simpleChoiceWebhookId)
        {
            // verify the required parameter 'simpleChoiceWebhookId' is set
            if (simpleChoiceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceWebhookId' when calling SimpleChoiceApi->RemoveWebhook");

            var localVarPath = "/api/SimpleChoice/webhook/{simpleChoiceWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceWebhookId != null) localVarPathParams.Add("simpleChoiceWebhookId", this.Configuration.ApiClient.ParameterToString(simpleChoiceWebhookId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceWebhookModel)));
        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        public SimpleChoiceModel ToggleLive (string simpleChoiceId, ToggleLiveRequest model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = ToggleLiveWithHttpInfo(simpleChoiceId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        public ApiResponse< SimpleChoiceModel > ToggleLiveWithHttpInfo (string simpleChoiceId, ToggleLiveRequest model = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->ToggleLive");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/isLive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ToggleLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceModel> ToggleLiveAsync (string simpleChoiceId, ToggleLiveRequest model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = await ToggleLiveAsyncWithHttpInfo(simpleChoiceId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> ToggleLiveAsyncWithHttpInfo (string simpleChoiceId, ToggleLiveRequest model = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->ToggleLive");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/isLive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ToggleLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>SimpleChoiceWebhookModel</returns>
        public SimpleChoiceWebhookModel UpdateAttachedWebhook (string simpleChoiceId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<SimpleChoiceWebhookModel> localVarResponse = UpdateAttachedWebhookWithHttpInfo(simpleChoiceId, webhookInstanceId, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceWebhookModel</returns>
        public ApiResponse< SimpleChoiceWebhookModel > UpdateAttachedWebhookWithHttpInfo (string simpleChoiceId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->UpdateAttachedWebhook");
            // verify the required parameter 'webhookInstanceId' is set
            if (webhookInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'webhookInstanceId' when calling SimpleChoiceApi->UpdateAttachedWebhook");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/webhooks/{webhookInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (webhookInstanceId != null) localVarPathParams.Add("webhookInstanceId", this.Configuration.ApiClient.ParameterToString(webhookInstanceId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachedWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of SimpleChoiceWebhookModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceWebhookModel> UpdateAttachedWebhookAsync (string simpleChoiceId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<SimpleChoiceWebhookModel> localVarResponse = await UpdateAttachedWebhookAsyncWithHttpInfo(simpleChoiceId, webhookInstanceId, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceWebhookModel>> UpdateAttachedWebhookAsyncWithHttpInfo (string simpleChoiceId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->UpdateAttachedWebhook");
            // verify the required parameter 'webhookInstanceId' is set
            if (webhookInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'webhookInstanceId' when calling SimpleChoiceApi->UpdateAttachedWebhook");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}/webhooks/{webhookInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (webhookInstanceId != null) localVarPathParams.Add("webhookInstanceId", this.Configuration.ApiClient.ParameterToString(webhookInstanceId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachedWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceWebhookModel)));
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        public SimpleChoiceModel UpdateFullContentItem (string contentItemId, SimpleChoiceModel model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = UpdateFullContentItemWithHttpInfo(contentItemId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        public ApiResponse< SimpleChoiceModel > UpdateFullContentItemWithHttpInfo (string contentItemId, SimpleChoiceModel model = null)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling SimpleChoiceApi->UpdateFullContentItem");

            var localVarPath = "/api/SimpleChoice/{contentItemId}/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceModel> UpdateFullContentItemAsync (string contentItemId, SimpleChoiceModel model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = await UpdateFullContentItemAsyncWithHttpInfo(contentItemId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> UpdateFullContentItemAsyncWithHttpInfo (string contentItemId, SimpleChoiceModel model = null)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling SimpleChoiceApi->UpdateFullContentItem");

            var localVarPath = "/api/SimpleChoice/{contentItemId}/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Updates the simple choice with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceModel</returns>
        public SimpleChoiceModel UpdateMessage (string simpleChoiceId, UpdateSimpleChoiceRequest model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = UpdateMessageWithHttpInfo(simpleChoiceId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the simple choice with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceModel</returns>
        public ApiResponse< SimpleChoiceModel > UpdateMessageWithHttpInfo (string simpleChoiceId, UpdateSimpleChoiceRequest model = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->UpdateMessage");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Updates the simple choice with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceModel> UpdateMessageAsync (string simpleChoiceId, UpdateSimpleChoiceRequest model = null)
        {
             ApiResponse<SimpleChoiceModel> localVarResponse = await UpdateMessageAsyncWithHttpInfo(simpleChoiceId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the simple choice with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceModel>> UpdateMessageAsyncWithHttpInfo (string simpleChoiceId, UpdateSimpleChoiceRequest model = null)
        {
            // verify the required parameter 'simpleChoiceId' is set
            if (simpleChoiceId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceId' when calling SimpleChoiceApi->UpdateMessage");

            var localVarPath = "/api/SimpleChoice/{simpleChoiceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceId != null) localVarPathParams.Add("simpleChoiceId", this.Configuration.ApiClient.ParameterToString(simpleChoiceId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceModel)));
        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>SimpleChoiceResponseModel</returns>
        public SimpleChoiceResponseModel UpdateResponse (string simpleChoiceResponseId, UpdateSimpleChoiceResponseRequest model = null)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = UpdateResponseWithHttpInfo(simpleChoiceResponseId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of SimpleChoiceResponseModel</returns>
        public ApiResponse< SimpleChoiceResponseModel > UpdateResponseWithHttpInfo (string simpleChoiceResponseId, UpdateSimpleChoiceResponseRequest model = null)
        {
            // verify the required parameter 'simpleChoiceResponseId' is set
            if (simpleChoiceResponseId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceResponseId' when calling SimpleChoiceApi->UpdateResponse");

            var localVarPath = "/api/SimpleChoice/response/{simpleChoiceResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceResponseId != null) localVarPathParams.Add("simpleChoiceResponseId", this.Configuration.ApiClient.ParameterToString(simpleChoiceResponseId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of SimpleChoiceResponseModel</returns>
        public async System.Threading.Tasks.Task<SimpleChoiceResponseModel> UpdateResponseAsync (string simpleChoiceResponseId, UpdateSimpleChoiceResponseRequest model = null)
        {
             ApiResponse<SimpleChoiceResponseModel> localVarResponse = await UpdateResponseAsyncWithHttpInfo(simpleChoiceResponseId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simpleChoiceResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (SimpleChoiceResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleChoiceResponseModel>> UpdateResponseAsyncWithHttpInfo (string simpleChoiceResponseId, UpdateSimpleChoiceResponseRequest model = null)
        {
            // verify the required parameter 'simpleChoiceResponseId' is set
            if (simpleChoiceResponseId == null)
                throw new ApiException(400, "Missing required parameter 'simpleChoiceResponseId' when calling SimpleChoiceApi->UpdateResponse");

            var localVarPath = "/api/SimpleChoice/response/{simpleChoiceResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (simpleChoiceResponseId != null) localVarPathParams.Add("simpleChoiceResponseId", this.Configuration.ApiClient.ParameterToString(simpleChoiceResponseId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleChoiceResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleChoiceResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleChoiceResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? UpdateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = UpdateUserDefinedParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UpdateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling SimpleChoiceApi->UpdateUserDefinedParameter");

            var localVarPath = "/api/SimpleChoice/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UpdateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await UpdateUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling SimpleChoiceApi->UpdateUserDefinedParameter");

            var localVarPath = "/api/SimpleChoice/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? UpdateWebhookParameter (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = UpdateWebhookParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UpdateWebhookParameterWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling SimpleChoiceApi->UpdateWebhookParameter");

            var localVarPath = "/api/SimpleChoice/webhook/{instanceWebhookId}/webhookParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UpdateWebhookParameterAsync (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await UpdateWebhookParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateWebhookParameterAsyncWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling SimpleChoiceApi->UpdateWebhookParameter");

            var localVarPath = "/api/SimpleChoice/webhook/{instanceWebhookId}/webhookParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

    }
}
