/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInvitationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accepts the given invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>OrganizationMemberModel</returns>
        OrganizationMemberModel AcceptInvite (string invitationId);

        /// <summary>
        /// Accepts the given invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>ApiResponse of OrganizationMemberModel</returns>
        ApiResponse<OrganizationMemberModel> AcceptInviteWithHttpInfo (string invitationId);
        /// <summary>
        /// Accepts the given invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>InvitationModel</returns>
        InvitationModel DeclineInvite (string invitationId);

        /// <summary>
        /// Accepts the given invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>ApiResponse of InvitationModel</returns>
        ApiResponse<InvitationModel> DeclineInviteWithHttpInfo (string invitationId);
        /// <summary>
        /// Gets all the user&#39;s pending invitations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InvitationModel&gt;</returns>
        List<InvitationModel> GetInvitations ();

        /// <summary>
        /// Gets all the user&#39;s pending invitations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InvitationModel&gt;</returns>
        ApiResponse<List<InvitationModel>> GetInvitationsWithHttpInfo ();
        /// <summary>
        /// Revokes an invite that was already created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">The id of the invitation</param>
        /// <returns>InvitationModel</returns>
        InvitationModel RevokeInvite (string invitationId);

        /// <summary>
        /// Revokes an invite that was already created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">The id of the invitation</param>
        /// <returns>ApiResponse of InvitationModel</returns>
        ApiResponse<InvitationModel> RevokeInviteWithHttpInfo (string invitationId);
        /// <summary>
        /// Sends an invitation for the given organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>InvitationModel</returns>
        InvitationModel SendInvite (string organizationId, NewInvitationRequest model = null);

        /// <summary>
        /// Sends an invitation for the given organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of InvitationModel</returns>
        ApiResponse<InvitationModel> SendInviteWithHttpInfo (string organizationId, NewInvitationRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>InvitationModel</returns>
        InvitationModel SendInvite_0 (string organizationId, BasicInvitationRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of InvitationModel</returns>
        ApiResponse<InvitationModel> SendInvite_0WithHttpInfo (string organizationId, BasicInvitationRequest model = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accepts the given invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of OrganizationMemberModel</returns>
        System.Threading.Tasks.Task<OrganizationMemberModel> AcceptInviteAsync (string invitationId);

        /// <summary>
        /// Accepts the given invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of ApiResponse (OrganizationMemberModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationMemberModel>> AcceptInviteAsyncWithHttpInfo (string invitationId);
        /// <summary>
        /// Accepts the given invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of InvitationModel</returns>
        System.Threading.Tasks.Task<InvitationModel> DeclineInviteAsync (string invitationId);

        /// <summary>
        /// Accepts the given invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of ApiResponse (InvitationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationModel>> DeclineInviteAsyncWithHttpInfo (string invitationId);
        /// <summary>
        /// Gets all the user&#39;s pending invitations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InvitationModel&gt;</returns>
        System.Threading.Tasks.Task<List<InvitationModel>> GetInvitationsAsync ();

        /// <summary>
        /// Gets all the user&#39;s pending invitations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InvitationModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InvitationModel>>> GetInvitationsAsyncWithHttpInfo ();
        /// <summary>
        /// Revokes an invite that was already created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">The id of the invitation</param>
        /// <returns>Task of InvitationModel</returns>
        System.Threading.Tasks.Task<InvitationModel> RevokeInviteAsync (string invitationId);

        /// <summary>
        /// Revokes an invite that was already created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">The id of the invitation</param>
        /// <returns>Task of ApiResponse (InvitationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationModel>> RevokeInviteAsyncWithHttpInfo (string invitationId);
        /// <summary>
        /// Sends an invitation for the given organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of InvitationModel</returns>
        System.Threading.Tasks.Task<InvitationModel> SendInviteAsync (string organizationId, NewInvitationRequest model = null);

        /// <summary>
        /// Sends an invitation for the given organization
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (InvitationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationModel>> SendInviteAsyncWithHttpInfo (string organizationId, NewInvitationRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of InvitationModel</returns>
        System.Threading.Tasks.Task<InvitationModel> SendInvite_0Async (string organizationId, BasicInvitationRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (InvitationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvitationModel>> SendInvite_0AsyncWithHttpInfo (string organizationId, BasicInvitationRequest model = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InvitationApi : IInvitationApi
    {
        private Voicify.Sdk.Cms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InvitationApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Cms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InvitationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InvitationApi(Voicify.Sdk.Cms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Cms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Cms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Cms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accepts the given invitation 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>OrganizationMemberModel</returns>
        public OrganizationMemberModel AcceptInvite (string invitationId)
        {
             ApiResponse<OrganizationMemberModel> localVarResponse = AcceptInviteWithHttpInfo(invitationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accepts the given invitation 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>ApiResponse of OrganizationMemberModel</returns>
        public ApiResponse< OrganizationMemberModel > AcceptInviteWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->AcceptInvite");

            var localVarPath = "/api/Invitation/accept/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMemberModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationMemberModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMemberModel)));
        }

        /// <summary>
        /// Accepts the given invitation 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of OrganizationMemberModel</returns>
        public async System.Threading.Tasks.Task<OrganizationMemberModel> AcceptInviteAsync (string invitationId)
        {
             ApiResponse<OrganizationMemberModel> localVarResponse = await AcceptInviteAsyncWithHttpInfo(invitationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accepts the given invitation 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of ApiResponse (OrganizationMemberModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationMemberModel>> AcceptInviteAsyncWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->AcceptInvite");

            var localVarPath = "/api/Invitation/accept/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AcceptInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMemberModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrganizationMemberModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMemberModel)));
        }

        /// <summary>
        /// Accepts the given invitation 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>InvitationModel</returns>
        public InvitationModel DeclineInvite (string invitationId)
        {
             ApiResponse<InvitationModel> localVarResponse = DeclineInviteWithHttpInfo(invitationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accepts the given invitation 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>ApiResponse of InvitationModel</returns>
        public ApiResponse< InvitationModel > DeclineInviteWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->DeclineInvite");

            var localVarPath = "/api/Invitation/decline/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeclineInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationModel)));
        }

        /// <summary>
        /// Accepts the given invitation 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of InvitationModel</returns>
        public async System.Threading.Tasks.Task<InvitationModel> DeclineInviteAsync (string invitationId)
        {
             ApiResponse<InvitationModel> localVarResponse = await DeclineInviteAsyncWithHttpInfo(invitationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accepts the given invitation 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId"></param>
        /// <returns>Task of ApiResponse (InvitationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationModel>> DeclineInviteAsyncWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->DeclineInvite");

            var localVarPath = "/api/Invitation/decline/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeclineInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationModel)));
        }

        /// <summary>
        /// Gets all the user&#39;s pending invitations 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InvitationModel&gt;</returns>
        public List<InvitationModel> GetInvitations ()
        {
             ApiResponse<List<InvitationModel>> localVarResponse = GetInvitationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the user&#39;s pending invitations 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InvitationModel&gt;</returns>
        public ApiResponse< List<InvitationModel> > GetInvitationsWithHttpInfo ()
        {

            var localVarPath = "/api/Invitation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InvitationModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InvitationModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InvitationModel>)));
        }

        /// <summary>
        /// Gets all the user&#39;s pending invitations 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InvitationModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InvitationModel>> GetInvitationsAsync ()
        {
             ApiResponse<List<InvitationModel>> localVarResponse = await GetInvitationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the user&#39;s pending invitations 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InvitationModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InvitationModel>>> GetInvitationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/Invitation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InvitationModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InvitationModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InvitationModel>)));
        }

        /// <summary>
        /// Revokes an invite that was already created 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">The id of the invitation</param>
        /// <returns>InvitationModel</returns>
        public InvitationModel RevokeInvite (string invitationId)
        {
             ApiResponse<InvitationModel> localVarResponse = RevokeInviteWithHttpInfo(invitationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revokes an invite that was already created 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">The id of the invitation</param>
        /// <returns>ApiResponse of InvitationModel</returns>
        public ApiResponse< InvitationModel > RevokeInviteWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->RevokeInvite");

            var localVarPath = "/api/Invitation/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationModel)));
        }

        /// <summary>
        /// Revokes an invite that was already created 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">The id of the invitation</param>
        /// <returns>Task of InvitationModel</returns>
        public async System.Threading.Tasks.Task<InvitationModel> RevokeInviteAsync (string invitationId)
        {
             ApiResponse<InvitationModel> localVarResponse = await RevokeInviteAsyncWithHttpInfo(invitationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revokes an invite that was already created 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="invitationId">The id of the invitation</param>
        /// <returns>Task of ApiResponse (InvitationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationModel>> RevokeInviteAsyncWithHttpInfo (string invitationId)
        {
            // verify the required parameter 'invitationId' is set
            if (invitationId == null)
                throw new ApiException(400, "Missing required parameter 'invitationId' when calling InvitationApi->RevokeInvite");

            var localVarPath = "/api/Invitation/{invitationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (invitationId != null) localVarPathParams.Add("invitationId", this.Configuration.ApiClient.ParameterToString(invitationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationModel)));
        }

        /// <summary>
        /// Sends an invitation for the given organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>InvitationModel</returns>
        public InvitationModel SendInvite (string organizationId, NewInvitationRequest model = null)
        {
             ApiResponse<InvitationModel> localVarResponse = SendInviteWithHttpInfo(organizationId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sends an invitation for the given organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of InvitationModel</returns>
        public ApiResponse< InvitationModel > SendInviteWithHttpInfo (string organizationId, NewInvitationRequest model = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling InvitationApi->SendInvite");

            var localVarPath = "/api/Invitation/{organizationId}/withRole";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationModel)));
        }

        /// <summary>
        /// Sends an invitation for the given organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of InvitationModel</returns>
        public async System.Threading.Tasks.Task<InvitationModel> SendInviteAsync (string organizationId, NewInvitationRequest model = null)
        {
             ApiResponse<InvitationModel> localVarResponse = await SendInviteAsyncWithHttpInfo(organizationId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sends an invitation for the given organization 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (InvitationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationModel>> SendInviteAsyncWithHttpInfo (string organizationId, NewInvitationRequest model = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling InvitationApi->SendInvite");

            var localVarPath = "/api/Invitation/{organizationId}/withRole";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendInvite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>InvitationModel</returns>
        public InvitationModel SendInvite_0 (string organizationId, BasicInvitationRequest model = null)
        {
             ApiResponse<InvitationModel> localVarResponse = SendInvite_0WithHttpInfo(organizationId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of InvitationModel</returns>
        public ApiResponse< InvitationModel > SendInvite_0WithHttpInfo (string organizationId, BasicInvitationRequest model = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling InvitationApi->SendInvite_0");

            var localVarPath = "/api/Invitation/{organizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendInvite_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of InvitationModel</returns>
        public async System.Threading.Tasks.Task<InvitationModel> SendInvite_0Async (string organizationId, BasicInvitationRequest model = null)
        {
             ApiResponse<InvitationModel> localVarResponse = await SendInvite_0AsyncWithHttpInfo(organizationId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (InvitationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvitationModel>> SendInvite_0AsyncWithHttpInfo (string organizationId, BasicInvitationRequest model = null)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling InvitationApi->SendInvite_0");

            var localVarPath = "/api/Invitation/{organizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendInvite_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvitationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvitationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvitationModel)));
        }

    }
}
