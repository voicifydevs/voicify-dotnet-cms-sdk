/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INumberRangeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>NumberRangeResponseModel</returns>
        NumberRangeResponseModel AddAudioFile (string numberRangeResponseId, string mediaItemId);

        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        ApiResponse<NumberRangeResponseModel> AddAudioFileWithHttpInfo (string numberRangeResponseId, string mediaItemId);
        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>NumberRangeResponseModel</returns>
        NumberRangeResponseModel AddLargeImage (string numberRangeResponseId, string mediaItemId);

        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        ApiResponse<NumberRangeResponseModel> AddLargeImageWithHttpInfo (string numberRangeResponseId, string mediaItemId);
        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>NumberRangeResponseModel</returns>
        NumberRangeResponseModel AddSmallImage (string numberRangeResponseId, string mediaItemId);

        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        ApiResponse<NumberRangeResponseModel> AddSmallImageWithHttpInfo (string numberRangeResponseId, string mediaItemId);
        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>NumberRangeResponseModel</returns>
        NumberRangeResponseModel AddVideoFile (string numberRangeResponseId, string mediaItemId);

        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        ApiResponse<NumberRangeResponseModel> AddVideoFileWithHttpInfo (string numberRangeResponseId, string mediaItemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>NumberRangeWebhookModel</returns>
        NumberRangeWebhookModel AddWebhook (string numberRangeId, string webhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeWebhookModel</returns>
        ApiResponse<NumberRangeWebhookModel> AddWebhookWithHttpInfo (string numberRangeId, string webhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        NumberRangeModel BulkUpdateNumberRange (string numberRangeId, BulkUpdateNumberRangeRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        ApiResponse<NumberRangeModel> BulkUpdateNumberRangeWithHttpInfo (string numberRangeId, BulkUpdateNumberRangeRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        NumberRangeModel BulkUpdateNumberRangeStub (string numberRangeId, BulkUpdateNumberRangeStubRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        ApiResponse<NumberRangeModel> BulkUpdateNumberRangeStubWithHttpInfo (string numberRangeId, BulkUpdateNumberRangeStubRequest model = null);
        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>NumberRangeModel</returns>
        NumberRangeModel CopyContentItem (string numberRangeId);

        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        ApiResponse<NumberRangeModel> CopyContentItemWithHttpInfo (string numberRangeId);
        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        NumberRangeModel CreateFullContentItem (NumberRangeModel model = null);

        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        ApiResponse<NumberRangeModel> CreateFullContentItemWithHttpInfo (NumberRangeModel model = null);
        /// <summary>
        /// Creates a new number range entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        NumberRangeModel CreateNumberRange (NewNumberRangeRequest model = null);

        /// <summary>
        /// Creates a new number range entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        ApiResponse<NumberRangeModel> CreateNumberRangeWithHttpInfo (NewNumberRangeRequest model = null);
        /// <summary>
        /// Creates a new number range entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        NumberRangeModel CreateNumberRangeStub (NewNumberRangeStubRequest model = null);

        /// <summary>
        /// Creates a new number range entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        ApiResponse<NumberRangeModel> CreateNumberRangeStubWithHttpInfo (NewNumberRangeStubRequest model = null);
        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeResponseModel</returns>
        NumberRangeResponseModel CreateResponse (string numberRangeId, NewNumberRangeResponseRequest model = null);

        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        ApiResponse<NumberRangeResponseModel> CreateResponseWithHttpInfo (string numberRangeId, NewNumberRangeResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? CreateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> CreateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);
        /// <summary>
        /// Delete the given number range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>NumberRangeModel</returns>
        NumberRangeModel DeleteNumberRange (string numberRangeId);

        /// <summary>
        /// Delete the given number range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        ApiResponse<NumberRangeModel> DeleteNumberRangeWithHttpInfo (string numberRangeId);
        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <returns>NumberRangeResponseModel</returns>
        NumberRangeResponseModel DeleteResponse (string numberRangeResponseId);

        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        ApiResponse<NumberRangeResponseModel> DeleteResponseWithHttpInfo (string numberRangeResponseId);
        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>NumberRangeModel</returns>
        NumberRangeModel FindFullById (string id);

        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        ApiResponse<NumberRangeModel> FindFullByIdWithHttpInfo (string id);
        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;NumberRangeModel&gt;</returns>
        List<NumberRangeModel> GetByApplicationFeature (string applicationFeatureId);

        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;NumberRangeModel&gt;</returns>
        ApiResponse<List<NumberRangeModel>> GetByApplicationFeatureWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Gets the number ranges content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;NumberRangeModel&gt;</returns>
        List<NumberRangeModel> GetMessagesForApplication (string applicationId);

        /// <summary>
        /// Gets the number ranges content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;NumberRangeModel&gt;</returns>
        ApiResponse<List<NumberRangeModel>> GetMessagesForApplicationWithHttpInfo (string applicationId);
        /// <summary>
        /// Gets the number ranges for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>List&lt;NumberRangeModel&gt;</returns>
        List<NumberRangeModel> GetMessagesForModule (string applicationModuleId);

        /// <summary>
        /// Gets the number ranges for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>ApiResponse of List&lt;NumberRangeModel&gt;</returns>
        ApiResponse<List<NumberRangeModel>> GetMessagesForModuleWithHttpInfo (string applicationModuleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>List&lt;NumberRangeWebhookModel&gt;</returns>
        List<NumberRangeWebhookModel> GetWebhooks (string numberRangeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>ApiResponse of List&lt;NumberRangeWebhookModel&gt;</returns>
        ApiResponse<List<NumberRangeWebhookModel>> GetWebhooksWithHttpInfo (string numberRangeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>NumberRangeModel</returns>
        NumberRangeModel MoveContentItemToApplicationFeature (string contentItemId, string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        ApiResponse<NumberRangeModel> MoveContentItemToApplicationFeatureWithHttpInfo (string contentItemId, string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>bool?</returns>
        bool? RemoveUserDefinedParameter (string instanceWebhookId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> RemoveUserDefinedParameterWithHttpInfo (string instanceWebhookId, string parameterName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeWebhookId"></param>
        /// <returns>NumberRangeWebhookModel</returns>
        NumberRangeWebhookModel RemoveWebhook (string numberRangeWebhookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeWebhookId"></param>
        /// <returns>ApiResponse of NumberRangeWebhookModel</returns>
        ApiResponse<NumberRangeWebhookModel> RemoveWebhookWithHttpInfo (string numberRangeWebhookId);
        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        NumberRangeModel ToggleLive (string numberRangeId, ToggleLiveRequest model = null);

        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        ApiResponse<NumberRangeModel> ToggleLiveWithHttpInfo (string numberRangeId, ToggleLiveRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>NumberRangeWebhookModel</returns>
        NumberRangeWebhookModel UpdateAttachedWebhook (string numberRangeId, string webhookInstanceId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeWebhookModel</returns>
        ApiResponse<NumberRangeWebhookModel> UpdateAttachedWebhookWithHttpInfo (string numberRangeId, string webhookInstanceId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        NumberRangeModel UpdateFullContentItem (string contentItemId, NumberRangeModel model = null);

        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        ApiResponse<NumberRangeModel> UpdateFullContentItemWithHttpInfo (string contentItemId, NumberRangeModel model = null);
        /// <summary>
        /// Updates the number range with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        NumberRangeModel UpdateMessage (string numberRangeId, UpdateNumberRangeRequest model = null);

        /// <summary>
        /// Updates the number range with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        ApiResponse<NumberRangeModel> UpdateMessageWithHttpInfo (string numberRangeId, UpdateNumberRangeRequest model = null);
        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeResponseModel</returns>
        NumberRangeResponseModel UpdateResponse (string numberRangeResponseId, UpdateNumberRangeResponseRequest model = null);

        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        ApiResponse<NumberRangeResponseModel> UpdateResponseWithHttpInfo (string numberRangeResponseId, UpdateNumberRangeResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? UpdateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UpdateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? UpdateWebhookParameter (string instanceWebhookId, WebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UpdateWebhookParameterWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        System.Threading.Tasks.Task<NumberRangeResponseModel> AddAudioFileAsync (string numberRangeResponseId, string mediaItemId);

        /// <summary>
        /// Adds an audio file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> AddAudioFileAsyncWithHttpInfo (string numberRangeResponseId, string mediaItemId);
        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        System.Threading.Tasks.Task<NumberRangeResponseModel> AddLargeImageAsync (string numberRangeResponseId, string mediaItemId);

        /// <summary>
        /// Adds a large image to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> AddLargeImageAsyncWithHttpInfo (string numberRangeResponseId, string mediaItemId);
        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        System.Threading.Tasks.Task<NumberRangeResponseModel> AddSmallImageAsync (string numberRangeResponseId, string mediaItemId);

        /// <summary>
        /// Adds a small image item to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> AddSmallImageAsyncWithHttpInfo (string numberRangeResponseId, string mediaItemId);
        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        System.Threading.Tasks.Task<NumberRangeResponseModel> AddVideoFileAsync (string numberRangeResponseId, string mediaItemId);

        /// <summary>
        /// Adds a video file to the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> AddVideoFileAsyncWithHttpInfo (string numberRangeResponseId, string mediaItemId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of NumberRangeWebhookModel</returns>
        System.Threading.Tasks.Task<NumberRangeWebhookModel> AddWebhookAsync (string numberRangeId, string webhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeWebhookModel>> AddWebhookAsyncWithHttpInfo (string numberRangeId, string webhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        System.Threading.Tasks.Task<NumberRangeModel> BulkUpdateNumberRangeAsync (string numberRangeId, BulkUpdateNumberRangeRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> BulkUpdateNumberRangeAsyncWithHttpInfo (string numberRangeId, BulkUpdateNumberRangeRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        System.Threading.Tasks.Task<NumberRangeModel> BulkUpdateNumberRangeStubAsync (string numberRangeId, BulkUpdateNumberRangeStubRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> BulkUpdateNumberRangeStubAsyncWithHttpInfo (string numberRangeId, BulkUpdateNumberRangeStubRequest model = null);
        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>Task of NumberRangeModel</returns>
        System.Threading.Tasks.Task<NumberRangeModel> CopyContentItemAsync (string numberRangeId);

        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> CopyContentItemAsyncWithHttpInfo (string numberRangeId);
        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        System.Threading.Tasks.Task<NumberRangeModel> CreateFullContentItemAsync (NumberRangeModel model = null);

        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> CreateFullContentItemAsyncWithHttpInfo (NumberRangeModel model = null);
        /// <summary>
        /// Creates a new number range entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        System.Threading.Tasks.Task<NumberRangeModel> CreateNumberRangeAsync (NewNumberRangeRequest model = null);

        /// <summary>
        /// Creates a new number range entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> CreateNumberRangeAsyncWithHttpInfo (NewNumberRangeRequest model = null);
        /// <summary>
        /// Creates a new number range entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        System.Threading.Tasks.Task<NumberRangeModel> CreateNumberRangeStubAsync (NewNumberRangeStubRequest model = null);

        /// <summary>
        /// Creates a new number range entity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> CreateNumberRangeStubAsyncWithHttpInfo (NewNumberRangeStubRequest model = null);
        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        System.Threading.Tasks.Task<NumberRangeResponseModel> CreateResponseAsync (string numberRangeId, NewNumberRangeResponseRequest model = null);

        /// <summary>
        /// Creates a new response varation for the given message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> CreateResponseAsyncWithHttpInfo (string numberRangeId, NewNumberRangeResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> CreateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> CreateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);
        /// <summary>
        /// Delete the given number range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>Task of NumberRangeModel</returns>
        System.Threading.Tasks.Task<NumberRangeModel> DeleteNumberRangeAsync (string numberRangeId);

        /// <summary>
        /// Delete the given number range
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> DeleteNumberRangeAsyncWithHttpInfo (string numberRangeId);
        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        System.Threading.Tasks.Task<NumberRangeResponseModel> DeleteResponseAsync (string numberRangeResponseId);

        /// <summary>
        /// Deletes the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> DeleteResponseAsyncWithHttpInfo (string numberRangeResponseId);
        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of NumberRangeModel</returns>
        System.Threading.Tasks.Task<NumberRangeModel> FindFullByIdAsync (string id);

        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> FindFullByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;NumberRangeModel&gt;</returns>
        System.Threading.Tasks.Task<List<NumberRangeModel>> GetByApplicationFeatureAsync (string applicationFeatureId);

        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;NumberRangeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NumberRangeModel>>> GetByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Gets the number ranges content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;NumberRangeModel&gt;</returns>
        System.Threading.Tasks.Task<List<NumberRangeModel>> GetMessagesForApplicationAsync (string applicationId);

        /// <summary>
        /// Gets the number ranges content for the given application  regardless of module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;NumberRangeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NumberRangeModel>>> GetMessagesForApplicationAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// Gets the number ranges for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of List&lt;NumberRangeModel&gt;</returns>
        System.Threading.Tasks.Task<List<NumberRangeModel>> GetMessagesForModuleAsync (string applicationModuleId);

        /// <summary>
        /// Gets the number ranges for the given application module
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of ApiResponse (List&lt;NumberRangeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NumberRangeModel>>> GetMessagesForModuleAsyncWithHttpInfo (string applicationModuleId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>Task of List&lt;NumberRangeWebhookModel&gt;</returns>
        System.Threading.Tasks.Task<List<NumberRangeWebhookModel>> GetWebhooksAsync (string numberRangeId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>Task of ApiResponse (List&lt;NumberRangeWebhookModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NumberRangeWebhookModel>>> GetWebhooksAsyncWithHttpInfo (string numberRangeId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of NumberRangeModel</returns>
        System.Threading.Tasks.Task<NumberRangeModel> MoveContentItemToApplicationFeatureAsync (string contentItemId, string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> MoveContentItemToApplicationFeatureAsyncWithHttpInfo (string contentItemId, string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> RemoveUserDefinedParameterAsync (string instanceWebhookId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> RemoveUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, string parameterName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeWebhookId"></param>
        /// <returns>Task of NumberRangeWebhookModel</returns>
        System.Threading.Tasks.Task<NumberRangeWebhookModel> RemoveWebhookAsync (string numberRangeWebhookId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeWebhookId"></param>
        /// <returns>Task of ApiResponse (NumberRangeWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeWebhookModel>> RemoveWebhookAsyncWithHttpInfo (string numberRangeWebhookId);
        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        System.Threading.Tasks.Task<NumberRangeModel> ToggleLiveAsync (string numberRangeId, ToggleLiveRequest model = null);

        /// <summary>
        /// Toggles the given message as live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> ToggleLiveAsyncWithHttpInfo (string numberRangeId, ToggleLiveRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of NumberRangeWebhookModel</returns>
        System.Threading.Tasks.Task<NumberRangeWebhookModel> UpdateAttachedWebhookAsync (string numberRangeId, string webhookInstanceId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeWebhookModel>> UpdateAttachedWebhookAsyncWithHttpInfo (string numberRangeId, string webhookInstanceId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        System.Threading.Tasks.Task<NumberRangeModel> UpdateFullContentItemAsync (string contentItemId, NumberRangeModel model = null);

        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> UpdateFullContentItemAsyncWithHttpInfo (string contentItemId, NumberRangeModel model = null);
        /// <summary>
        /// Updates the number range with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        System.Threading.Tasks.Task<NumberRangeModel> UpdateMessageAsync (string numberRangeId, UpdateNumberRangeRequest model = null);

        /// <summary>
        /// Updates the number range with the given fields  If you send null or no value for fields, they won&#39;t be updated
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> UpdateMessageAsyncWithHttpInfo (string numberRangeId, UpdateNumberRangeRequest model = null);
        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        System.Threading.Tasks.Task<NumberRangeResponseModel> UpdateResponseAsync (string numberRangeResponseId, UpdateNumberRangeResponseRequest model = null);

        /// <summary>
        /// Updates the given response
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> UpdateResponseAsyncWithHttpInfo (string numberRangeResponseId, UpdateNumberRangeResponseRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UpdateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UpdateWebhookParameterAsync (string instanceWebhookId, WebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateWebhookParameterAsyncWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NumberRangeApi : INumberRangeApi
    {
        private Voicify.Sdk.Cms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NumberRangeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NumberRangeApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Cms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NumberRangeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NumberRangeApi(Voicify.Sdk.Cms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Cms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Cms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Cms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>NumberRangeResponseModel</returns>
        public NumberRangeResponseModel AddAudioFile (string numberRangeResponseId, string mediaItemId)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = AddAudioFileWithHttpInfo(numberRangeResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        public ApiResponse< NumberRangeResponseModel > AddAudioFileWithHttpInfo (string numberRangeResponseId, string mediaItemId)
        {
            // verify the required parameter 'numberRangeResponseId' is set
            if (numberRangeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeResponseId' when calling NumberRangeApi->AddAudioFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling NumberRangeApi->AddAudioFile");

            var localVarPath = "/api/NumberRange/{numberRangeResponseId}/addAudioFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeResponseId != null) localVarPathParams.Add("numberRangeResponseId", this.Configuration.ApiClient.ParameterToString(numberRangeResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAudioFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeResponseModel> AddAudioFileAsync (string numberRangeResponseId, string mediaItemId)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = await AddAudioFileAsyncWithHttpInfo(numberRangeResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an audio file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> AddAudioFileAsyncWithHttpInfo (string numberRangeResponseId, string mediaItemId)
        {
            // verify the required parameter 'numberRangeResponseId' is set
            if (numberRangeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeResponseId' when calling NumberRangeApi->AddAudioFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling NumberRangeApi->AddAudioFile");

            var localVarPath = "/api/NumberRange/{numberRangeResponseId}/addAudioFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeResponseId != null) localVarPathParams.Add("numberRangeResponseId", this.Configuration.ApiClient.ParameterToString(numberRangeResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAudioFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>NumberRangeResponseModel</returns>
        public NumberRangeResponseModel AddLargeImage (string numberRangeResponseId, string mediaItemId)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = AddLargeImageWithHttpInfo(numberRangeResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        public ApiResponse< NumberRangeResponseModel > AddLargeImageWithHttpInfo (string numberRangeResponseId, string mediaItemId)
        {
            // verify the required parameter 'numberRangeResponseId' is set
            if (numberRangeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeResponseId' when calling NumberRangeApi->AddLargeImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling NumberRangeApi->AddLargeImage");

            var localVarPath = "/api/NumberRange/{numberRangeResponseId}/addLargeImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeResponseId != null) localVarPathParams.Add("numberRangeResponseId", this.Configuration.ApiClient.ParameterToString(numberRangeResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLargeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeResponseModel> AddLargeImageAsync (string numberRangeResponseId, string mediaItemId)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = await AddLargeImageAsyncWithHttpInfo(numberRangeResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a large image to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> AddLargeImageAsyncWithHttpInfo (string numberRangeResponseId, string mediaItemId)
        {
            // verify the required parameter 'numberRangeResponseId' is set
            if (numberRangeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeResponseId' when calling NumberRangeApi->AddLargeImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling NumberRangeApi->AddLargeImage");

            var localVarPath = "/api/NumberRange/{numberRangeResponseId}/addLargeImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeResponseId != null) localVarPathParams.Add("numberRangeResponseId", this.Configuration.ApiClient.ParameterToString(numberRangeResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLargeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>NumberRangeResponseModel</returns>
        public NumberRangeResponseModel AddSmallImage (string numberRangeResponseId, string mediaItemId)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = AddSmallImageWithHttpInfo(numberRangeResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        public ApiResponse< NumberRangeResponseModel > AddSmallImageWithHttpInfo (string numberRangeResponseId, string mediaItemId)
        {
            // verify the required parameter 'numberRangeResponseId' is set
            if (numberRangeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeResponseId' when calling NumberRangeApi->AddSmallImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling NumberRangeApi->AddSmallImage");

            var localVarPath = "/api/NumberRange/{numberRangeResponseId}/addSmallImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeResponseId != null) localVarPathParams.Add("numberRangeResponseId", this.Configuration.ApiClient.ParameterToString(numberRangeResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSmallImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeResponseModel> AddSmallImageAsync (string numberRangeResponseId, string mediaItemId)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = await AddSmallImageAsyncWithHttpInfo(numberRangeResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a small image item to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> AddSmallImageAsyncWithHttpInfo (string numberRangeResponseId, string mediaItemId)
        {
            // verify the required parameter 'numberRangeResponseId' is set
            if (numberRangeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeResponseId' when calling NumberRangeApi->AddSmallImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling NumberRangeApi->AddSmallImage");

            var localVarPath = "/api/NumberRange/{numberRangeResponseId}/addSmallImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeResponseId != null) localVarPathParams.Add("numberRangeResponseId", this.Configuration.ApiClient.ParameterToString(numberRangeResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSmallImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>NumberRangeResponseModel</returns>
        public NumberRangeResponseModel AddVideoFile (string numberRangeResponseId, string mediaItemId)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = AddVideoFileWithHttpInfo(numberRangeResponseId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        public ApiResponse< NumberRangeResponseModel > AddVideoFileWithHttpInfo (string numberRangeResponseId, string mediaItemId)
        {
            // verify the required parameter 'numberRangeResponseId' is set
            if (numberRangeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeResponseId' when calling NumberRangeApi->AddVideoFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling NumberRangeApi->AddVideoFile");

            var localVarPath = "/api/NumberRange/{numberRangeResponseId}/addVideoFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeResponseId != null) localVarPathParams.Add("numberRangeResponseId", this.Configuration.ApiClient.ParameterToString(numberRangeResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVideoFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeResponseModel> AddVideoFileAsync (string numberRangeResponseId, string mediaItemId)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = await AddVideoFileAsyncWithHttpInfo(numberRangeResponseId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a video file to the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> AddVideoFileAsyncWithHttpInfo (string numberRangeResponseId, string mediaItemId)
        {
            // verify the required parameter 'numberRangeResponseId' is set
            if (numberRangeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeResponseId' when calling NumberRangeApi->AddVideoFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling NumberRangeApi->AddVideoFile");

            var localVarPath = "/api/NumberRange/{numberRangeResponseId}/addVideoFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeResponseId != null) localVarPathParams.Add("numberRangeResponseId", this.Configuration.ApiClient.ParameterToString(numberRangeResponseId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVideoFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>NumberRangeWebhookModel</returns>
        public NumberRangeWebhookModel AddWebhook (string numberRangeId, string webhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<NumberRangeWebhookModel> localVarResponse = AddWebhookWithHttpInfo(numberRangeId, webhookId, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeWebhookModel</returns>
        public ApiResponse< NumberRangeWebhookModel > AddWebhookWithHttpInfo (string numberRangeId, string webhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->AddWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling NumberRangeApi->AddWebhook");

            var localVarPath = "/api/NumberRange/{numberRangeId}/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of NumberRangeWebhookModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeWebhookModel> AddWebhookAsync (string numberRangeId, string webhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<NumberRangeWebhookModel> localVarResponse = await AddWebhookAsyncWithHttpInfo(numberRangeId, webhookId, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeWebhookModel>> AddWebhookAsyncWithHttpInfo (string numberRangeId, string webhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->AddWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling NumberRangeApi->AddWebhook");

            var localVarPath = "/api/NumberRange/{numberRangeId}/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        public NumberRangeModel BulkUpdateNumberRange (string numberRangeId, BulkUpdateNumberRangeRequest model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = BulkUpdateNumberRangeWithHttpInfo(numberRangeId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        public ApiResponse< NumberRangeModel > BulkUpdateNumberRangeWithHttpInfo (string numberRangeId, BulkUpdateNumberRangeRequest model = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->BulkUpdateNumberRange");

            var localVarPath = "/api/NumberRange/{numberRangeId}/bulkUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateNumberRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeModel> BulkUpdateNumberRangeAsync (string numberRangeId, BulkUpdateNumberRangeRequest model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = await BulkUpdateNumberRangeAsyncWithHttpInfo(numberRangeId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> BulkUpdateNumberRangeAsyncWithHttpInfo (string numberRangeId, BulkUpdateNumberRangeRequest model = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->BulkUpdateNumberRange");

            var localVarPath = "/api/NumberRange/{numberRangeId}/bulkUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateNumberRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        public NumberRangeModel BulkUpdateNumberRangeStub (string numberRangeId, BulkUpdateNumberRangeStubRequest model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = BulkUpdateNumberRangeStubWithHttpInfo(numberRangeId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        public ApiResponse< NumberRangeModel > BulkUpdateNumberRangeStubWithHttpInfo (string numberRangeId, BulkUpdateNumberRangeStubRequest model = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->BulkUpdateNumberRangeStub");

            var localVarPath = "/api/NumberRange/{numberRangeId}/bulkUpdate/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateNumberRangeStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeModel> BulkUpdateNumberRangeStubAsync (string numberRangeId, BulkUpdateNumberRangeStubRequest model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = await BulkUpdateNumberRangeStubAsyncWithHttpInfo(numberRangeId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> BulkUpdateNumberRangeStubAsyncWithHttpInfo (string numberRangeId, BulkUpdateNumberRangeStubRequest model = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->BulkUpdateNumberRangeStub");

            var localVarPath = "/api/NumberRange/{numberRangeId}/bulkUpdate/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateNumberRangeStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>NumberRangeModel</returns>
        public NumberRangeModel CopyContentItem (string numberRangeId)
        {
             ApiResponse<NumberRangeModel> localVarResponse = CopyContentItemWithHttpInfo(numberRangeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        public ApiResponse< NumberRangeModel > CopyContentItemWithHttpInfo (string numberRangeId)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->CopyContentItem");

            var localVarPath = "/api/NumberRange/{numberRangeId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>Task of NumberRangeModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeModel> CopyContentItemAsync (string numberRangeId)
        {
             ApiResponse<NumberRangeModel> localVarResponse = await CopyContentItemAsyncWithHttpInfo(numberRangeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> CopyContentItemAsyncWithHttpInfo (string numberRangeId)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->CopyContentItem");

            var localVarPath = "/api/NumberRange/{numberRangeId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        public NumberRangeModel CreateFullContentItem (NumberRangeModel model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = CreateFullContentItemWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        public ApiResponse< NumberRangeModel > CreateFullContentItemWithHttpInfo (NumberRangeModel model = null)
        {

            var localVarPath = "/api/NumberRange/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeModel> CreateFullContentItemAsync (NumberRangeModel model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = await CreateFullContentItemAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> CreateFullContentItemAsyncWithHttpInfo (NumberRangeModel model = null)
        {

            var localVarPath = "/api/NumberRange/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Creates a new number range entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        public NumberRangeModel CreateNumberRange (NewNumberRangeRequest model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = CreateNumberRangeWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new number range entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        public ApiResponse< NumberRangeModel > CreateNumberRangeWithHttpInfo (NewNumberRangeRequest model = null)
        {

            var localVarPath = "/api/NumberRange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNumberRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Creates a new number range entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeModel> CreateNumberRangeAsync (NewNumberRangeRequest model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = await CreateNumberRangeAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new number range entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> CreateNumberRangeAsyncWithHttpInfo (NewNumberRangeRequest model = null)
        {

            var localVarPath = "/api/NumberRange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNumberRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Creates a new number range entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        public NumberRangeModel CreateNumberRangeStub (NewNumberRangeStubRequest model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = CreateNumberRangeStubWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new number range entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        public ApiResponse< NumberRangeModel > CreateNumberRangeStubWithHttpInfo (NewNumberRangeStubRequest model = null)
        {

            var localVarPath = "/api/NumberRange/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNumberRangeStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Creates a new number range entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeModel> CreateNumberRangeStubAsync (NewNumberRangeStubRequest model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = await CreateNumberRangeStubAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new number range entity 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> CreateNumberRangeStubAsyncWithHttpInfo (NewNumberRangeStubRequest model = null)
        {

            var localVarPath = "/api/NumberRange/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNumberRangeStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeResponseModel</returns>
        public NumberRangeResponseModel CreateResponse (string numberRangeId, NewNumberRangeResponseRequest model = null)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = CreateResponseWithHttpInfo(numberRangeId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        public ApiResponse< NumberRangeResponseModel > CreateResponseWithHttpInfo (string numberRangeId, NewNumberRangeResponseRequest model = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->CreateResponse");

            var localVarPath = "/api/NumberRange/{numberRangeId}/response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeResponseModel> CreateResponseAsync (string numberRangeId, NewNumberRangeResponseRequest model = null)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = await CreateResponseAsyncWithHttpInfo(numberRangeId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new response varation for the given message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> CreateResponseAsyncWithHttpInfo (string numberRangeId, NewNumberRangeResponseRequest model = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->CreateResponse");

            var localVarPath = "/api/NumberRange/{numberRangeId}/response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? CreateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = CreateUserDefinedParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > CreateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling NumberRangeApi->CreateUserDefinedParameter");

            var localVarPath = "/api/NumberRange/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> CreateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await CreateUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> CreateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling NumberRangeApi->CreateUserDefinedParameter");

            var localVarPath = "/api/NumberRange/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Delete the given number range 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>NumberRangeModel</returns>
        public NumberRangeModel DeleteNumberRange (string numberRangeId)
        {
             ApiResponse<NumberRangeModel> localVarResponse = DeleteNumberRangeWithHttpInfo(numberRangeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete the given number range 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        public ApiResponse< NumberRangeModel > DeleteNumberRangeWithHttpInfo (string numberRangeId)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->DeleteNumberRange");

            var localVarPath = "/api/NumberRange/{numberRangeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNumberRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Delete the given number range 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>Task of NumberRangeModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeModel> DeleteNumberRangeAsync (string numberRangeId)
        {
             ApiResponse<NumberRangeModel> localVarResponse = await DeleteNumberRangeAsyncWithHttpInfo(numberRangeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete the given number range 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> DeleteNumberRangeAsyncWithHttpInfo (string numberRangeId)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->DeleteNumberRange");

            var localVarPath = "/api/NumberRange/{numberRangeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNumberRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <returns>NumberRangeResponseModel</returns>
        public NumberRangeResponseModel DeleteResponse (string numberRangeResponseId)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = DeleteResponseWithHttpInfo(numberRangeResponseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        public ApiResponse< NumberRangeResponseModel > DeleteResponseWithHttpInfo (string numberRangeResponseId)
        {
            // verify the required parameter 'numberRangeResponseId' is set
            if (numberRangeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeResponseId' when calling NumberRangeApi->DeleteResponse");

            var localVarPath = "/api/NumberRange/response/{numberRangeResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeResponseId != null) localVarPathParams.Add("numberRangeResponseId", this.Configuration.ApiClient.ParameterToString(numberRangeResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeResponseModel> DeleteResponseAsync (string numberRangeResponseId)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = await DeleteResponseAsyncWithHttpInfo(numberRangeResponseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> DeleteResponseAsyncWithHttpInfo (string numberRangeResponseId)
        {
            // verify the required parameter 'numberRangeResponseId' is set
            if (numberRangeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeResponseId' when calling NumberRangeApi->DeleteResponse");

            var localVarPath = "/api/NumberRange/response/{numberRangeResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeResponseId != null) localVarPathParams.Add("numberRangeResponseId", this.Configuration.ApiClient.ParameterToString(numberRangeResponseId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>NumberRangeModel</returns>
        public NumberRangeModel FindFullById (string id)
        {
             ApiResponse<NumberRangeModel> localVarResponse = FindFullByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        public ApiResponse< NumberRangeModel > FindFullByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NumberRangeApi->FindFullById");

            var localVarPath = "/api/NumberRange/full/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFullById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of NumberRangeModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeModel> FindFullByIdAsync (string id)
        {
             ApiResponse<NumberRangeModel> localVarResponse = await FindFullByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> FindFullByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NumberRangeApi->FindFullById");

            var localVarPath = "/api/NumberRange/full/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFullById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;NumberRangeModel&gt;</returns>
        public List<NumberRangeModel> GetByApplicationFeature (string applicationFeatureId)
        {
             ApiResponse<List<NumberRangeModel>> localVarResponse = GetByApplicationFeatureWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;NumberRangeModel&gt;</returns>
        public ApiResponse< List<NumberRangeModel> > GetByApplicationFeatureWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling NumberRangeApi->GetByApplicationFeature");

            var localVarPath = "/api/NumberRange/byFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NumberRangeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NumberRangeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NumberRangeModel>)));
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;NumberRangeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NumberRangeModel>> GetByApplicationFeatureAsync (string applicationFeatureId)
        {
             ApiResponse<List<NumberRangeModel>> localVarResponse = await GetByApplicationFeatureAsyncWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;NumberRangeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NumberRangeModel>>> GetByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling NumberRangeApi->GetByApplicationFeature");

            var localVarPath = "/api/NumberRange/byFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NumberRangeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NumberRangeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NumberRangeModel>)));
        }

        /// <summary>
        /// Gets the number ranges content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;NumberRangeModel&gt;</returns>
        public List<NumberRangeModel> GetMessagesForApplication (string applicationId)
        {
             ApiResponse<List<NumberRangeModel>> localVarResponse = GetMessagesForApplicationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the number ranges content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;NumberRangeModel&gt;</returns>
        public ApiResponse< List<NumberRangeModel> > GetMessagesForApplicationWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling NumberRangeApi->GetMessagesForApplication");

            var localVarPath = "/api/NumberRange/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NumberRangeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NumberRangeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NumberRangeModel>)));
        }

        /// <summary>
        /// Gets the number ranges content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;NumberRangeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NumberRangeModel>> GetMessagesForApplicationAsync (string applicationId)
        {
             ApiResponse<List<NumberRangeModel>> localVarResponse = await GetMessagesForApplicationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the number ranges content for the given application  regardless of module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;NumberRangeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NumberRangeModel>>> GetMessagesForApplicationAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling NumberRangeApi->GetMessagesForApplication");

            var localVarPath = "/api/NumberRange/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NumberRangeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NumberRangeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NumberRangeModel>)));
        }

        /// <summary>
        /// Gets the number ranges for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>List&lt;NumberRangeModel&gt;</returns>
        public List<NumberRangeModel> GetMessagesForModule (string applicationModuleId)
        {
             ApiResponse<List<NumberRangeModel>> localVarResponse = GetMessagesForModuleWithHttpInfo(applicationModuleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the number ranges for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>ApiResponse of List&lt;NumberRangeModel&gt;</returns>
        public ApiResponse< List<NumberRangeModel> > GetMessagesForModuleWithHttpInfo (string applicationModuleId)
        {
            // verify the required parameter 'applicationModuleId' is set
            if (applicationModuleId == null)
                throw new ApiException(400, "Missing required parameter 'applicationModuleId' when calling NumberRangeApi->GetMessagesForModule");

            var localVarPath = "/api/NumberRange/module/{applicationModuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationModuleId != null) localVarPathParams.Add("applicationModuleId", this.Configuration.ApiClient.ParameterToString(applicationModuleId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NumberRangeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NumberRangeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NumberRangeModel>)));
        }

        /// <summary>
        /// Gets the number ranges for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of List&lt;NumberRangeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NumberRangeModel>> GetMessagesForModuleAsync (string applicationModuleId)
        {
             ApiResponse<List<NumberRangeModel>> localVarResponse = await GetMessagesForModuleAsyncWithHttpInfo(applicationModuleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the number ranges for the given application module 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationModuleId"></param>
        /// <returns>Task of ApiResponse (List&lt;NumberRangeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NumberRangeModel>>> GetMessagesForModuleAsyncWithHttpInfo (string applicationModuleId)
        {
            // verify the required parameter 'applicationModuleId' is set
            if (applicationModuleId == null)
                throw new ApiException(400, "Missing required parameter 'applicationModuleId' when calling NumberRangeApi->GetMessagesForModule");

            var localVarPath = "/api/NumberRange/module/{applicationModuleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationModuleId != null) localVarPathParams.Add("applicationModuleId", this.Configuration.ApiClient.ParameterToString(applicationModuleId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessagesForModule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NumberRangeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NumberRangeModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NumberRangeModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>List&lt;NumberRangeWebhookModel&gt;</returns>
        public List<NumberRangeWebhookModel> GetWebhooks (string numberRangeId)
        {
             ApiResponse<List<NumberRangeWebhookModel>> localVarResponse = GetWebhooksWithHttpInfo(numberRangeId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>ApiResponse of List&lt;NumberRangeWebhookModel&gt;</returns>
        public ApiResponse< List<NumberRangeWebhookModel> > GetWebhooksWithHttpInfo (string numberRangeId)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->GetWebhooks");

            var localVarPath = "/api/NumberRange/{numberRangeId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NumberRangeWebhookModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NumberRangeWebhookModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NumberRangeWebhookModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>Task of List&lt;NumberRangeWebhookModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NumberRangeWebhookModel>> GetWebhooksAsync (string numberRangeId)
        {
             ApiResponse<List<NumberRangeWebhookModel>> localVarResponse = await GetWebhooksAsyncWithHttpInfo(numberRangeId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <returns>Task of ApiResponse (List&lt;NumberRangeWebhookModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NumberRangeWebhookModel>>> GetWebhooksAsyncWithHttpInfo (string numberRangeId)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->GetWebhooks");

            var localVarPath = "/api/NumberRange/{numberRangeId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NumberRangeWebhookModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NumberRangeWebhookModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NumberRangeWebhookModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>NumberRangeModel</returns>
        public NumberRangeModel MoveContentItemToApplicationFeature (string contentItemId, string applicationFeatureId)
        {
             ApiResponse<NumberRangeModel> localVarResponse = MoveContentItemToApplicationFeatureWithHttpInfo(contentItemId, applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        public ApiResponse< NumberRangeModel > MoveContentItemToApplicationFeatureWithHttpInfo (string contentItemId, string applicationFeatureId)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling NumberRangeApi->MoveContentItemToApplicationFeature");
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling NumberRangeApi->MoveContentItemToApplicationFeature");

            var localVarPath = "/api/NumberRange/{contentItemId}/MoveToFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveContentItemToApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of NumberRangeModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeModel> MoveContentItemToApplicationFeatureAsync (string contentItemId, string applicationFeatureId)
        {
             ApiResponse<NumberRangeModel> localVarResponse = await MoveContentItemToApplicationFeatureAsyncWithHttpInfo(contentItemId, applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> MoveContentItemToApplicationFeatureAsyncWithHttpInfo (string contentItemId, string applicationFeatureId)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling NumberRangeApi->MoveContentItemToApplicationFeature");
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling NumberRangeApi->MoveContentItemToApplicationFeature");

            var localVarPath = "/api/NumberRange/{contentItemId}/MoveToFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveContentItemToApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>bool?</returns>
        public bool? RemoveUserDefinedParameter (string instanceWebhookId, string parameterName)
        {
             ApiResponse<bool?> localVarResponse = RemoveUserDefinedParameterWithHttpInfo(instanceWebhookId, parameterName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > RemoveUserDefinedParameterWithHttpInfo (string instanceWebhookId, string parameterName)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling NumberRangeApi->RemoveUserDefinedParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling NumberRangeApi->RemoveUserDefinedParameter");

            var localVarPath = "/api/NumberRange/webhook/{instanceWebhookId}/userParameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> RemoveUserDefinedParameterAsync (string instanceWebhookId, string parameterName)
        {
             ApiResponse<bool?> localVarResponse = await RemoveUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, parameterName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> RemoveUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, string parameterName)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling NumberRangeApi->RemoveUserDefinedParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling NumberRangeApi->RemoveUserDefinedParameter");

            var localVarPath = "/api/NumberRange/webhook/{instanceWebhookId}/userParameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeWebhookId"></param>
        /// <returns>NumberRangeWebhookModel</returns>
        public NumberRangeWebhookModel RemoveWebhook (string numberRangeWebhookId)
        {
             ApiResponse<NumberRangeWebhookModel> localVarResponse = RemoveWebhookWithHttpInfo(numberRangeWebhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeWebhookId"></param>
        /// <returns>ApiResponse of NumberRangeWebhookModel</returns>
        public ApiResponse< NumberRangeWebhookModel > RemoveWebhookWithHttpInfo (string numberRangeWebhookId)
        {
            // verify the required parameter 'numberRangeWebhookId' is set
            if (numberRangeWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeWebhookId' when calling NumberRangeApi->RemoveWebhook");

            var localVarPath = "/api/NumberRange/webhook/{numberRangeWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeWebhookId != null) localVarPathParams.Add("numberRangeWebhookId", this.Configuration.ApiClient.ParameterToString(numberRangeWebhookId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeWebhookId"></param>
        /// <returns>Task of NumberRangeWebhookModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeWebhookModel> RemoveWebhookAsync (string numberRangeWebhookId)
        {
             ApiResponse<NumberRangeWebhookModel> localVarResponse = await RemoveWebhookAsyncWithHttpInfo(numberRangeWebhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeWebhookId"></param>
        /// <returns>Task of ApiResponse (NumberRangeWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeWebhookModel>> RemoveWebhookAsyncWithHttpInfo (string numberRangeWebhookId)
        {
            // verify the required parameter 'numberRangeWebhookId' is set
            if (numberRangeWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeWebhookId' when calling NumberRangeApi->RemoveWebhook");

            var localVarPath = "/api/NumberRange/webhook/{numberRangeWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeWebhookId != null) localVarPathParams.Add("numberRangeWebhookId", this.Configuration.ApiClient.ParameterToString(numberRangeWebhookId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeWebhookModel)));
        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        public NumberRangeModel ToggleLive (string numberRangeId, ToggleLiveRequest model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = ToggleLiveWithHttpInfo(numberRangeId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        public ApiResponse< NumberRangeModel > ToggleLiveWithHttpInfo (string numberRangeId, ToggleLiveRequest model = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->ToggleLive");

            var localVarPath = "/api/NumberRange/{numberRangeId}/isLive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ToggleLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeModel> ToggleLiveAsync (string numberRangeId, ToggleLiveRequest model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = await ToggleLiveAsyncWithHttpInfo(numberRangeId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Toggles the given message as live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> ToggleLiveAsyncWithHttpInfo (string numberRangeId, ToggleLiveRequest model = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->ToggleLive");

            var localVarPath = "/api/NumberRange/{numberRangeId}/isLive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ToggleLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>NumberRangeWebhookModel</returns>
        public NumberRangeWebhookModel UpdateAttachedWebhook (string numberRangeId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<NumberRangeWebhookModel> localVarResponse = UpdateAttachedWebhookWithHttpInfo(numberRangeId, webhookInstanceId, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeWebhookModel</returns>
        public ApiResponse< NumberRangeWebhookModel > UpdateAttachedWebhookWithHttpInfo (string numberRangeId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->UpdateAttachedWebhook");
            // verify the required parameter 'webhookInstanceId' is set
            if (webhookInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'webhookInstanceId' when calling NumberRangeApi->UpdateAttachedWebhook");

            var localVarPath = "/api/NumberRange/{numberRangeId}/webhooks/{webhookInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (webhookInstanceId != null) localVarPathParams.Add("webhookInstanceId", this.Configuration.ApiClient.ParameterToString(webhookInstanceId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachedWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeWebhookModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of NumberRangeWebhookModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeWebhookModel> UpdateAttachedWebhookAsync (string numberRangeId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<NumberRangeWebhookModel> localVarResponse = await UpdateAttachedWebhookAsyncWithHttpInfo(numberRangeId, webhookInstanceId, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="webhookInstanceId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeWebhookModel>> UpdateAttachedWebhookAsyncWithHttpInfo (string numberRangeId, string webhookInstanceId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->UpdateAttachedWebhook");
            // verify the required parameter 'webhookInstanceId' is set
            if (webhookInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'webhookInstanceId' when calling NumberRangeApi->UpdateAttachedWebhook");

            var localVarPath = "/api/NumberRange/{numberRangeId}/webhooks/{webhookInstanceId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (webhookInstanceId != null) localVarPathParams.Add("webhookInstanceId", this.Configuration.ApiClient.ParameterToString(webhookInstanceId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachedWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeWebhookModel)));
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        public NumberRangeModel UpdateFullContentItem (string contentItemId, NumberRangeModel model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = UpdateFullContentItemWithHttpInfo(contentItemId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        public ApiResponse< NumberRangeModel > UpdateFullContentItemWithHttpInfo (string contentItemId, NumberRangeModel model = null)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling NumberRangeApi->UpdateFullContentItem");

            var localVarPath = "/api/NumberRange/{contentItemId}/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeModel> UpdateFullContentItemAsync (string contentItemId, NumberRangeModel model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = await UpdateFullContentItemAsyncWithHttpInfo(contentItemId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> UpdateFullContentItemAsyncWithHttpInfo (string contentItemId, NumberRangeModel model = null)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling NumberRangeApi->UpdateFullContentItem");

            var localVarPath = "/api/NumberRange/{contentItemId}/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Updates the number range with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeModel</returns>
        public NumberRangeModel UpdateMessage (string numberRangeId, UpdateNumberRangeRequest model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = UpdateMessageWithHttpInfo(numberRangeId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the number range with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeModel</returns>
        public ApiResponse< NumberRangeModel > UpdateMessageWithHttpInfo (string numberRangeId, UpdateNumberRangeRequest model = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->UpdateMessage");

            var localVarPath = "/api/NumberRange/{numberRangeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Updates the number range with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeModel> UpdateMessageAsync (string numberRangeId, UpdateNumberRangeRequest model = null)
        {
             ApiResponse<NumberRangeModel> localVarResponse = await UpdateMessageAsyncWithHttpInfo(numberRangeId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the number range with the given fields  If you send null or no value for fields, they won&#39;t be updated 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeModel>> UpdateMessageAsyncWithHttpInfo (string numberRangeId, UpdateNumberRangeRequest model = null)
        {
            // verify the required parameter 'numberRangeId' is set
            if (numberRangeId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeId' when calling NumberRangeApi->UpdateMessage");

            var localVarPath = "/api/NumberRange/{numberRangeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeId != null) localVarPathParams.Add("numberRangeId", this.Configuration.ApiClient.ParameterToString(numberRangeId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeModel)));
        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>NumberRangeResponseModel</returns>
        public NumberRangeResponseModel UpdateResponse (string numberRangeResponseId, UpdateNumberRangeResponseRequest model = null)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = UpdateResponseWithHttpInfo(numberRangeResponseId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of NumberRangeResponseModel</returns>
        public ApiResponse< NumberRangeResponseModel > UpdateResponseWithHttpInfo (string numberRangeResponseId, UpdateNumberRangeResponseRequest model = null)
        {
            // verify the required parameter 'numberRangeResponseId' is set
            if (numberRangeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeResponseId' when calling NumberRangeApi->UpdateResponse");

            var localVarPath = "/api/NumberRange/response/{numberRangeResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeResponseId != null) localVarPathParams.Add("numberRangeResponseId", this.Configuration.ApiClient.ParameterToString(numberRangeResponseId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of NumberRangeResponseModel</returns>
        public async System.Threading.Tasks.Task<NumberRangeResponseModel> UpdateResponseAsync (string numberRangeResponseId, UpdateNumberRangeResponseRequest model = null)
        {
             ApiResponse<NumberRangeResponseModel> localVarResponse = await UpdateResponseAsyncWithHttpInfo(numberRangeResponseId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the given response 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRangeResponseId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (NumberRangeResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NumberRangeResponseModel>> UpdateResponseAsyncWithHttpInfo (string numberRangeResponseId, UpdateNumberRangeResponseRequest model = null)
        {
            // verify the required parameter 'numberRangeResponseId' is set
            if (numberRangeResponseId == null)
                throw new ApiException(400, "Missing required parameter 'numberRangeResponseId' when calling NumberRangeApi->UpdateResponse");

            var localVarPath = "/api/NumberRange/response/{numberRangeResponseId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRangeResponseId != null) localVarPathParams.Add("numberRangeResponseId", this.Configuration.ApiClient.ParameterToString(numberRangeResponseId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResponse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NumberRangeResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NumberRangeResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NumberRangeResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? UpdateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = UpdateUserDefinedParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UpdateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling NumberRangeApi->UpdateUserDefinedParameter");

            var localVarPath = "/api/NumberRange/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UpdateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await UpdateUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling NumberRangeApi->UpdateUserDefinedParameter");

            var localVarPath = "/api/NumberRange/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? UpdateWebhookParameter (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = UpdateWebhookParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UpdateWebhookParameterWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling NumberRangeApi->UpdateWebhookParameter");

            var localVarPath = "/api/NumberRange/webhook/{instanceWebhookId}/webhookParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UpdateWebhookParameterAsync (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await UpdateWebhookParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateWebhookParameterAsyncWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling NumberRangeApi->UpdateWebhookParameter");

            var localVarPath = "/api/NumberRange/webhook/{instanceWebhookId}/webhookParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

    }
}
