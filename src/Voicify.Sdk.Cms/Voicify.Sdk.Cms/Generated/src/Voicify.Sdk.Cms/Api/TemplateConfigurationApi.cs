/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateConfigurationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>TemplateConfigurationModel</returns>
        TemplateConfigurationModel CreateTemplateConfigurationFromModel (TemplateConfigurationModel model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of TemplateConfigurationModel</returns>
        ApiResponse<TemplateConfigurationModel> CreateTemplateConfigurationFromModelWithHttpInfo (TemplateConfigurationModel model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>TemplateConfigurationModel</returns>
        TemplateConfigurationModel DeleteTemplateConfiguration (string templateConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>ApiResponse of TemplateConfigurationModel</returns>
        ApiResponse<TemplateConfigurationModel> DeleteTemplateConfigurationWithHttpInfo (string templateConfigurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>TemplateConfigurationModel</returns>
        TemplateConfigurationModel DisableTemplateConfiguration (string templateConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>ApiResponse of TemplateConfigurationModel</returns>
        ApiResponse<TemplateConfigurationModel> DisableTemplateConfigurationWithHttpInfo (string templateConfigurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>TemplateConfigurationModel</returns>
        TemplateConfigurationModel EnableTemplateConfiguration (string templateConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>ApiResponse of TemplateConfigurationModel</returns>
        ApiResponse<TemplateConfigurationModel> EnableTemplateConfigurationWithHttpInfo (string templateConfigurationId);
        /// <summary>
        /// Gets the available template configs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>List&lt;TemplateConfigurationModel&gt;</returns>
        List<TemplateConfigurationModel> GetAvailableTemplateConfigurations (string organizationId);

        /// <summary>
        /// Gets the available template configs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of List&lt;TemplateConfigurationModel&gt;</returns>
        ApiResponse<List<TemplateConfigurationModel>> GetAvailableTemplateConfigurationsWithHttpInfo (string organizationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>List&lt;TemplateConfigurationModel&gt;</returns>
        List<TemplateConfigurationModel> GetOrganizationTemplateConfigurations (string organizationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of List&lt;TemplateConfigurationModel&gt;</returns>
        ApiResponse<List<TemplateConfigurationModel>> GetOrganizationTemplateConfigurationsWithHttpInfo (string organizationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>TemplateConfigurationModel</returns>
        TemplateConfigurationModel UpdateTemplateConfiguration (string templateConfigurationId, TemplateConfigurationModel model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of TemplateConfigurationModel</returns>
        ApiResponse<TemplateConfigurationModel> UpdateTemplateConfigurationWithHttpInfo (string templateConfigurationId, TemplateConfigurationModel model = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of TemplateConfigurationModel</returns>
        System.Threading.Tasks.Task<TemplateConfigurationModel> CreateTemplateConfigurationFromModelAsync (TemplateConfigurationModel model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateConfigurationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateConfigurationModel>> CreateTemplateConfigurationFromModelAsyncWithHttpInfo (TemplateConfigurationModel model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>Task of TemplateConfigurationModel</returns>
        System.Threading.Tasks.Task<TemplateConfigurationModel> DeleteTemplateConfigurationAsync (string templateConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>Task of ApiResponse (TemplateConfigurationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateConfigurationModel>> DeleteTemplateConfigurationAsyncWithHttpInfo (string templateConfigurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>Task of TemplateConfigurationModel</returns>
        System.Threading.Tasks.Task<TemplateConfigurationModel> DisableTemplateConfigurationAsync (string templateConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>Task of ApiResponse (TemplateConfigurationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateConfigurationModel>> DisableTemplateConfigurationAsyncWithHttpInfo (string templateConfigurationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>Task of TemplateConfigurationModel</returns>
        System.Threading.Tasks.Task<TemplateConfigurationModel> EnableTemplateConfigurationAsync (string templateConfigurationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>Task of ApiResponse (TemplateConfigurationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateConfigurationModel>> EnableTemplateConfigurationAsyncWithHttpInfo (string templateConfigurationId);
        /// <summary>
        /// Gets the available template configs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of List&lt;TemplateConfigurationModel&gt;</returns>
        System.Threading.Tasks.Task<List<TemplateConfigurationModel>> GetAvailableTemplateConfigurationsAsync (string organizationId);

        /// <summary>
        /// Gets the available template configs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (List&lt;TemplateConfigurationModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TemplateConfigurationModel>>> GetAvailableTemplateConfigurationsAsyncWithHttpInfo (string organizationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of List&lt;TemplateConfigurationModel&gt;</returns>
        System.Threading.Tasks.Task<List<TemplateConfigurationModel>> GetOrganizationTemplateConfigurationsAsync (string organizationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (List&lt;TemplateConfigurationModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TemplateConfigurationModel>>> GetOrganizationTemplateConfigurationsAsyncWithHttpInfo (string organizationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of TemplateConfigurationModel</returns>
        System.Threading.Tasks.Task<TemplateConfigurationModel> UpdateTemplateConfigurationAsync (string templateConfigurationId, TemplateConfigurationModel model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateConfigurationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateConfigurationModel>> UpdateTemplateConfigurationAsyncWithHttpInfo (string templateConfigurationId, TemplateConfigurationModel model = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplateConfigurationApi : ITemplateConfigurationApi
    {
        private Voicify.Sdk.Cms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateConfigurationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateConfigurationApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Cms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateConfigurationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateConfigurationApi(Voicify.Sdk.Cms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Cms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Cms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Cms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>TemplateConfigurationModel</returns>
        public TemplateConfigurationModel CreateTemplateConfigurationFromModel (TemplateConfigurationModel model = null)
        {
             ApiResponse<TemplateConfigurationModel> localVarResponse = CreateTemplateConfigurationFromModelWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of TemplateConfigurationModel</returns>
        public ApiResponse< TemplateConfigurationModel > CreateTemplateConfigurationFromModelWithHttpInfo (TemplateConfigurationModel model = null)
        {

            var localVarPath = "/api/TemplateConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateConfigurationFromModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateConfigurationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateConfigurationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateConfigurationModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of TemplateConfigurationModel</returns>
        public async System.Threading.Tasks.Task<TemplateConfigurationModel> CreateTemplateConfigurationFromModelAsync (TemplateConfigurationModel model = null)
        {
             ApiResponse<TemplateConfigurationModel> localVarResponse = await CreateTemplateConfigurationFromModelAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateConfigurationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateConfigurationModel>> CreateTemplateConfigurationFromModelAsyncWithHttpInfo (TemplateConfigurationModel model = null)
        {

            var localVarPath = "/api/TemplateConfiguration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateConfigurationFromModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateConfigurationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateConfigurationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateConfigurationModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>TemplateConfigurationModel</returns>
        public TemplateConfigurationModel DeleteTemplateConfiguration (string templateConfigurationId)
        {
             ApiResponse<TemplateConfigurationModel> localVarResponse = DeleteTemplateConfigurationWithHttpInfo(templateConfigurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>ApiResponse of TemplateConfigurationModel</returns>
        public ApiResponse< TemplateConfigurationModel > DeleteTemplateConfigurationWithHttpInfo (string templateConfigurationId)
        {
            // verify the required parameter 'templateConfigurationId' is set
            if (templateConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'templateConfigurationId' when calling TemplateConfigurationApi->DeleteTemplateConfiguration");

            var localVarPath = "/api/TemplateConfiguration/{templateConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateConfigurationId != null) localVarPathParams.Add("templateConfigurationId", this.Configuration.ApiClient.ParameterToString(templateConfigurationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateConfigurationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateConfigurationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateConfigurationModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>Task of TemplateConfigurationModel</returns>
        public async System.Threading.Tasks.Task<TemplateConfigurationModel> DeleteTemplateConfigurationAsync (string templateConfigurationId)
        {
             ApiResponse<TemplateConfigurationModel> localVarResponse = await DeleteTemplateConfigurationAsyncWithHttpInfo(templateConfigurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>Task of ApiResponse (TemplateConfigurationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateConfigurationModel>> DeleteTemplateConfigurationAsyncWithHttpInfo (string templateConfigurationId)
        {
            // verify the required parameter 'templateConfigurationId' is set
            if (templateConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'templateConfigurationId' when calling TemplateConfigurationApi->DeleteTemplateConfiguration");

            var localVarPath = "/api/TemplateConfiguration/{templateConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateConfigurationId != null) localVarPathParams.Add("templateConfigurationId", this.Configuration.ApiClient.ParameterToString(templateConfigurationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateConfigurationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateConfigurationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateConfigurationModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>TemplateConfigurationModel</returns>
        public TemplateConfigurationModel DisableTemplateConfiguration (string templateConfigurationId)
        {
             ApiResponse<TemplateConfigurationModel> localVarResponse = DisableTemplateConfigurationWithHttpInfo(templateConfigurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>ApiResponse of TemplateConfigurationModel</returns>
        public ApiResponse< TemplateConfigurationModel > DisableTemplateConfigurationWithHttpInfo (string templateConfigurationId)
        {
            // verify the required parameter 'templateConfigurationId' is set
            if (templateConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'templateConfigurationId' when calling TemplateConfigurationApi->DisableTemplateConfiguration");

            var localVarPath = "/api/TemplateConfiguration/{templateConfigurationId}/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateConfigurationId != null) localVarPathParams.Add("templateConfigurationId", this.Configuration.ApiClient.ParameterToString(templateConfigurationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableTemplateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateConfigurationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateConfigurationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateConfigurationModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>Task of TemplateConfigurationModel</returns>
        public async System.Threading.Tasks.Task<TemplateConfigurationModel> DisableTemplateConfigurationAsync (string templateConfigurationId)
        {
             ApiResponse<TemplateConfigurationModel> localVarResponse = await DisableTemplateConfigurationAsyncWithHttpInfo(templateConfigurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>Task of ApiResponse (TemplateConfigurationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateConfigurationModel>> DisableTemplateConfigurationAsyncWithHttpInfo (string templateConfigurationId)
        {
            // verify the required parameter 'templateConfigurationId' is set
            if (templateConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'templateConfigurationId' when calling TemplateConfigurationApi->DisableTemplateConfiguration");

            var localVarPath = "/api/TemplateConfiguration/{templateConfigurationId}/disable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateConfigurationId != null) localVarPathParams.Add("templateConfigurationId", this.Configuration.ApiClient.ParameterToString(templateConfigurationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableTemplateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateConfigurationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateConfigurationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateConfigurationModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>TemplateConfigurationModel</returns>
        public TemplateConfigurationModel EnableTemplateConfiguration (string templateConfigurationId)
        {
             ApiResponse<TemplateConfigurationModel> localVarResponse = EnableTemplateConfigurationWithHttpInfo(templateConfigurationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>ApiResponse of TemplateConfigurationModel</returns>
        public ApiResponse< TemplateConfigurationModel > EnableTemplateConfigurationWithHttpInfo (string templateConfigurationId)
        {
            // verify the required parameter 'templateConfigurationId' is set
            if (templateConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'templateConfigurationId' when calling TemplateConfigurationApi->EnableTemplateConfiguration");

            var localVarPath = "/api/TemplateConfiguration/{templateConfigurationId}/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateConfigurationId != null) localVarPathParams.Add("templateConfigurationId", this.Configuration.ApiClient.ParameterToString(templateConfigurationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableTemplateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateConfigurationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateConfigurationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateConfigurationModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>Task of TemplateConfigurationModel</returns>
        public async System.Threading.Tasks.Task<TemplateConfigurationModel> EnableTemplateConfigurationAsync (string templateConfigurationId)
        {
             ApiResponse<TemplateConfigurationModel> localVarResponse = await EnableTemplateConfigurationAsyncWithHttpInfo(templateConfigurationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <returns>Task of ApiResponse (TemplateConfigurationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateConfigurationModel>> EnableTemplateConfigurationAsyncWithHttpInfo (string templateConfigurationId)
        {
            // verify the required parameter 'templateConfigurationId' is set
            if (templateConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'templateConfigurationId' when calling TemplateConfigurationApi->EnableTemplateConfiguration");

            var localVarPath = "/api/TemplateConfiguration/{templateConfigurationId}/enable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateConfigurationId != null) localVarPathParams.Add("templateConfigurationId", this.Configuration.ApiClient.ParameterToString(templateConfigurationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableTemplateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateConfigurationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateConfigurationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateConfigurationModel)));
        }

        /// <summary>
        /// Gets the available template configs 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>List&lt;TemplateConfigurationModel&gt;</returns>
        public List<TemplateConfigurationModel> GetAvailableTemplateConfigurations (string organizationId)
        {
             ApiResponse<List<TemplateConfigurationModel>> localVarResponse = GetAvailableTemplateConfigurationsWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the available template configs 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of List&lt;TemplateConfigurationModel&gt;</returns>
        public ApiResponse< List<TemplateConfigurationModel> > GetAvailableTemplateConfigurationsWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling TemplateConfigurationApi->GetAvailableTemplateConfigurations");

            var localVarPath = "/api/TemplateConfiguration/{organizationId}/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableTemplateConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TemplateConfigurationModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TemplateConfigurationModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TemplateConfigurationModel>)));
        }

        /// <summary>
        /// Gets the available template configs 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of List&lt;TemplateConfigurationModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TemplateConfigurationModel>> GetAvailableTemplateConfigurationsAsync (string organizationId)
        {
             ApiResponse<List<TemplateConfigurationModel>> localVarResponse = await GetAvailableTemplateConfigurationsAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the available template configs 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (List&lt;TemplateConfigurationModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TemplateConfigurationModel>>> GetAvailableTemplateConfigurationsAsyncWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling TemplateConfigurationApi->GetAvailableTemplateConfigurations");

            var localVarPath = "/api/TemplateConfiguration/{organizationId}/available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableTemplateConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TemplateConfigurationModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TemplateConfigurationModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TemplateConfigurationModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>List&lt;TemplateConfigurationModel&gt;</returns>
        public List<TemplateConfigurationModel> GetOrganizationTemplateConfigurations (string organizationId)
        {
             ApiResponse<List<TemplateConfigurationModel>> localVarResponse = GetOrganizationTemplateConfigurationsWithHttpInfo(organizationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>ApiResponse of List&lt;TemplateConfigurationModel&gt;</returns>
        public ApiResponse< List<TemplateConfigurationModel> > GetOrganizationTemplateConfigurationsWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling TemplateConfigurationApi->GetOrganizationTemplateConfigurations");

            var localVarPath = "/api/TemplateConfiguration/{organizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationTemplateConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TemplateConfigurationModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TemplateConfigurationModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TemplateConfigurationModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of List&lt;TemplateConfigurationModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<TemplateConfigurationModel>> GetOrganizationTemplateConfigurationsAsync (string organizationId)
        {
             ApiResponse<List<TemplateConfigurationModel>> localVarResponse = await GetOrganizationTemplateConfigurationsAsyncWithHttpInfo(organizationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationId"></param>
        /// <returns>Task of ApiResponse (List&lt;TemplateConfigurationModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TemplateConfigurationModel>>> GetOrganizationTemplateConfigurationsAsyncWithHttpInfo (string organizationId)
        {
            // verify the required parameter 'organizationId' is set
            if (organizationId == null)
                throw new ApiException(400, "Missing required parameter 'organizationId' when calling TemplateConfigurationApi->GetOrganizationTemplateConfigurations");

            var localVarPath = "/api/TemplateConfiguration/{organizationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationId != null) localVarPathParams.Add("organizationId", this.Configuration.ApiClient.ParameterToString(organizationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganizationTemplateConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TemplateConfigurationModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TemplateConfigurationModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TemplateConfigurationModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>TemplateConfigurationModel</returns>
        public TemplateConfigurationModel UpdateTemplateConfiguration (string templateConfigurationId, TemplateConfigurationModel model = null)
        {
             ApiResponse<TemplateConfigurationModel> localVarResponse = UpdateTemplateConfigurationWithHttpInfo(templateConfigurationId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of TemplateConfigurationModel</returns>
        public ApiResponse< TemplateConfigurationModel > UpdateTemplateConfigurationWithHttpInfo (string templateConfigurationId, TemplateConfigurationModel model = null)
        {
            // verify the required parameter 'templateConfigurationId' is set
            if (templateConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'templateConfigurationId' when calling TemplateConfigurationApi->UpdateTemplateConfiguration");

            var localVarPath = "/api/TemplateConfiguration/{templateConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateConfigurationId != null) localVarPathParams.Add("templateConfigurationId", this.Configuration.ApiClient.ParameterToString(templateConfigurationId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateConfigurationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateConfigurationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateConfigurationModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of TemplateConfigurationModel</returns>
        public async System.Threading.Tasks.Task<TemplateConfigurationModel> UpdateTemplateConfigurationAsync (string templateConfigurationId, TemplateConfigurationModel model = null)
        {
             ApiResponse<TemplateConfigurationModel> localVarResponse = await UpdateTemplateConfigurationAsyncWithHttpInfo(templateConfigurationId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateConfigurationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateConfigurationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateConfigurationModel>> UpdateTemplateConfigurationAsyncWithHttpInfo (string templateConfigurationId, TemplateConfigurationModel model = null)
        {
            // verify the required parameter 'templateConfigurationId' is set
            if (templateConfigurationId == null)
                throw new ApiException(400, "Missing required parameter 'templateConfigurationId' when calling TemplateConfigurationApi->UpdateTemplateConfiguration");

            var localVarPath = "/api/TemplateConfiguration/{templateConfigurationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateConfigurationId != null) localVarPathParams.Add("templateConfigurationId", this.Configuration.ApiClient.ParameterToString(templateConfigurationId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateConfiguration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateConfigurationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateConfigurationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateConfigurationModel)));
        }

    }
}
