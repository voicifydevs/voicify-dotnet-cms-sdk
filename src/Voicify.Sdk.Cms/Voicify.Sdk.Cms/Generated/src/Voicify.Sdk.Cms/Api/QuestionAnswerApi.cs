/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuestionAnswerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds an audio file to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>AnswerModel</returns>
        AnswerModel AddAudioFileImage (string answerMessageId, string mediaItemId);

        /// <summary>
        /// Adds an audio file to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of AnswerModel</returns>
        ApiResponse<AnswerModel> AddAudioFileImageWithHttpInfo (string answerMessageId, string mediaItemId);
        /// <summary>
        /// Adds a large image to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>AnswerModel</returns>
        AnswerModel AddLargeImage (string answerMessageId, string mediaItemId);

        /// <summary>
        /// Adds a large image to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of AnswerModel</returns>
        ApiResponse<AnswerModel> AddLargeImageWithHttpInfo (string answerMessageId, string mediaItemId);
        /// <summary>
        /// Adds required user phrases to a quesiton answer item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel AddOrUpdateRequiredPhrases (string contentItemId, RequiredPhrasesRequest request = null);

        /// <summary>
        /// Adds required user phrases to a quesiton answer item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> AddOrUpdateRequiredPhrasesWithHttpInfo (string contentItemId, RequiredPhrasesRequest request = null);
        /// <summary>
        /// Adds a small image to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>AnswerModel</returns>
        AnswerModel AddSmallImage (string answerMessageId, string mediaItemId);

        /// <summary>
        /// Adds a small image to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of AnswerModel</returns>
        ApiResponse<AnswerModel> AddSmallImageWithHttpInfo (string answerMessageId, string mediaItemId);
        /// <summary>
        /// Adds a video file to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>AnswerModel</returns>
        AnswerModel AddVideoFile (string answerMessageId, string mediaItemId);

        /// <summary>
        /// Adds a video file to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of AnswerModel</returns>
        ApiResponse<AnswerModel> AddVideoFileWithHttpInfo (string answerMessageId, string mediaItemId);
        /// <summary>
        /// Add a webhook to a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>QuestionAnswerWebhookModel</returns>
        QuestionAnswerWebhookModel AddWebhook (string questionAnswerId, string webhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// Add a webhook to a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerWebhookModel</returns>
        ApiResponse<QuestionAnswerWebhookModel> AddWebhookWithHttpInfo (string questionAnswerId, string webhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// Bulk updates the question answer and the internal variations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel BulkUpdate (string questionAnswerId, BulkQuestionAnswerUpdateRequest model = null);

        /// <summary>
        /// Bulk updates the question answer and the internal variations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> BulkUpdateWithHttpInfo (string questionAnswerId, BulkQuestionAnswerUpdateRequest model = null);
        /// <summary>
        /// Bulk updates the question answer and the internal variations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel BulkUpdateStub (string questionAnswerId, BulkQuestionAnswerUpdateStubRequest model = null);

        /// <summary>
        /// Bulk updates the question answer and the internal variations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> BulkUpdateStubWithHttpInfo (string questionAnswerId, BulkQuestionAnswerUpdateStubRequest model = null);
        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel CopyContentItem (string questionAnswerId);

        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> CopyContentItemWithHttpInfo (string questionAnswerId);
        /// <summary>
        /// Gets the content for the given application feature with skip/take
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>int?</returns>
        int? CountByApplicationFeature (string applicationFeatureId);

        /// <summary>
        /// Gets the content for the given application feature with skip/take
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> CountByApplicationFeatureWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Create a new FAQ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel Create (NewQuestionAnswerRequest model = null);

        /// <summary>
        /// Create a new FAQ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> CreateWithHttpInfo (NewQuestionAnswerRequest model = null);
        /// <summary>
        /// Add an answer to the FAQ set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>AnswerModel</returns>
        AnswerModel CreateAnswer (string questionAnswerId, CreateAnswerRequest model = null);

        /// <summary>
        /// Add an answer to the FAQ set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of AnswerModel</returns>
        ApiResponse<AnswerModel> CreateAnswerWithHttpInfo (string questionAnswerId, CreateAnswerRequest model = null);
        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel CreateFullContentItem (QuestionAnswerModel model = null);

        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> CreateFullContentItemWithHttpInfo (QuestionAnswerModel model = null);
        /// <summary>
        /// Add a question to the FAQ set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionModel</returns>
        QuestionModel CreateQuestion (string questionAnswerId, CreateQuestionRequest model = null);

        /// <summary>
        /// Add a question to the FAQ set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionModel</returns>
        ApiResponse<QuestionModel> CreateQuestionWithHttpInfo (string questionAnswerId, CreateQuestionRequest model = null);
        /// <summary>
        /// Create a new FAQ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel CreateStub (NewQuestionAnswerStubRequest model = null);

        /// <summary>
        /// Create a new FAQ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> CreateStubWithHttpInfo (NewQuestionAnswerStubRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? CreateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> CreateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);
        /// <summary>
        /// Delete an FAQ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel Delete (string questionAnswerId);

        /// <summary>
        /// Delete an FAQ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> DeleteWithHttpInfo (string questionAnswerId);
        /// <summary>
        /// Delete an answer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <returns>AnswerModel</returns>
        AnswerModel DeleteAnswer (string answerId);

        /// <summary>
        /// Delete an answer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <returns>ApiResponse of AnswerModel</returns>
        ApiResponse<AnswerModel> DeleteAnswerWithHttpInfo (string answerId);
        /// <summary>
        /// Delete a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <returns>QuestionModel</returns>
        QuestionModel DeleteQuestion (string questionId);

        /// <summary>
        /// Delete a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <returns>ApiResponse of QuestionModel</returns>
        ApiResponse<QuestionModel> DeleteQuestionWithHttpInfo (string questionId);
        /// <summary>
        /// Edit a given Answer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>AnswerModel</returns>
        AnswerModel EditAnswer (string answerId, UpdateAnswerRequest model = null);

        /// <summary>
        /// Edit a given Answer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of AnswerModel</returns>
        ApiResponse<AnswerModel> EditAnswerWithHttpInfo (string answerId, UpdateAnswerRequest model = null);
        /// <summary>
        /// Edit a given question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionModel</returns>
        QuestionModel EditQuestion (string questionId, UpdateQuestionRequest model = null);

        /// <summary>
        /// Edit a given question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionModel</returns>
        ApiResponse<QuestionModel> EditQuestionWithHttpInfo (string questionId, UpdateQuestionRequest model = null);
        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel FindFullById (string id);

        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> FindFullByIdWithHttpInfo (string id);
        /// <summary>
        /// Get an FAQ by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel Get (string questionAnswerId);

        /// <summary>
        /// Get an FAQ by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> GetWithHttpInfo (string questionAnswerId);
        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;QuestionAnswerModel&gt;</returns>
        List<QuestionAnswerModel> GetAllByApplicationFeature (string applicationFeatureId);

        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;QuestionAnswerModel&gt;</returns>
        ApiResponse<List<QuestionAnswerModel>> GetAllByApplicationFeatureWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Gets the content for the given application feature with skip/take
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="take"> (optional)</param>
        /// <returns>List&lt;QuestionAnswerModel&gt;</returns>
        List<QuestionAnswerModel> GetByApplicationFeature (string applicationFeatureId, string sortBy = null, int? skip = null, int? take = null);

        /// <summary>
        /// Gets the content for the given application feature with skip/take
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="take"> (optional)</param>
        /// <returns>ApiResponse of List&lt;QuestionAnswerModel&gt;</returns>
        ApiResponse<List<QuestionAnswerModel>> GetByApplicationFeatureWithHttpInfo (string applicationFeatureId, string sortBy = null, int? skip = null, int? take = null);
        /// <summary>
        /// Get the FAQs for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;QuestionAnswerModel&gt;</returns>
        List<QuestionAnswerModel> GetQuestionAnswersForApplication (string applicationId);

        /// <summary>
        /// Get the FAQs for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;QuestionAnswerModel&gt;</returns>
        ApiResponse<List<QuestionAnswerModel>> GetQuestionAnswersForApplicationWithHttpInfo (string applicationId);
        /// <summary>
        /// Get the webhooks associated with a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>List&lt;QuestionAnswerWebhookModel&gt;</returns>
        List<QuestionAnswerWebhookModel> GetWebhooks (string questionAnswerId);

        /// <summary>
        /// Get the webhooks associated with a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>ApiResponse of List&lt;QuestionAnswerWebhookModel&gt;</returns>
        ApiResponse<List<QuestionAnswerWebhookModel>> GetWebhooksWithHttpInfo (string questionAnswerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel MoveContentItemToApplicationFeature (string contentItemId, string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> MoveContentItemToApplicationFeatureWithHttpInfo (string contentItemId, string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>bool?</returns>
        bool? RemoveUserDefinedParameter (string instanceWebhookId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> RemoveUserDefinedParameterWithHttpInfo (string instanceWebhookId, string parameterName);
        /// <summary>
        /// Delete a webhook from a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerWebhookId"></param>
        /// <returns>QuestionAnswerWebhookModel</returns>
        QuestionAnswerWebhookModel RemoveWebhook (string questionAnswerWebhookId);

        /// <summary>
        /// Delete a webhook from a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerWebhookId"></param>
        /// <returns>ApiResponse of QuestionAnswerWebhookModel</returns>
        ApiResponse<QuestionAnswerWebhookModel> RemoveWebhookWithHttpInfo (string questionAnswerWebhookId);
        /// <summary>
        /// Toggles whether the given FAQ is live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel ToggleIsLive (string questionAnswerId, ToggleLiveRequest model = null);

        /// <summary>
        /// Toggles whether the given FAQ is live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> ToggleIsLiveWithHttpInfo (string questionAnswerId, ToggleLiveRequest model = null);
        /// <summary>
        /// Update a webhook on a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>QuestionAnswerWebhookModel</returns>
        QuestionAnswerWebhookModel UpdateAttachedWebhook (string questionAnswerId, string instanceWebhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// Update a webhook on a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerWebhookModel</returns>
        ApiResponse<QuestionAnswerWebhookModel> UpdateAttachedWebhookWithHttpInfo (string questionAnswerId, string instanceWebhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        QuestionAnswerModel UpdateFullContentItem (string contentItemId, QuestionAnswerModel model = null);

        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        ApiResponse<QuestionAnswerModel> UpdateFullContentItemWithHttpInfo (string contentItemId, QuestionAnswerModel model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? UpdateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UpdateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        bool? UpdateWebhookParameter (string instanceWebhookId, WebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> UpdateWebhookParameterWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds an audio file to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of AnswerModel</returns>
        System.Threading.Tasks.Task<AnswerModel> AddAudioFileImageAsync (string answerMessageId, string mediaItemId);

        /// <summary>
        /// Adds an audio file to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnswerModel>> AddAudioFileImageAsyncWithHttpInfo (string answerMessageId, string mediaItemId);
        /// <summary>
        /// Adds a large image to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of AnswerModel</returns>
        System.Threading.Tasks.Task<AnswerModel> AddLargeImageAsync (string answerMessageId, string mediaItemId);

        /// <summary>
        /// Adds a large image to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnswerModel>> AddLargeImageAsyncWithHttpInfo (string answerMessageId, string mediaItemId);
        /// <summary>
        /// Adds required user phrases to a quesiton answer item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> AddOrUpdateRequiredPhrasesAsync (string contentItemId, RequiredPhrasesRequest request = null);

        /// <summary>
        /// Adds required user phrases to a quesiton answer item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> AddOrUpdateRequiredPhrasesAsyncWithHttpInfo (string contentItemId, RequiredPhrasesRequest request = null);
        /// <summary>
        /// Adds a small image to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of AnswerModel</returns>
        System.Threading.Tasks.Task<AnswerModel> AddSmallImageAsync (string answerMessageId, string mediaItemId);

        /// <summary>
        /// Adds a small image to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnswerModel>> AddSmallImageAsyncWithHttpInfo (string answerMessageId, string mediaItemId);
        /// <summary>
        /// Adds a video file to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of AnswerModel</returns>
        System.Threading.Tasks.Task<AnswerModel> AddVideoFileAsync (string answerMessageId, string mediaItemId);

        /// <summary>
        /// Adds a video file to the answer message
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnswerModel>> AddVideoFileAsyncWithHttpInfo (string answerMessageId, string mediaItemId);
        /// <summary>
        /// Add a webhook to a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of QuestionAnswerWebhookModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerWebhookModel> AddWebhookAsync (string questionAnswerId, string webhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// Add a webhook to a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerWebhookModel>> AddWebhookAsyncWithHttpInfo (string questionAnswerId, string webhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// Bulk updates the question answer and the internal variations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> BulkUpdateAsync (string questionAnswerId, BulkQuestionAnswerUpdateRequest model = null);

        /// <summary>
        /// Bulk updates the question answer and the internal variations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> BulkUpdateAsyncWithHttpInfo (string questionAnswerId, BulkQuestionAnswerUpdateRequest model = null);
        /// <summary>
        /// Bulk updates the question answer and the internal variations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> BulkUpdateStubAsync (string questionAnswerId, BulkQuestionAnswerUpdateStubRequest model = null);

        /// <summary>
        /// Bulk updates the question answer and the internal variations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> BulkUpdateStubAsyncWithHttpInfo (string questionAnswerId, BulkQuestionAnswerUpdateStubRequest model = null);
        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> CopyContentItemAsync (string questionAnswerId);

        /// <summary>
        /// Copies the content item in the same application and feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> CopyContentItemAsyncWithHttpInfo (string questionAnswerId);
        /// <summary>
        /// Gets the content for the given application feature with skip/take
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> CountByApplicationFeatureAsync (string applicationFeatureId);

        /// <summary>
        /// Gets the content for the given application feature with skip/take
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> CountByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Create a new FAQ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> CreateAsync (NewQuestionAnswerRequest model = null);

        /// <summary>
        /// Create a new FAQ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> CreateAsyncWithHttpInfo (NewQuestionAnswerRequest model = null);
        /// <summary>
        /// Add an answer to the FAQ set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of AnswerModel</returns>
        System.Threading.Tasks.Task<AnswerModel> CreateAnswerAsync (string questionAnswerId, CreateAnswerRequest model = null);

        /// <summary>
        /// Add an answer to the FAQ set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnswerModel>> CreateAnswerAsyncWithHttpInfo (string questionAnswerId, CreateAnswerRequest model = null);
        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> CreateFullContentItemAsync (QuestionAnswerModel model = null);

        /// <summary>
        /// Creates a new content item entity from a dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> CreateFullContentItemAsyncWithHttpInfo (QuestionAnswerModel model = null);
        /// <summary>
        /// Add a question to the FAQ set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionModel</returns>
        System.Threading.Tasks.Task<QuestionModel> CreateQuestionAsync (string questionAnswerId, CreateQuestionRequest model = null);

        /// <summary>
        /// Add a question to the FAQ set
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionModel>> CreateQuestionAsyncWithHttpInfo (string questionAnswerId, CreateQuestionRequest model = null);
        /// <summary>
        /// Create a new FAQ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> CreateStubAsync (NewQuestionAnswerStubRequest model = null);

        /// <summary>
        /// Create a new FAQ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> CreateStubAsyncWithHttpInfo (NewQuestionAnswerStubRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> CreateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> CreateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null);
        /// <summary>
        /// Delete an FAQ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> DeleteAsync (string questionAnswerId);

        /// <summary>
        /// Delete an FAQ
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> DeleteAsyncWithHttpInfo (string questionAnswerId);
        /// <summary>
        /// Delete an answer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <returns>Task of AnswerModel</returns>
        System.Threading.Tasks.Task<AnswerModel> DeleteAnswerAsync (string answerId);

        /// <summary>
        /// Delete an answer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnswerModel>> DeleteAnswerAsyncWithHttpInfo (string answerId);
        /// <summary>
        /// Delete a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <returns>Task of QuestionModel</returns>
        System.Threading.Tasks.Task<QuestionModel> DeleteQuestionAsync (string questionId);

        /// <summary>
        /// Delete a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <returns>Task of ApiResponse (QuestionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionModel>> DeleteQuestionAsyncWithHttpInfo (string questionId);
        /// <summary>
        /// Edit a given Answer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of AnswerModel</returns>
        System.Threading.Tasks.Task<AnswerModel> EditAnswerAsync (string answerId, UpdateAnswerRequest model = null);

        /// <summary>
        /// Edit a given Answer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnswerModel>> EditAnswerAsyncWithHttpInfo (string answerId, UpdateAnswerRequest model = null);
        /// <summary>
        /// Edit a given question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionModel</returns>
        System.Threading.Tasks.Task<QuestionModel> EditQuestionAsync (string questionId, UpdateQuestionRequest model = null);

        /// <summary>
        /// Edit a given question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionModel>> EditQuestionAsyncWithHttpInfo (string questionId, UpdateQuestionRequest model = null);
        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> FindFullByIdAsync (string id);

        /// <summary>
        /// Finds the full content item by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> FindFullByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get an FAQ by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> GetAsync (string questionAnswerId);

        /// <summary>
        /// Get an FAQ by its ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> GetAsyncWithHttpInfo (string questionAnswerId);
        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;QuestionAnswerModel&gt;</returns>
        System.Threading.Tasks.Task<List<QuestionAnswerModel>> GetAllByApplicationFeatureAsync (string applicationFeatureId);

        /// <summary>
        /// Gets the content for the given application feature
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;QuestionAnswerModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuestionAnswerModel>>> GetAllByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId);
        /// <summary>
        /// Gets the content for the given application feature with skip/take
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="take"> (optional)</param>
        /// <returns>Task of List&lt;QuestionAnswerModel&gt;</returns>
        System.Threading.Tasks.Task<List<QuestionAnswerModel>> GetByApplicationFeatureAsync (string applicationFeatureId, string sortBy = null, int? skip = null, int? take = null);

        /// <summary>
        /// Gets the content for the given application feature with skip/take
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="take"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;QuestionAnswerModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuestionAnswerModel>>> GetByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId, string sortBy = null, int? skip = null, int? take = null);
        /// <summary>
        /// Get the FAQs for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;QuestionAnswerModel&gt;</returns>
        System.Threading.Tasks.Task<List<QuestionAnswerModel>> GetQuestionAnswersForApplicationAsync (string applicationId);

        /// <summary>
        /// Get the FAQs for a given application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;QuestionAnswerModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuestionAnswerModel>>> GetQuestionAnswersForApplicationAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// Get the webhooks associated with a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of List&lt;QuestionAnswerWebhookModel&gt;</returns>
        System.Threading.Tasks.Task<List<QuestionAnswerWebhookModel>> GetWebhooksAsync (string questionAnswerId);

        /// <summary>
        /// Get the webhooks associated with a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of ApiResponse (List&lt;QuestionAnswerWebhookModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QuestionAnswerWebhookModel>>> GetWebhooksAsyncWithHttpInfo (string questionAnswerId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> MoveContentItemToApplicationFeatureAsync (string contentItemId, string applicationFeatureId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> MoveContentItemToApplicationFeatureAsyncWithHttpInfo (string contentItemId, string applicationFeatureId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> RemoveUserDefinedParameterAsync (string instanceWebhookId, string parameterName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> RemoveUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, string parameterName);
        /// <summary>
        /// Delete a webhook from a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerWebhookId"></param>
        /// <returns>Task of QuestionAnswerWebhookModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerWebhookModel> RemoveWebhookAsync (string questionAnswerWebhookId);

        /// <summary>
        /// Delete a webhook from a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerWebhookId"></param>
        /// <returns>Task of ApiResponse (QuestionAnswerWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerWebhookModel>> RemoveWebhookAsyncWithHttpInfo (string questionAnswerWebhookId);
        /// <summary>
        /// Toggles whether the given FAQ is live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> ToggleIsLiveAsync (string questionAnswerId, ToggleLiveRequest model = null);

        /// <summary>
        /// Toggles whether the given FAQ is live or not
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> ToggleIsLiveAsyncWithHttpInfo (string questionAnswerId, ToggleLiveRequest model = null);
        /// <summary>
        /// Update a webhook on a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of QuestionAnswerWebhookModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerWebhookModel> UpdateAttachedWebhookAsync (string questionAnswerId, string instanceWebhookId, WebhookParametersRequest parameters = null);

        /// <summary>
        /// Update a webhook on a question answer item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerWebhookModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerWebhookModel>> UpdateAttachedWebhookAsyncWithHttpInfo (string questionAnswerId, string instanceWebhookId, WebhookParametersRequest parameters = null);
        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        System.Threading.Tasks.Task<QuestionAnswerModel> UpdateFullContentItemAsync (string contentItemId, QuestionAnswerModel model = null);

        /// <summary>
        /// Updates the content item from a specified dto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> UpdateFullContentItemAsyncWithHttpInfo (string contentItemId, QuestionAnswerModel model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UpdateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> UpdateWebhookParameterAsync (string instanceWebhookId, WebhookParameterUpdateRequest request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateWebhookParameterAsyncWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuestionAnswerApi : IQuestionAnswerApi
    {
        private Voicify.Sdk.Cms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionAnswerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuestionAnswerApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Cms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuestionAnswerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QuestionAnswerApi(Voicify.Sdk.Cms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Cms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Cms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Cms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds an audio file to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>AnswerModel</returns>
        public AnswerModel AddAudioFileImage (string answerMessageId, string mediaItemId)
        {
             ApiResponse<AnswerModel> localVarResponse = AddAudioFileImageWithHttpInfo(answerMessageId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an audio file to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of AnswerModel</returns>
        public ApiResponse< AnswerModel > AddAudioFileImageWithHttpInfo (string answerMessageId, string mediaItemId)
        {
            // verify the required parameter 'answerMessageId' is set
            if (answerMessageId == null)
                throw new ApiException(400, "Missing required parameter 'answerMessageId' when calling QuestionAnswerApi->AddAudioFileImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling QuestionAnswerApi->AddAudioFileImage");

            var localVarPath = "/api/QuestionAnswer/{answerMessageId}/addAudioFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerMessageId != null) localVarPathParams.Add("answerMessageId", this.Configuration.ApiClient.ParameterToString(answerMessageId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAudioFileImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Adds an audio file to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of AnswerModel</returns>
        public async System.Threading.Tasks.Task<AnswerModel> AddAudioFileImageAsync (string answerMessageId, string mediaItemId)
        {
             ApiResponse<AnswerModel> localVarResponse = await AddAudioFileImageAsyncWithHttpInfo(answerMessageId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an audio file to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnswerModel>> AddAudioFileImageAsyncWithHttpInfo (string answerMessageId, string mediaItemId)
        {
            // verify the required parameter 'answerMessageId' is set
            if (answerMessageId == null)
                throw new ApiException(400, "Missing required parameter 'answerMessageId' when calling QuestionAnswerApi->AddAudioFileImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling QuestionAnswerApi->AddAudioFileImage");

            var localVarPath = "/api/QuestionAnswer/{answerMessageId}/addAudioFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerMessageId != null) localVarPathParams.Add("answerMessageId", this.Configuration.ApiClient.ParameterToString(answerMessageId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAudioFileImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Adds a large image to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>AnswerModel</returns>
        public AnswerModel AddLargeImage (string answerMessageId, string mediaItemId)
        {
             ApiResponse<AnswerModel> localVarResponse = AddLargeImageWithHttpInfo(answerMessageId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a large image to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of AnswerModel</returns>
        public ApiResponse< AnswerModel > AddLargeImageWithHttpInfo (string answerMessageId, string mediaItemId)
        {
            // verify the required parameter 'answerMessageId' is set
            if (answerMessageId == null)
                throw new ApiException(400, "Missing required parameter 'answerMessageId' when calling QuestionAnswerApi->AddLargeImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling QuestionAnswerApi->AddLargeImage");

            var localVarPath = "/api/QuestionAnswer/{answerMessageId}/addLargeImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerMessageId != null) localVarPathParams.Add("answerMessageId", this.Configuration.ApiClient.ParameterToString(answerMessageId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLargeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Adds a large image to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of AnswerModel</returns>
        public async System.Threading.Tasks.Task<AnswerModel> AddLargeImageAsync (string answerMessageId, string mediaItemId)
        {
             ApiResponse<AnswerModel> localVarResponse = await AddLargeImageAsyncWithHttpInfo(answerMessageId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a large image to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnswerModel>> AddLargeImageAsyncWithHttpInfo (string answerMessageId, string mediaItemId)
        {
            // verify the required parameter 'answerMessageId' is set
            if (answerMessageId == null)
                throw new ApiException(400, "Missing required parameter 'answerMessageId' when calling QuestionAnswerApi->AddLargeImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling QuestionAnswerApi->AddLargeImage");

            var localVarPath = "/api/QuestionAnswer/{answerMessageId}/addLargeImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerMessageId != null) localVarPathParams.Add("answerMessageId", this.Configuration.ApiClient.ParameterToString(answerMessageId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLargeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Adds required user phrases to a quesiton answer item. 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel AddOrUpdateRequiredPhrases (string contentItemId, RequiredPhrasesRequest request = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = AddOrUpdateRequiredPhrasesWithHttpInfo(contentItemId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds required user phrases to a quesiton answer item. 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > AddOrUpdateRequiredPhrasesWithHttpInfo (string contentItemId, RequiredPhrasesRequest request = null)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling QuestionAnswerApi->AddOrUpdateRequiredPhrases");

            var localVarPath = "/api/QuestionAnswer/{contentItemId}/RequiredPhrases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrUpdateRequiredPhrases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Adds required user phrases to a quesiton answer item. 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> AddOrUpdateRequiredPhrasesAsync (string contentItemId, RequiredPhrasesRequest request = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await AddOrUpdateRequiredPhrasesAsyncWithHttpInfo(contentItemId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds required user phrases to a quesiton answer item. 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> AddOrUpdateRequiredPhrasesAsyncWithHttpInfo (string contentItemId, RequiredPhrasesRequest request = null)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling QuestionAnswerApi->AddOrUpdateRequiredPhrases");

            var localVarPath = "/api/QuestionAnswer/{contentItemId}/RequiredPhrases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddOrUpdateRequiredPhrases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Adds a small image to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>AnswerModel</returns>
        public AnswerModel AddSmallImage (string answerMessageId, string mediaItemId)
        {
             ApiResponse<AnswerModel> localVarResponse = AddSmallImageWithHttpInfo(answerMessageId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a small image to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of AnswerModel</returns>
        public ApiResponse< AnswerModel > AddSmallImageWithHttpInfo (string answerMessageId, string mediaItemId)
        {
            // verify the required parameter 'answerMessageId' is set
            if (answerMessageId == null)
                throw new ApiException(400, "Missing required parameter 'answerMessageId' when calling QuestionAnswerApi->AddSmallImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling QuestionAnswerApi->AddSmallImage");

            var localVarPath = "/api/QuestionAnswer/{answerMessageId}/addSmallImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerMessageId != null) localVarPathParams.Add("answerMessageId", this.Configuration.ApiClient.ParameterToString(answerMessageId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSmallImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Adds a small image to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of AnswerModel</returns>
        public async System.Threading.Tasks.Task<AnswerModel> AddSmallImageAsync (string answerMessageId, string mediaItemId)
        {
             ApiResponse<AnswerModel> localVarResponse = await AddSmallImageAsyncWithHttpInfo(answerMessageId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a small image to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnswerModel>> AddSmallImageAsyncWithHttpInfo (string answerMessageId, string mediaItemId)
        {
            // verify the required parameter 'answerMessageId' is set
            if (answerMessageId == null)
                throw new ApiException(400, "Missing required parameter 'answerMessageId' when calling QuestionAnswerApi->AddSmallImage");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling QuestionAnswerApi->AddSmallImage");

            var localVarPath = "/api/QuestionAnswer/{answerMessageId}/addSmallImage/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerMessageId != null) localVarPathParams.Add("answerMessageId", this.Configuration.ApiClient.ParameterToString(answerMessageId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSmallImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Adds a video file to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>AnswerModel</returns>
        public AnswerModel AddVideoFile (string answerMessageId, string mediaItemId)
        {
             ApiResponse<AnswerModel> localVarResponse = AddVideoFileWithHttpInfo(answerMessageId, mediaItemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a video file to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>ApiResponse of AnswerModel</returns>
        public ApiResponse< AnswerModel > AddVideoFileWithHttpInfo (string answerMessageId, string mediaItemId)
        {
            // verify the required parameter 'answerMessageId' is set
            if (answerMessageId == null)
                throw new ApiException(400, "Missing required parameter 'answerMessageId' when calling QuestionAnswerApi->AddVideoFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling QuestionAnswerApi->AddVideoFile");

            var localVarPath = "/api/QuestionAnswer/{answerMessageId}/addVideoFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerMessageId != null) localVarPathParams.Add("answerMessageId", this.Configuration.ApiClient.ParameterToString(answerMessageId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVideoFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Adds a video file to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of AnswerModel</returns>
        public async System.Threading.Tasks.Task<AnswerModel> AddVideoFileAsync (string answerMessageId, string mediaItemId)
        {
             ApiResponse<AnswerModel> localVarResponse = await AddVideoFileAsyncWithHttpInfo(answerMessageId, mediaItemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a video file to the answer message 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerMessageId"></param>
        /// <param name="mediaItemId"></param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnswerModel>> AddVideoFileAsyncWithHttpInfo (string answerMessageId, string mediaItemId)
        {
            // verify the required parameter 'answerMessageId' is set
            if (answerMessageId == null)
                throw new ApiException(400, "Missing required parameter 'answerMessageId' when calling QuestionAnswerApi->AddVideoFile");
            // verify the required parameter 'mediaItemId' is set
            if (mediaItemId == null)
                throw new ApiException(400, "Missing required parameter 'mediaItemId' when calling QuestionAnswerApi->AddVideoFile");

            var localVarPath = "/api/QuestionAnswer/{answerMessageId}/addVideoFile/{mediaItemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerMessageId != null) localVarPathParams.Add("answerMessageId", this.Configuration.ApiClient.ParameterToString(answerMessageId)); // path parameter
            if (mediaItemId != null) localVarPathParams.Add("mediaItemId", this.Configuration.ApiClient.ParameterToString(mediaItemId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVideoFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Add a webhook to a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>QuestionAnswerWebhookModel</returns>
        public QuestionAnswerWebhookModel AddWebhook (string questionAnswerId, string webhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<QuestionAnswerWebhookModel> localVarResponse = AddWebhookWithHttpInfo(questionAnswerId, webhookId, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a webhook to a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerWebhookModel</returns>
        public ApiResponse< QuestionAnswerWebhookModel > AddWebhookWithHttpInfo (string questionAnswerId, string webhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->AddWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling QuestionAnswerApi->AddWebhook");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerWebhookModel)));
        }

        /// <summary>
        /// Add a webhook to a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of QuestionAnswerWebhookModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerWebhookModel> AddWebhookAsync (string questionAnswerId, string webhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<QuestionAnswerWebhookModel> localVarResponse = await AddWebhookAsyncWithHttpInfo(questionAnswerId, webhookId, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a webhook to a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="webhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerWebhookModel>> AddWebhookAsyncWithHttpInfo (string questionAnswerId, string webhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->AddWebhook");
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling QuestionAnswerApi->AddWebhook");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerWebhookModel)));
        }

        /// <summary>
        /// Bulk updates the question answer and the internal variations 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel BulkUpdate (string questionAnswerId, BulkQuestionAnswerUpdateRequest model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = BulkUpdateWithHttpInfo(questionAnswerId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk updates the question answer and the internal variations 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > BulkUpdateWithHttpInfo (string questionAnswerId, BulkQuestionAnswerUpdateRequest model = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->BulkUpdate");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/bulkUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Bulk updates the question answer and the internal variations 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> BulkUpdateAsync (string questionAnswerId, BulkQuestionAnswerUpdateRequest model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await BulkUpdateAsyncWithHttpInfo(questionAnswerId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk updates the question answer and the internal variations 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> BulkUpdateAsyncWithHttpInfo (string questionAnswerId, BulkQuestionAnswerUpdateRequest model = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->BulkUpdate");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/bulkUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Bulk updates the question answer and the internal variations 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel BulkUpdateStub (string questionAnswerId, BulkQuestionAnswerUpdateStubRequest model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = BulkUpdateStubWithHttpInfo(questionAnswerId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk updates the question answer and the internal variations 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > BulkUpdateStubWithHttpInfo (string questionAnswerId, BulkQuestionAnswerUpdateStubRequest model = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->BulkUpdateStub");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/bulkUpdate/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Bulk updates the question answer and the internal variations 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> BulkUpdateStubAsync (string questionAnswerId, BulkQuestionAnswerUpdateStubRequest model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await BulkUpdateStubAsyncWithHttpInfo(questionAnswerId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk updates the question answer and the internal variations 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> BulkUpdateStubAsyncWithHttpInfo (string questionAnswerId, BulkQuestionAnswerUpdateStubRequest model = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->BulkUpdateStub");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/bulkUpdate/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel CopyContentItem (string questionAnswerId)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = CopyContentItemWithHttpInfo(questionAnswerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > CopyContentItemWithHttpInfo (string questionAnswerId)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->CopyContentItem");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> CopyContentItemAsync (string questionAnswerId)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await CopyContentItemAsyncWithHttpInfo(questionAnswerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies the content item in the same application and feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> CopyContentItemAsyncWithHttpInfo (string questionAnswerId)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->CopyContentItem");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Gets the content for the given application feature with skip/take 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>int?</returns>
        public int? CountByApplicationFeature (string applicationFeatureId)
        {
             ApiResponse<int?> localVarResponse = CountByApplicationFeatureWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the content for the given application feature with skip/take 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > CountByApplicationFeatureWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling QuestionAnswerApi->CountByApplicationFeature");

            var localVarPath = "/api/QuestionAnswer/byFeature/{applicationFeatureId}/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Gets the content for the given application feature with skip/take 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> CountByApplicationFeatureAsync (string applicationFeatureId)
        {
             ApiResponse<int?> localVarResponse = await CountByApplicationFeatureAsyncWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the content for the given application feature with skip/take 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> CountByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling QuestionAnswerApi->CountByApplicationFeature");

            var localVarPath = "/api/QuestionAnswer/byFeature/{applicationFeatureId}/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        /// Create a new FAQ 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel Create (NewQuestionAnswerRequest model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = CreateWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new FAQ 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > CreateWithHttpInfo (NewQuestionAnswerRequest model = null)
        {

            var localVarPath = "/api/QuestionAnswer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Create a new FAQ 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> CreateAsync (NewQuestionAnswerRequest model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await CreateAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new FAQ 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> CreateAsyncWithHttpInfo (NewQuestionAnswerRequest model = null)
        {

            var localVarPath = "/api/QuestionAnswer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Add an answer to the FAQ set 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>AnswerModel</returns>
        public AnswerModel CreateAnswer (string questionAnswerId, CreateAnswerRequest model = null)
        {
             ApiResponse<AnswerModel> localVarResponse = CreateAnswerWithHttpInfo(questionAnswerId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an answer to the FAQ set 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of AnswerModel</returns>
        public ApiResponse< AnswerModel > CreateAnswerWithHttpInfo (string questionAnswerId, CreateAnswerRequest model = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->CreateAnswer");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/Answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnswer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Add an answer to the FAQ set 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of AnswerModel</returns>
        public async System.Threading.Tasks.Task<AnswerModel> CreateAnswerAsync (string questionAnswerId, CreateAnswerRequest model = null)
        {
             ApiResponse<AnswerModel> localVarResponse = await CreateAnswerAsyncWithHttpInfo(questionAnswerId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an answer to the FAQ set 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnswerModel>> CreateAnswerAsyncWithHttpInfo (string questionAnswerId, CreateAnswerRequest model = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->CreateAnswer");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/Answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnswer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel CreateFullContentItem (QuestionAnswerModel model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = CreateFullContentItemWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > CreateFullContentItemWithHttpInfo (QuestionAnswerModel model = null)
        {

            var localVarPath = "/api/QuestionAnswer/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> CreateFullContentItemAsync (QuestionAnswerModel model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await CreateFullContentItemAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new content item entity from a dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> CreateFullContentItemAsyncWithHttpInfo (QuestionAnswerModel model = null)
        {

            var localVarPath = "/api/QuestionAnswer/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Add a question to the FAQ set 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionModel</returns>
        public QuestionModel CreateQuestion (string questionAnswerId, CreateQuestionRequest model = null)
        {
             ApiResponse<QuestionModel> localVarResponse = CreateQuestionWithHttpInfo(questionAnswerId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a question to the FAQ set 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionModel</returns>
        public ApiResponse< QuestionModel > CreateQuestionWithHttpInfo (string questionAnswerId, CreateQuestionRequest model = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->CreateQuestion");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/Question";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuestion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionModel)));
        }

        /// <summary>
        /// Add a question to the FAQ set 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionModel</returns>
        public async System.Threading.Tasks.Task<QuestionModel> CreateQuestionAsync (string questionAnswerId, CreateQuestionRequest model = null)
        {
             ApiResponse<QuestionModel> localVarResponse = await CreateQuestionAsyncWithHttpInfo(questionAnswerId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a question to the FAQ set 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionModel>> CreateQuestionAsyncWithHttpInfo (string questionAnswerId, CreateQuestionRequest model = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->CreateQuestion");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/Question";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuestion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionModel)));
        }

        /// <summary>
        /// Create a new FAQ 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel CreateStub (NewQuestionAnswerStubRequest model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = CreateStubWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new FAQ 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > CreateStubWithHttpInfo (NewQuestionAnswerStubRequest model = null)
        {

            var localVarPath = "/api/QuestionAnswer/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Create a new FAQ 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> CreateStubAsync (NewQuestionAnswerStubRequest model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await CreateStubAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new FAQ 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Initial question and answer (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> CreateStubAsyncWithHttpInfo (NewQuestionAnswerStubRequest model = null)
        {

            var localVarPath = "/api/QuestionAnswer/stub";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateStub", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? CreateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = CreateUserDefinedParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > CreateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling QuestionAnswerApi->CreateUserDefinedParameter");

            var localVarPath = "/api/QuestionAnswer/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> CreateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await CreateUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> CreateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterCreateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling QuestionAnswerApi->CreateUserDefinedParameter");

            var localVarPath = "/api/QuestionAnswer/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Delete an FAQ 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel Delete (string questionAnswerId)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = DeleteWithHttpInfo(questionAnswerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an FAQ 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > DeleteWithHttpInfo (string questionAnswerId)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->Delete");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Delete an FAQ 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> DeleteAsync (string questionAnswerId)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await DeleteAsyncWithHttpInfo(questionAnswerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an FAQ 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> DeleteAsyncWithHttpInfo (string questionAnswerId)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->Delete");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Delete an answer 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <returns>AnswerModel</returns>
        public AnswerModel DeleteAnswer (string answerId)
        {
             ApiResponse<AnswerModel> localVarResponse = DeleteAnswerWithHttpInfo(answerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an answer 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <returns>ApiResponse of AnswerModel</returns>
        public ApiResponse< AnswerModel > DeleteAnswerWithHttpInfo (string answerId)
        {
            // verify the required parameter 'answerId' is set
            if (answerId == null)
                throw new ApiException(400, "Missing required parameter 'answerId' when calling QuestionAnswerApi->DeleteAnswer");

            var localVarPath = "/api/QuestionAnswer/answer/{answerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerId != null) localVarPathParams.Add("answerId", this.Configuration.ApiClient.ParameterToString(answerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAnswer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Delete an answer 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <returns>Task of AnswerModel</returns>
        public async System.Threading.Tasks.Task<AnswerModel> DeleteAnswerAsync (string answerId)
        {
             ApiResponse<AnswerModel> localVarResponse = await DeleteAnswerAsyncWithHttpInfo(answerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an answer 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnswerModel>> DeleteAnswerAsyncWithHttpInfo (string answerId)
        {
            // verify the required parameter 'answerId' is set
            if (answerId == null)
                throw new ApiException(400, "Missing required parameter 'answerId' when calling QuestionAnswerApi->DeleteAnswer");

            var localVarPath = "/api/QuestionAnswer/answer/{answerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerId != null) localVarPathParams.Add("answerId", this.Configuration.ApiClient.ParameterToString(answerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAnswer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Delete a question 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <returns>QuestionModel</returns>
        public QuestionModel DeleteQuestion (string questionId)
        {
             ApiResponse<QuestionModel> localVarResponse = DeleteQuestionWithHttpInfo(questionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a question 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <returns>ApiResponse of QuestionModel</returns>
        public ApiResponse< QuestionModel > DeleteQuestionWithHttpInfo (string questionId)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling QuestionAnswerApi->DeleteQuestion");

            var localVarPath = "/api/QuestionAnswer/question/{questionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionId != null) localVarPathParams.Add("questionId", this.Configuration.ApiClient.ParameterToString(questionId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionModel)));
        }

        /// <summary>
        /// Delete a question 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <returns>Task of QuestionModel</returns>
        public async System.Threading.Tasks.Task<QuestionModel> DeleteQuestionAsync (string questionId)
        {
             ApiResponse<QuestionModel> localVarResponse = await DeleteQuestionAsyncWithHttpInfo(questionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a question 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <returns>Task of ApiResponse (QuestionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionModel>> DeleteQuestionAsyncWithHttpInfo (string questionId)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling QuestionAnswerApi->DeleteQuestion");

            var localVarPath = "/api/QuestionAnswer/question/{questionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionId != null) localVarPathParams.Add("questionId", this.Configuration.ApiClient.ParameterToString(questionId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionModel)));
        }

        /// <summary>
        /// Edit a given Answer 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>AnswerModel</returns>
        public AnswerModel EditAnswer (string answerId, UpdateAnswerRequest model = null)
        {
             ApiResponse<AnswerModel> localVarResponse = EditAnswerWithHttpInfo(answerId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a given Answer 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of AnswerModel</returns>
        public ApiResponse< AnswerModel > EditAnswerWithHttpInfo (string answerId, UpdateAnswerRequest model = null)
        {
            // verify the required parameter 'answerId' is set
            if (answerId == null)
                throw new ApiException(400, "Missing required parameter 'answerId' when calling QuestionAnswerApi->EditAnswer");

            var localVarPath = "/api/QuestionAnswer/Answer/{answerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerId != null) localVarPathParams.Add("answerId", this.Configuration.ApiClient.ParameterToString(answerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditAnswer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Edit a given Answer 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of AnswerModel</returns>
        public async System.Threading.Tasks.Task<AnswerModel> EditAnswerAsync (string answerId, UpdateAnswerRequest model = null)
        {
             ApiResponse<AnswerModel> localVarResponse = await EditAnswerAsyncWithHttpInfo(answerId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a given Answer 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="answerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (AnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnswerModel>> EditAnswerAsyncWithHttpInfo (string answerId, UpdateAnswerRequest model = null)
        {
            // verify the required parameter 'answerId' is set
            if (answerId == null)
                throw new ApiException(400, "Missing required parameter 'answerId' when calling QuestionAnswerApi->EditAnswer");

            var localVarPath = "/api/QuestionAnswer/Answer/{answerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (answerId != null) localVarPathParams.Add("answerId", this.Configuration.ApiClient.ParameterToString(answerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditAnswer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerModel)));
        }

        /// <summary>
        /// Edit a given question 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionModel</returns>
        public QuestionModel EditQuestion (string questionId, UpdateQuestionRequest model = null)
        {
             ApiResponse<QuestionModel> localVarResponse = EditQuestionWithHttpInfo(questionId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a given question 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionModel</returns>
        public ApiResponse< QuestionModel > EditQuestionWithHttpInfo (string questionId, UpdateQuestionRequest model = null)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling QuestionAnswerApi->EditQuestion");

            var localVarPath = "/api/QuestionAnswer/Question/{questionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionId != null) localVarPathParams.Add("questionId", this.Configuration.ApiClient.ParameterToString(questionId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditQuestion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionModel)));
        }

        /// <summary>
        /// Edit a given question 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionModel</returns>
        public async System.Threading.Tasks.Task<QuestionModel> EditQuestionAsync (string questionId, UpdateQuestionRequest model = null)
        {
             ApiResponse<QuestionModel> localVarResponse = await EditQuestionAsyncWithHttpInfo(questionId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a given question 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionModel>> EditQuestionAsyncWithHttpInfo (string questionId, UpdateQuestionRequest model = null)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling QuestionAnswerApi->EditQuestion");

            var localVarPath = "/api/QuestionAnswer/Question/{questionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionId != null) localVarPathParams.Add("questionId", this.Configuration.ApiClient.ParameterToString(questionId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditQuestion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionModel)));
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel FindFullById (string id)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = FindFullByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > FindFullByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QuestionAnswerApi->FindFullById");

            var localVarPath = "/api/QuestionAnswer/full/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFullById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> FindFullByIdAsync (string id)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await FindFullByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds the full content item by id 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> FindFullByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QuestionAnswerApi->FindFullById");

            var localVarPath = "/api/QuestionAnswer/full/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFullById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Get an FAQ by its ID 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel Get (string questionAnswerId)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = GetWithHttpInfo(questionAnswerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an FAQ by its ID 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > GetWithHttpInfo (string questionAnswerId)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->Get");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Get an FAQ by its ID 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> GetAsync (string questionAnswerId)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await GetAsyncWithHttpInfo(questionAnswerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an FAQ by its ID 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> GetAsyncWithHttpInfo (string questionAnswerId)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->Get");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>List&lt;QuestionAnswerModel&gt;</returns>
        public List<QuestionAnswerModel> GetAllByApplicationFeature (string applicationFeatureId)
        {
             ApiResponse<List<QuestionAnswerModel>> localVarResponse = GetAllByApplicationFeatureWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of List&lt;QuestionAnswerModel&gt;</returns>
        public ApiResponse< List<QuestionAnswerModel> > GetAllByApplicationFeatureWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling QuestionAnswerApi->GetAllByApplicationFeature");

            var localVarPath = "/api/QuestionAnswer/byFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionAnswerModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionAnswerModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionAnswerModel>)));
        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of List&lt;QuestionAnswerModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<QuestionAnswerModel>> GetAllByApplicationFeatureAsync (string applicationFeatureId)
        {
             ApiResponse<List<QuestionAnswerModel>> localVarResponse = await GetAllByApplicationFeatureAsyncWithHttpInfo(applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the content for the given application feature 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (List&lt;QuestionAnswerModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QuestionAnswerModel>>> GetAllByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling QuestionAnswerApi->GetAllByApplicationFeature");

            var localVarPath = "/api/QuestionAnswer/byFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionAnswerModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionAnswerModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionAnswerModel>)));
        }

        /// <summary>
        /// Gets the content for the given application feature with skip/take 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="take"> (optional)</param>
        /// <returns>List&lt;QuestionAnswerModel&gt;</returns>
        public List<QuestionAnswerModel> GetByApplicationFeature (string applicationFeatureId, string sortBy = null, int? skip = null, int? take = null)
        {
             ApiResponse<List<QuestionAnswerModel>> localVarResponse = GetByApplicationFeatureWithHttpInfo(applicationFeatureId, sortBy, skip, take);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the content for the given application feature with skip/take 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="take"> (optional)</param>
        /// <returns>ApiResponse of List&lt;QuestionAnswerModel&gt;</returns>
        public ApiResponse< List<QuestionAnswerModel> > GetByApplicationFeatureWithHttpInfo (string applicationFeatureId, string sortBy = null, int? skip = null, int? take = null)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling QuestionAnswerApi->GetByApplicationFeature");

            var localVarPath = "/api/QuestionAnswer/byFeature/{applicationFeatureId}/paginated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionAnswerModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionAnswerModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionAnswerModel>)));
        }

        /// <summary>
        /// Gets the content for the given application feature with skip/take 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="take"> (optional)</param>
        /// <returns>Task of List&lt;QuestionAnswerModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<QuestionAnswerModel>> GetByApplicationFeatureAsync (string applicationFeatureId, string sortBy = null, int? skip = null, int? take = null)
        {
             ApiResponse<List<QuestionAnswerModel>> localVarResponse = await GetByApplicationFeatureAsyncWithHttpInfo(applicationFeatureId, sortBy, skip, take);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the content for the given application feature with skip/take 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationFeatureId"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="skip"> (optional)</param>
        /// <param name="take"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;QuestionAnswerModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QuestionAnswerModel>>> GetByApplicationFeatureAsyncWithHttpInfo (string applicationFeatureId, string sortBy = null, int? skip = null, int? take = null)
        {
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling QuestionAnswerApi->GetByApplicationFeature");

            var localVarPath = "/api/QuestionAnswer/byFeature/{applicationFeatureId}/paginated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (take != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "take", take)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionAnswerModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionAnswerModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionAnswerModel>)));
        }

        /// <summary>
        /// Get the FAQs for a given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;QuestionAnswerModel&gt;</returns>
        public List<QuestionAnswerModel> GetQuestionAnswersForApplication (string applicationId)
        {
             ApiResponse<List<QuestionAnswerModel>> localVarResponse = GetQuestionAnswersForApplicationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the FAQs for a given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;QuestionAnswerModel&gt;</returns>
        public ApiResponse< List<QuestionAnswerModel> > GetQuestionAnswersForApplicationWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling QuestionAnswerApi->GetQuestionAnswersForApplication");

            var localVarPath = "/api/QuestionAnswer/{applicationId}/faqs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionAnswersForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionAnswerModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionAnswerModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionAnswerModel>)));
        }

        /// <summary>
        /// Get the FAQs for a given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;QuestionAnswerModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<QuestionAnswerModel>> GetQuestionAnswersForApplicationAsync (string applicationId)
        {
             ApiResponse<List<QuestionAnswerModel>> localVarResponse = await GetQuestionAnswersForApplicationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the FAQs for a given application 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;QuestionAnswerModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QuestionAnswerModel>>> GetQuestionAnswersForApplicationAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling QuestionAnswerApi->GetQuestionAnswersForApplication");

            var localVarPath = "/api/QuestionAnswer/{applicationId}/faqs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionAnswersForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionAnswerModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionAnswerModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionAnswerModel>)));
        }

        /// <summary>
        /// Get the webhooks associated with a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>List&lt;QuestionAnswerWebhookModel&gt;</returns>
        public List<QuestionAnswerWebhookModel> GetWebhooks (string questionAnswerId)
        {
             ApiResponse<List<QuestionAnswerWebhookModel>> localVarResponse = GetWebhooksWithHttpInfo(questionAnswerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the webhooks associated with a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>ApiResponse of List&lt;QuestionAnswerWebhookModel&gt;</returns>
        public ApiResponse< List<QuestionAnswerWebhookModel> > GetWebhooksWithHttpInfo (string questionAnswerId)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->GetWebhooks");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionAnswerWebhookModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionAnswerWebhookModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionAnswerWebhookModel>)));
        }

        /// <summary>
        /// Get the webhooks associated with a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of List&lt;QuestionAnswerWebhookModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<QuestionAnswerWebhookModel>> GetWebhooksAsync (string questionAnswerId)
        {
             ApiResponse<List<QuestionAnswerWebhookModel>> localVarResponse = await GetWebhooksAsyncWithHttpInfo(questionAnswerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the webhooks associated with a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <returns>Task of ApiResponse (List&lt;QuestionAnswerWebhookModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<QuestionAnswerWebhookModel>>> GetWebhooksAsyncWithHttpInfo (string questionAnswerId)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->GetWebhooks");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<QuestionAnswerWebhookModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<QuestionAnswerWebhookModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<QuestionAnswerWebhookModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel MoveContentItemToApplicationFeature (string contentItemId, string applicationFeatureId)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = MoveContentItemToApplicationFeatureWithHttpInfo(contentItemId, applicationFeatureId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > MoveContentItemToApplicationFeatureWithHttpInfo (string contentItemId, string applicationFeatureId)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling QuestionAnswerApi->MoveContentItemToApplicationFeature");
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling QuestionAnswerApi->MoveContentItemToApplicationFeature");

            var localVarPath = "/api/QuestionAnswer/{contentItemId}/MoveToFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveContentItemToApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> MoveContentItemToApplicationFeatureAsync (string contentItemId, string applicationFeatureId)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await MoveContentItemToApplicationFeatureAsyncWithHttpInfo(contentItemId, applicationFeatureId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="applicationFeatureId"></param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> MoveContentItemToApplicationFeatureAsyncWithHttpInfo (string contentItemId, string applicationFeatureId)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling QuestionAnswerApi->MoveContentItemToApplicationFeature");
            // verify the required parameter 'applicationFeatureId' is set
            if (applicationFeatureId == null)
                throw new ApiException(400, "Missing required parameter 'applicationFeatureId' when calling QuestionAnswerApi->MoveContentItemToApplicationFeature");

            var localVarPath = "/api/QuestionAnswer/{contentItemId}/MoveToFeature/{applicationFeatureId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (applicationFeatureId != null) localVarPathParams.Add("applicationFeatureId", this.Configuration.ApiClient.ParameterToString(applicationFeatureId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MoveContentItemToApplicationFeature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>bool?</returns>
        public bool? RemoveUserDefinedParameter (string instanceWebhookId, string parameterName)
        {
             ApiResponse<bool?> localVarResponse = RemoveUserDefinedParameterWithHttpInfo(instanceWebhookId, parameterName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > RemoveUserDefinedParameterWithHttpInfo (string instanceWebhookId, string parameterName)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling QuestionAnswerApi->RemoveUserDefinedParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling QuestionAnswerApi->RemoveUserDefinedParameter");

            var localVarPath = "/api/QuestionAnswer/webhook/{instanceWebhookId}/userParameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> RemoveUserDefinedParameterAsync (string instanceWebhookId, string parameterName)
        {
             ApiResponse<bool?> localVarResponse = await RemoveUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, parameterName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameterName"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> RemoveUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, string parameterName)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling QuestionAnswerApi->RemoveUserDefinedParameter");
            // verify the required parameter 'parameterName' is set
            if (parameterName == null)
                throw new ApiException(400, "Missing required parameter 'parameterName' when calling QuestionAnswerApi->RemoveUserDefinedParameter");

            var localVarPath = "/api/QuestionAnswer/webhook/{instanceWebhookId}/userParameters/{parameterName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (parameterName != null) localVarPathParams.Add("parameterName", this.Configuration.ApiClient.ParameterToString(parameterName)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Delete a webhook from a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerWebhookId"></param>
        /// <returns>QuestionAnswerWebhookModel</returns>
        public QuestionAnswerWebhookModel RemoveWebhook (string questionAnswerWebhookId)
        {
             ApiResponse<QuestionAnswerWebhookModel> localVarResponse = RemoveWebhookWithHttpInfo(questionAnswerWebhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a webhook from a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerWebhookId"></param>
        /// <returns>ApiResponse of QuestionAnswerWebhookModel</returns>
        public ApiResponse< QuestionAnswerWebhookModel > RemoveWebhookWithHttpInfo (string questionAnswerWebhookId)
        {
            // verify the required parameter 'questionAnswerWebhookId' is set
            if (questionAnswerWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerWebhookId' when calling QuestionAnswerApi->RemoveWebhook");

            var localVarPath = "/api/QuestionAnswer/webhook/{questionAnswerWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerWebhookId != null) localVarPathParams.Add("questionAnswerWebhookId", this.Configuration.ApiClient.ParameterToString(questionAnswerWebhookId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerWebhookModel)));
        }

        /// <summary>
        /// Delete a webhook from a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerWebhookId"></param>
        /// <returns>Task of QuestionAnswerWebhookModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerWebhookModel> RemoveWebhookAsync (string questionAnswerWebhookId)
        {
             ApiResponse<QuestionAnswerWebhookModel> localVarResponse = await RemoveWebhookAsyncWithHttpInfo(questionAnswerWebhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a webhook from a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerWebhookId"></param>
        /// <returns>Task of ApiResponse (QuestionAnswerWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerWebhookModel>> RemoveWebhookAsyncWithHttpInfo (string questionAnswerWebhookId)
        {
            // verify the required parameter 'questionAnswerWebhookId' is set
            if (questionAnswerWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerWebhookId' when calling QuestionAnswerApi->RemoveWebhook");

            var localVarPath = "/api/QuestionAnswer/webhook/{questionAnswerWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerWebhookId != null) localVarPathParams.Add("questionAnswerWebhookId", this.Configuration.ApiClient.ParameterToString(questionAnswerWebhookId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerWebhookModel)));
        }

        /// <summary>
        /// Toggles whether the given FAQ is live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel ToggleIsLive (string questionAnswerId, ToggleLiveRequest model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = ToggleIsLiveWithHttpInfo(questionAnswerId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Toggles whether the given FAQ is live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > ToggleIsLiveWithHttpInfo (string questionAnswerId, ToggleLiveRequest model = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->ToggleIsLive");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/isLive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ToggleIsLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Toggles whether the given FAQ is live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> ToggleIsLiveAsync (string questionAnswerId, ToggleLiveRequest model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await ToggleIsLiveAsyncWithHttpInfo(questionAnswerId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Toggles whether the given FAQ is live or not 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> ToggleIsLiveAsyncWithHttpInfo (string questionAnswerId, ToggleLiveRequest model = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->ToggleIsLive");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/isLive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ToggleIsLive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Update a webhook on a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>QuestionAnswerWebhookModel</returns>
        public QuestionAnswerWebhookModel UpdateAttachedWebhook (string questionAnswerId, string instanceWebhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<QuestionAnswerWebhookModel> localVarResponse = UpdateAttachedWebhookWithHttpInfo(questionAnswerId, instanceWebhookId, parameters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a webhook on a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerWebhookModel</returns>
        public ApiResponse< QuestionAnswerWebhookModel > UpdateAttachedWebhookWithHttpInfo (string questionAnswerId, string instanceWebhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->UpdateAttachedWebhook");
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling QuestionAnswerApi->UpdateAttachedWebhook");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/webhooks/{instanceWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachedWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerWebhookModel)));
        }

        /// <summary>
        /// Update a webhook on a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of QuestionAnswerWebhookModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerWebhookModel> UpdateAttachedWebhookAsync (string questionAnswerId, string instanceWebhookId, WebhookParametersRequest parameters = null)
        {
             ApiResponse<QuestionAnswerWebhookModel> localVarResponse = await UpdateAttachedWebhookAsyncWithHttpInfo(questionAnswerId, instanceWebhookId, parameters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a webhook on a question answer item 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionAnswerId"></param>
        /// <param name="instanceWebhookId"></param>
        /// <param name="parameters"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerWebhookModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerWebhookModel>> UpdateAttachedWebhookAsyncWithHttpInfo (string questionAnswerId, string instanceWebhookId, WebhookParametersRequest parameters = null)
        {
            // verify the required parameter 'questionAnswerId' is set
            if (questionAnswerId == null)
                throw new ApiException(400, "Missing required parameter 'questionAnswerId' when calling QuestionAnswerApi->UpdateAttachedWebhook");
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling QuestionAnswerApi->UpdateAttachedWebhook");

            var localVarPath = "/api/QuestionAnswer/{questionAnswerId}/webhooks/{instanceWebhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (questionAnswerId != null) localVarPathParams.Add("questionAnswerId", this.Configuration.ApiClient.ParameterToString(questionAnswerId)); // path parameter
            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (parameters != null && parameters.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(parameters); // http body (model) parameter
            }
            else
            {
                localVarPostBody = parameters; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttachedWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerWebhookModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerWebhookModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerWebhookModel)));
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>QuestionAnswerModel</returns>
        public QuestionAnswerModel UpdateFullContentItem (string contentItemId, QuestionAnswerModel model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = UpdateFullContentItemWithHttpInfo(contentItemId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of QuestionAnswerModel</returns>
        public ApiResponse< QuestionAnswerModel > UpdateFullContentItemWithHttpInfo (string contentItemId, QuestionAnswerModel model = null)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling QuestionAnswerApi->UpdateFullContentItem");

            var localVarPath = "/api/QuestionAnswer/{contentItemId}/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of QuestionAnswerModel</returns>
        public async System.Threading.Tasks.Task<QuestionAnswerModel> UpdateFullContentItemAsync (string contentItemId, QuestionAnswerModel model = null)
        {
             ApiResponse<QuestionAnswerModel> localVarResponse = await UpdateFullContentItemAsyncWithHttpInfo(contentItemId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the content item from a specified dto 
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentItemId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (QuestionAnswerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionAnswerModel>> UpdateFullContentItemAsyncWithHttpInfo (string contentItemId, QuestionAnswerModel model = null)
        {
            // verify the required parameter 'contentItemId' is set
            if (contentItemId == null)
                throw new ApiException(400, "Missing required parameter 'contentItemId' when calling QuestionAnswerApi->UpdateFullContentItem");

            var localVarPath = "/api/QuestionAnswer/{contentItemId}/full";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentItemId != null) localVarPathParams.Add("contentItemId", this.Configuration.ApiClient.ParameterToString(contentItemId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFullContentItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionAnswerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionAnswerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionAnswerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? UpdateUserDefinedParameter (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = UpdateUserDefinedParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UpdateUserDefinedParameterWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling QuestionAnswerApi->UpdateUserDefinedParameter");

            var localVarPath = "/api/QuestionAnswer/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UpdateUserDefinedParameterAsync (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await UpdateUserDefinedParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateUserDefinedParameterAsyncWithHttpInfo (string instanceWebhookId, UserDefinedWebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling QuestionAnswerApi->UpdateUserDefinedParameter");

            var localVarPath = "/api/QuestionAnswer/webhook/{instanceWebhookId}/userParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserDefinedParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>bool?</returns>
        public bool? UpdateWebhookParameter (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = UpdateWebhookParameterWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > UpdateWebhookParameterWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling QuestionAnswerApi->UpdateWebhookParameter");

            var localVarPath = "/api/QuestionAnswer/webhook/{instanceWebhookId}/webhookParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> UpdateWebhookParameterAsync (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
             ApiResponse<bool?> localVarResponse = await UpdateWebhookParameterAsyncWithHttpInfo(instanceWebhookId, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceWebhookId"></param>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> UpdateWebhookParameterAsyncWithHttpInfo (string instanceWebhookId, WebhookParameterUpdateRequest request = null)
        {
            // verify the required parameter 'instanceWebhookId' is set
            if (instanceWebhookId == null)
                throw new ApiException(400, "Missing required parameter 'instanceWebhookId' when calling QuestionAnswerApi->UpdateWebhookParameter");

            var localVarPath = "/api/QuestionAnswer/webhook/{instanceWebhookId}/webhookParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (instanceWebhookId != null) localVarPathParams.Add("instanceWebhookId", this.Configuration.ApiClient.ParameterToString(instanceWebhookId)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateWebhookParameter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

    }
}
