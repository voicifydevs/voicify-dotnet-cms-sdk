/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFollowUpApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>FollowUpModel</returns>
        FollowUpModel CreateFollowUp (string applicationId, CreateFollowUpRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of FollowUpModel</returns>
        ApiResponse<FollowUpModel> CreateFollowUpWithHttpInfo (string applicationId, CreateFollowUpRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>FollowUpModel</returns>
        FollowUpModel DeleteFollowUp (string followUpId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>ApiResponse of FollowUpModel</returns>
        ApiResponse<FollowUpModel> DeleteFollowUpWithHttpInfo (string followUpId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>ChildContentContainerModel</returns>
        ChildContentContainerModel FindChildContentContainer (string followUpId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>ApiResponse of ChildContentContainerModel</returns>
        ApiResponse<ChildContentContainerModel> FindChildContentContainerWithHttpInfo (string followUpId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>FollowUpModel</returns>
        FollowUpModel FindFollowUp (string followUpId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>ApiResponse of FollowUpModel</returns>
        ApiResponse<FollowUpModel> FindFollowUpWithHttpInfo (string followUpId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;FollowUpModel&gt;</returns>
        List<FollowUpModel> GetForApplication (string applicationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;FollowUpModel&gt;</returns>
        ApiResponse<List<FollowUpModel>> GetForApplicationWithHttpInfo (string applicationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>ParentContentContainerModel</returns>
        ParentContentContainerModel GetParentContentItems (string featureTypeId, string contentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of ParentContentContainerModel</returns>
        ApiResponse<ParentContentContainerModel> GetParentContentItemsWithHttpInfo (string featureTypeId, string contentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>List&lt;FollowUpModel&gt;</returns>
        List<FollowUpModel> GetParentsOfContent (string featureTypeId, string contentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of List&lt;FollowUpModel&gt;</returns>
        ApiResponse<List<FollowUpModel>> GetParentsOfContentWithHttpInfo (string featureTypeId, string contentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>FollowUpModel</returns>
        FollowUpModel UpdateFollowUp (UpdateFollowUpRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of FollowUpModel</returns>
        ApiResponse<FollowUpModel> UpdateFollowUpWithHttpInfo (UpdateFollowUpRequest model = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of FollowUpModel</returns>
        System.Threading.Tasks.Task<FollowUpModel> CreateFollowUpAsync (string applicationId, CreateFollowUpRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (FollowUpModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<FollowUpModel>> CreateFollowUpAsyncWithHttpInfo (string applicationId, CreateFollowUpRequest model = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>Task of FollowUpModel</returns>
        System.Threading.Tasks.Task<FollowUpModel> DeleteFollowUpAsync (string followUpId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>Task of ApiResponse (FollowUpModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<FollowUpModel>> DeleteFollowUpAsyncWithHttpInfo (string followUpId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>Task of ChildContentContainerModel</returns>
        System.Threading.Tasks.Task<ChildContentContainerModel> FindChildContentContainerAsync (string followUpId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>Task of ApiResponse (ChildContentContainerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChildContentContainerModel>> FindChildContentContainerAsyncWithHttpInfo (string followUpId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>Task of FollowUpModel</returns>
        System.Threading.Tasks.Task<FollowUpModel> FindFollowUpAsync (string followUpId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>Task of ApiResponse (FollowUpModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<FollowUpModel>> FindFollowUpAsyncWithHttpInfo (string followUpId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;FollowUpModel&gt;</returns>
        System.Threading.Tasks.Task<List<FollowUpModel>> GetForApplicationAsync (string applicationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;FollowUpModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FollowUpModel>>> GetForApplicationAsyncWithHttpInfo (string applicationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>Task of ParentContentContainerModel</returns>
        System.Threading.Tasks.Task<ParentContentContainerModel> GetParentContentItemsAsync (string featureTypeId, string contentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (ParentContentContainerModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParentContentContainerModel>> GetParentContentItemsAsyncWithHttpInfo (string featureTypeId, string contentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>Task of List&lt;FollowUpModel&gt;</returns>
        System.Threading.Tasks.Task<List<FollowUpModel>> GetParentsOfContentAsync (string featureTypeId, string contentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (List&lt;FollowUpModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FollowUpModel>>> GetParentsOfContentAsyncWithHttpInfo (string featureTypeId, string contentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of FollowUpModel</returns>
        System.Threading.Tasks.Task<FollowUpModel> UpdateFollowUpAsync (UpdateFollowUpRequest model = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (FollowUpModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<FollowUpModel>> UpdateFollowUpAsyncWithHttpInfo (UpdateFollowUpRequest model = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FollowUpApi : IFollowUpApi
    {
        private Voicify.Sdk.Cms.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FollowUpApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FollowUpApi(String basePath)
        {
            this.Configuration = new Voicify.Sdk.Cms.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FollowUpApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FollowUpApi(Voicify.Sdk.Cms.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Voicify.Sdk.Cms.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Voicify.Sdk.Cms.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voicify.Sdk.Cms.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voicify.Sdk.Cms.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>FollowUpModel</returns>
        public FollowUpModel CreateFollowUp (string applicationId, CreateFollowUpRequest model = null)
        {
             ApiResponse<FollowUpModel> localVarResponse = CreateFollowUpWithHttpInfo(applicationId, model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of FollowUpModel</returns>
        public ApiResponse< FollowUpModel > CreateFollowUpWithHttpInfo (string applicationId, CreateFollowUpRequest model = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FollowUpApi->CreateFollowUp");

            var localVarPath = "/api/FollowUp/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFollowUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FollowUpModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FollowUpModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FollowUpModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of FollowUpModel</returns>
        public async System.Threading.Tasks.Task<FollowUpModel> CreateFollowUpAsync (string applicationId, CreateFollowUpRequest model = null)
        {
             ApiResponse<FollowUpModel> localVarResponse = await CreateFollowUpAsyncWithHttpInfo(applicationId, model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (FollowUpModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FollowUpModel>> CreateFollowUpAsyncWithHttpInfo (string applicationId, CreateFollowUpRequest model = null)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FollowUpApi->CreateFollowUp");

            var localVarPath = "/api/FollowUp/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFollowUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FollowUpModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FollowUpModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FollowUpModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>FollowUpModel</returns>
        public FollowUpModel DeleteFollowUp (string followUpId)
        {
             ApiResponse<FollowUpModel> localVarResponse = DeleteFollowUpWithHttpInfo(followUpId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>ApiResponse of FollowUpModel</returns>
        public ApiResponse< FollowUpModel > DeleteFollowUpWithHttpInfo (string followUpId)
        {
            // verify the required parameter 'followUpId' is set
            if (followUpId == null)
                throw new ApiException(400, "Missing required parameter 'followUpId' when calling FollowUpApi->DeleteFollowUp");

            var localVarPath = "/api/FollowUp/{followUpId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (followUpId != null) localVarPathParams.Add("followUpId", this.Configuration.ApiClient.ParameterToString(followUpId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFollowUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FollowUpModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FollowUpModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FollowUpModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>Task of FollowUpModel</returns>
        public async System.Threading.Tasks.Task<FollowUpModel> DeleteFollowUpAsync (string followUpId)
        {
             ApiResponse<FollowUpModel> localVarResponse = await DeleteFollowUpAsyncWithHttpInfo(followUpId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>Task of ApiResponse (FollowUpModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FollowUpModel>> DeleteFollowUpAsyncWithHttpInfo (string followUpId)
        {
            // verify the required parameter 'followUpId' is set
            if (followUpId == null)
                throw new ApiException(400, "Missing required parameter 'followUpId' when calling FollowUpApi->DeleteFollowUp");

            var localVarPath = "/api/FollowUp/{followUpId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (followUpId != null) localVarPathParams.Add("followUpId", this.Configuration.ApiClient.ParameterToString(followUpId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFollowUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FollowUpModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FollowUpModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FollowUpModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>ChildContentContainerModel</returns>
        public ChildContentContainerModel FindChildContentContainer (string followUpId)
        {
             ApiResponse<ChildContentContainerModel> localVarResponse = FindChildContentContainerWithHttpInfo(followUpId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>ApiResponse of ChildContentContainerModel</returns>
        public ApiResponse< ChildContentContainerModel > FindChildContentContainerWithHttpInfo (string followUpId)
        {
            // verify the required parameter 'followUpId' is set
            if (followUpId == null)
                throw new ApiException(400, "Missing required parameter 'followUpId' when calling FollowUpApi->FindChildContentContainer");

            var localVarPath = "/api/FollowUp/find/{followUpId}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (followUpId != null) localVarPathParams.Add("followUpId", this.Configuration.ApiClient.ParameterToString(followUpId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindChildContentContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChildContentContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChildContentContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChildContentContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>Task of ChildContentContainerModel</returns>
        public async System.Threading.Tasks.Task<ChildContentContainerModel> FindChildContentContainerAsync (string followUpId)
        {
             ApiResponse<ChildContentContainerModel> localVarResponse = await FindChildContentContainerAsyncWithHttpInfo(followUpId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>Task of ApiResponse (ChildContentContainerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChildContentContainerModel>> FindChildContentContainerAsyncWithHttpInfo (string followUpId)
        {
            // verify the required parameter 'followUpId' is set
            if (followUpId == null)
                throw new ApiException(400, "Missing required parameter 'followUpId' when calling FollowUpApi->FindChildContentContainer");

            var localVarPath = "/api/FollowUp/find/{followUpId}/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (followUpId != null) localVarPathParams.Add("followUpId", this.Configuration.ApiClient.ParameterToString(followUpId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindChildContentContainer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChildContentContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChildContentContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChildContentContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>FollowUpModel</returns>
        public FollowUpModel FindFollowUp (string followUpId)
        {
             ApiResponse<FollowUpModel> localVarResponse = FindFollowUpWithHttpInfo(followUpId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>ApiResponse of FollowUpModel</returns>
        public ApiResponse< FollowUpModel > FindFollowUpWithHttpInfo (string followUpId)
        {
            // verify the required parameter 'followUpId' is set
            if (followUpId == null)
                throw new ApiException(400, "Missing required parameter 'followUpId' when calling FollowUpApi->FindFollowUp");

            var localVarPath = "/api/FollowUp/find/{followUpId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (followUpId != null) localVarPathParams.Add("followUpId", this.Configuration.ApiClient.ParameterToString(followUpId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFollowUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FollowUpModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FollowUpModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FollowUpModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>Task of FollowUpModel</returns>
        public async System.Threading.Tasks.Task<FollowUpModel> FindFollowUpAsync (string followUpId)
        {
             ApiResponse<FollowUpModel> localVarResponse = await FindFollowUpAsyncWithHttpInfo(followUpId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="followUpId"></param>
        /// <returns>Task of ApiResponse (FollowUpModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FollowUpModel>> FindFollowUpAsyncWithHttpInfo (string followUpId)
        {
            // verify the required parameter 'followUpId' is set
            if (followUpId == null)
                throw new ApiException(400, "Missing required parameter 'followUpId' when calling FollowUpApi->FindFollowUp");

            var localVarPath = "/api/FollowUp/find/{followUpId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (followUpId != null) localVarPathParams.Add("followUpId", this.Configuration.ApiClient.ParameterToString(followUpId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFollowUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FollowUpModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FollowUpModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FollowUpModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>List&lt;FollowUpModel&gt;</returns>
        public List<FollowUpModel> GetForApplication (string applicationId)
        {
             ApiResponse<List<FollowUpModel>> localVarResponse = GetForApplicationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of List&lt;FollowUpModel&gt;</returns>
        public ApiResponse< List<FollowUpModel> > GetForApplicationWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FollowUpApi->GetForApplication");

            var localVarPath = "/api/FollowUp/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FollowUpModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FollowUpModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FollowUpModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of List&lt;FollowUpModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<FollowUpModel>> GetForApplicationAsync (string applicationId)
        {
             ApiResponse<List<FollowUpModel>> localVarResponse = await GetForApplicationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (List&lt;FollowUpModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FollowUpModel>>> GetForApplicationAsyncWithHttpInfo (string applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling FollowUpApi->GetForApplication");

            var localVarPath = "/api/FollowUp/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetForApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FollowUpModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FollowUpModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FollowUpModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>ParentContentContainerModel</returns>
        public ParentContentContainerModel GetParentContentItems (string featureTypeId, string contentId)
        {
             ApiResponse<ParentContentContainerModel> localVarResponse = GetParentContentItemsWithHttpInfo(featureTypeId, contentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of ParentContentContainerModel</returns>
        public ApiResponse< ParentContentContainerModel > GetParentContentItemsWithHttpInfo (string featureTypeId, string contentId)
        {
            // verify the required parameter 'featureTypeId' is set
            if (featureTypeId == null)
                throw new ApiException(400, "Missing required parameter 'featureTypeId' when calling FollowUpApi->GetParentContentItems");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling FollowUpApi->GetParentContentItems");

            var localVarPath = "/api/FollowUp/parents/{featureTypeId}/{contentId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureTypeId != null) localVarPathParams.Add("featureTypeId", this.Configuration.ApiClient.ParameterToString(featureTypeId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParentContentItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParentContentContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ParentContentContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParentContentContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>Task of ParentContentContainerModel</returns>
        public async System.Threading.Tasks.Task<ParentContentContainerModel> GetParentContentItemsAsync (string featureTypeId, string contentId)
        {
             ApiResponse<ParentContentContainerModel> localVarResponse = await GetParentContentItemsAsyncWithHttpInfo(featureTypeId, contentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (ParentContentContainerModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParentContentContainerModel>> GetParentContentItemsAsyncWithHttpInfo (string featureTypeId, string contentId)
        {
            // verify the required parameter 'featureTypeId' is set
            if (featureTypeId == null)
                throw new ApiException(400, "Missing required parameter 'featureTypeId' when calling FollowUpApi->GetParentContentItems");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling FollowUpApi->GetParentContentItems");

            var localVarPath = "/api/FollowUp/parents/{featureTypeId}/{contentId}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureTypeId != null) localVarPathParams.Add("featureTypeId", this.Configuration.ApiClient.ParameterToString(featureTypeId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParentContentItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParentContentContainerModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ParentContentContainerModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParentContentContainerModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>List&lt;FollowUpModel&gt;</returns>
        public List<FollowUpModel> GetParentsOfContent (string featureTypeId, string contentId)
        {
             ApiResponse<List<FollowUpModel>> localVarResponse = GetParentsOfContentWithHttpInfo(featureTypeId, contentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of List&lt;FollowUpModel&gt;</returns>
        public ApiResponse< List<FollowUpModel> > GetParentsOfContentWithHttpInfo (string featureTypeId, string contentId)
        {
            // verify the required parameter 'featureTypeId' is set
            if (featureTypeId == null)
                throw new ApiException(400, "Missing required parameter 'featureTypeId' when calling FollowUpApi->GetParentsOfContent");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling FollowUpApi->GetParentsOfContent");

            var localVarPath = "/api/FollowUp/parents/{featureTypeId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureTypeId != null) localVarPathParams.Add("featureTypeId", this.Configuration.ApiClient.ParameterToString(featureTypeId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParentsOfContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FollowUpModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FollowUpModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FollowUpModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>Task of List&lt;FollowUpModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<FollowUpModel>> GetParentsOfContentAsync (string featureTypeId, string contentId)
        {
             ApiResponse<List<FollowUpModel>> localVarResponse = await GetParentsOfContentAsyncWithHttpInfo(featureTypeId, contentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="featureTypeId"></param>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (List&lt;FollowUpModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FollowUpModel>>> GetParentsOfContentAsyncWithHttpInfo (string featureTypeId, string contentId)
        {
            // verify the required parameter 'featureTypeId' is set
            if (featureTypeId == null)
                throw new ApiException(400, "Missing required parameter 'featureTypeId' when calling FollowUpApi->GetParentsOfContent");
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling FollowUpApi->GetParentsOfContent");

            var localVarPath = "/api/FollowUp/parents/{featureTypeId}/{contentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (featureTypeId != null) localVarPathParams.Add("featureTypeId", this.Configuration.ApiClient.ParameterToString(featureTypeId)); // path parameter
            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParentsOfContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FollowUpModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FollowUpModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FollowUpModel>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>FollowUpModel</returns>
        public FollowUpModel UpdateFollowUp (UpdateFollowUpRequest model = null)
        {
             ApiResponse<FollowUpModel> localVarResponse = UpdateFollowUpWithHttpInfo(model);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>ApiResponse of FollowUpModel</returns>
        public ApiResponse< FollowUpModel > UpdateFollowUpWithHttpInfo (UpdateFollowUpRequest model = null)
        {

            var localVarPath = "/api/FollowUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFollowUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FollowUpModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FollowUpModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FollowUpModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of FollowUpModel</returns>
        public async System.Threading.Tasks.Task<FollowUpModel> UpdateFollowUpAsync (UpdateFollowUpRequest model = null)
        {
             ApiResponse<FollowUpModel> localVarResponse = await UpdateFollowUpAsyncWithHttpInfo(model);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Voicify.Sdk.Cms.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model"> (optional)</param>
        /// <returns>Task of ApiResponse (FollowUpModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FollowUpModel>> UpdateFollowUpAsyncWithHttpInfo (UpdateFollowUpRequest model = null)
        {

            var localVarPath = "/api/FollowUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFollowUp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FollowUpModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FollowUpModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FollowUpModel)));
        }

    }
}
