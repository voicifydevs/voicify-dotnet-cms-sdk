/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Cms.Api;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Test
{
    /// <summary>
    ///  Class for testing QuestionAnswerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class QuestionAnswerApiTests
    {
        private QuestionAnswerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new QuestionAnswerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of QuestionAnswerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' QuestionAnswerApi
            //Assert.IsInstanceOfType(typeof(QuestionAnswerApi), instance, "instance is a QuestionAnswerApi");
        }

        
        /// <summary>
        /// Test AddAudioFileImage
        /// </summary>
        [Test]
        public void AddAudioFileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string answerMessageId = null;
            //string mediaItemId = null;
            //var response = instance.AddAudioFileImage(answerMessageId, mediaItemId);
            //Assert.IsInstanceOf<AnswerModel> (response, "response is AnswerModel");
        }
        
        /// <summary>
        /// Test AddLargeImage
        /// </summary>
        [Test]
        public void AddLargeImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string answerMessageId = null;
            //string mediaItemId = null;
            //var response = instance.AddLargeImage(answerMessageId, mediaItemId);
            //Assert.IsInstanceOf<AnswerModel> (response, "response is AnswerModel");
        }
        
        /// <summary>
        /// Test AddOrUpdateRequiredPhrases
        /// </summary>
        [Test]
        public void AddOrUpdateRequiredPhrasesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentItemId = null;
            //RequiredPhrasesRequest request = null;
            //var response = instance.AddOrUpdateRequiredPhrases(contentItemId, request);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test AddSmallImage
        /// </summary>
        [Test]
        public void AddSmallImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string answerMessageId = null;
            //string mediaItemId = null;
            //var response = instance.AddSmallImage(answerMessageId, mediaItemId);
            //Assert.IsInstanceOf<AnswerModel> (response, "response is AnswerModel");
        }
        
        /// <summary>
        /// Test AddVideoFile
        /// </summary>
        [Test]
        public void AddVideoFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string answerMessageId = null;
            //string mediaItemId = null;
            //var response = instance.AddVideoFile(answerMessageId, mediaItemId);
            //Assert.IsInstanceOf<AnswerModel> (response, "response is AnswerModel");
        }
        
        /// <summary>
        /// Test AddWebhook
        /// </summary>
        [Test]
        public void AddWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionAnswerId = null;
            //string webhookId = null;
            //WebhookParametersRequest parameters = null;
            //var response = instance.AddWebhook(questionAnswerId, webhookId, parameters);
            //Assert.IsInstanceOf<QuestionAnswerWebhookModel> (response, "response is QuestionAnswerWebhookModel");
        }
        
        /// <summary>
        /// Test BulkUpdate
        /// </summary>
        [Test]
        public void BulkUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionAnswerId = null;
            //BulkQuestionAnswerUpdateRequest model = null;
            //var response = instance.BulkUpdate(questionAnswerId, model);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test BulkUpdateStub
        /// </summary>
        [Test]
        public void BulkUpdateStubTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionAnswerId = null;
            //BulkQuestionAnswerUpdateStubRequest model = null;
            //var response = instance.BulkUpdateStub(questionAnswerId, model);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test CopyContentItem
        /// </summary>
        [Test]
        public void CopyContentItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionAnswerId = null;
            //var response = instance.CopyContentItem(questionAnswerId);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test CountByApplicationFeature
        /// </summary>
        [Test]
        public void CountByApplicationFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //var response = instance.CountByApplicationFeature(applicationFeatureId);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
        /// <summary>
        /// Test Create
        /// </summary>
        [Test]
        public void CreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewQuestionAnswerRequest model = null;
            //var response = instance.Create(model);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test CreateAnswer
        /// </summary>
        [Test]
        public void CreateAnswerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionAnswerId = null;
            //CreateAnswerRequest model = null;
            //var response = instance.CreateAnswer(questionAnswerId, model);
            //Assert.IsInstanceOf<AnswerModel> (response, "response is AnswerModel");
        }
        
        /// <summary>
        /// Test CreateFullContentItem
        /// </summary>
        [Test]
        public void CreateFullContentItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QuestionAnswerModel model = null;
            //var response = instance.CreateFullContentItem(model);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test CreateQuestion
        /// </summary>
        [Test]
        public void CreateQuestionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionAnswerId = null;
            //CreateQuestionRequest model = null;
            //var response = instance.CreateQuestion(questionAnswerId, model);
            //Assert.IsInstanceOf<QuestionModel> (response, "response is QuestionModel");
        }
        
        /// <summary>
        /// Test CreateStub
        /// </summary>
        [Test]
        public void CreateStubTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewQuestionAnswerStubRequest model = null;
            //var response = instance.CreateStub(model);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test CreateUserDefinedParameter
        /// </summary>
        [Test]
        public void CreateUserDefinedParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceWebhookId = null;
            //UserDefinedWebhookParameterCreateRequest request = null;
            //var response = instance.CreateUserDefinedParameter(instanceWebhookId, request);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionAnswerId = null;
            //var response = instance.Delete(questionAnswerId);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test DeleteAnswer
        /// </summary>
        [Test]
        public void DeleteAnswerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string answerId = null;
            //var response = instance.DeleteAnswer(answerId);
            //Assert.IsInstanceOf<AnswerModel> (response, "response is AnswerModel");
        }
        
        /// <summary>
        /// Test DeleteQuestion
        /// </summary>
        [Test]
        public void DeleteQuestionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionId = null;
            //var response = instance.DeleteQuestion(questionId);
            //Assert.IsInstanceOf<QuestionModel> (response, "response is QuestionModel");
        }
        
        /// <summary>
        /// Test EditAnswer
        /// </summary>
        [Test]
        public void EditAnswerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string answerId = null;
            //UpdateAnswerRequest model = null;
            //var response = instance.EditAnswer(answerId, model);
            //Assert.IsInstanceOf<AnswerModel> (response, "response is AnswerModel");
        }
        
        /// <summary>
        /// Test EditQuestion
        /// </summary>
        [Test]
        public void EditQuestionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionId = null;
            //UpdateQuestionRequest model = null;
            //var response = instance.EditQuestion(questionId, model);
            //Assert.IsInstanceOf<QuestionModel> (response, "response is QuestionModel");
        }
        
        /// <summary>
        /// Test FindFullById
        /// </summary>
        [Test]
        public void FindFullByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.FindFullById(id);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionAnswerId = null;
            //var response = instance.Get(questionAnswerId);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test GetAllByApplicationFeature
        /// </summary>
        [Test]
        public void GetAllByApplicationFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //var response = instance.GetAllByApplicationFeature(applicationFeatureId);
            //Assert.IsInstanceOf<List<QuestionAnswerModel>> (response, "response is List<QuestionAnswerModel>");
        }
        
        /// <summary>
        /// Test GetByApplicationFeature
        /// </summary>
        [Test]
        public void GetByApplicationFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //string sortBy = null;
            //int? skip = null;
            //int? take = null;
            //var response = instance.GetByApplicationFeature(applicationFeatureId, sortBy, skip, take);
            //Assert.IsInstanceOf<List<QuestionAnswerModel>> (response, "response is List<QuestionAnswerModel>");
        }
        
        /// <summary>
        /// Test GetQuestionAnswersForApplication
        /// </summary>
        [Test]
        public void GetQuestionAnswersForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.GetQuestionAnswersForApplication(applicationId);
            //Assert.IsInstanceOf<List<QuestionAnswerModel>> (response, "response is List<QuestionAnswerModel>");
        }
        
        /// <summary>
        /// Test GetWebhooks
        /// </summary>
        [Test]
        public void GetWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionAnswerId = null;
            //var response = instance.GetWebhooks(questionAnswerId);
            //Assert.IsInstanceOf<List<QuestionAnswerWebhookModel>> (response, "response is List<QuestionAnswerWebhookModel>");
        }
        
        /// <summary>
        /// Test MoveContentItemToApplicationFeature
        /// </summary>
        [Test]
        public void MoveContentItemToApplicationFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentItemId = null;
            //string applicationFeatureId = null;
            //var response = instance.MoveContentItemToApplicationFeature(contentItemId, applicationFeatureId);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test RemoveUserDefinedParameter
        /// </summary>
        [Test]
        public void RemoveUserDefinedParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceWebhookId = null;
            //string parameterName = null;
            //var response = instance.RemoveUserDefinedParameter(instanceWebhookId, parameterName);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test RemoveWebhook
        /// </summary>
        [Test]
        public void RemoveWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionAnswerWebhookId = null;
            //var response = instance.RemoveWebhook(questionAnswerWebhookId);
            //Assert.IsInstanceOf<QuestionAnswerWebhookModel> (response, "response is QuestionAnswerWebhookModel");
        }
        
        /// <summary>
        /// Test ToggleIsLive
        /// </summary>
        [Test]
        public void ToggleIsLiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionAnswerId = null;
            //ToggleLiveRequest model = null;
            //var response = instance.ToggleIsLive(questionAnswerId, model);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test UpdateAttachedWebhook
        /// </summary>
        [Test]
        public void UpdateAttachedWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string questionAnswerId = null;
            //string instanceWebhookId = null;
            //WebhookParametersRequest parameters = null;
            //var response = instance.UpdateAttachedWebhook(questionAnswerId, instanceWebhookId, parameters);
            //Assert.IsInstanceOf<QuestionAnswerWebhookModel> (response, "response is QuestionAnswerWebhookModel");
        }
        
        /// <summary>
        /// Test UpdateFullContentItem
        /// </summary>
        [Test]
        public void UpdateFullContentItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentItemId = null;
            //QuestionAnswerModel model = null;
            //var response = instance.UpdateFullContentItem(contentItemId, model);
            //Assert.IsInstanceOf<QuestionAnswerModel> (response, "response is QuestionAnswerModel");
        }
        
        /// <summary>
        /// Test UpdateUserDefinedParameter
        /// </summary>
        [Test]
        public void UpdateUserDefinedParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceWebhookId = null;
            //UserDefinedWebhookParameterUpdateRequest request = null;
            //var response = instance.UpdateUserDefinedParameter(instanceWebhookId, request);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test UpdateWebhookParameter
        /// </summary>
        [Test]
        public void UpdateWebhookParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceWebhookId = null;
            //WebhookParameterUpdateRequest request = null;
            //var response = instance.UpdateWebhookParameter(instanceWebhookId, request);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
    }

}
