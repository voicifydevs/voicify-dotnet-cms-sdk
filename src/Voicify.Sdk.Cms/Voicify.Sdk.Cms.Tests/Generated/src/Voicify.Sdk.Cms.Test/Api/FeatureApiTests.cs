/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Cms.Api;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Test
{
    /// <summary>
    ///  Class for testing FeatureApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FeatureApiTests
    {
        private FeatureApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FeatureApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FeatureApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FeatureApi
            //Assert.IsInstanceOfType(typeof(FeatureApi), instance, "instance is a FeatureApi");
        }

        
        /// <summary>
        /// Test AddFeatureAsync
        /// </summary>
        [Test]
        public void AddFeatureAsyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //CreateApplicationFeatureRequest request = null;
            //var response = instance.AddFeatureAsync(applicationId, request);
            //Assert.IsInstanceOf<ApplicationFeatureModel> (response, "response is ApplicationFeatureModel");
        }
        
        /// <summary>
        /// Test AddWebhook
        /// </summary>
        [Test]
        public void AddWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //string webhookId = null;
            //WebhookParametersRequest parameters = null;
            //var response = instance.AddWebhook(applicationFeatureId, webhookId, parameters);
            //Assert.IsInstanceOf<ApplicationFeatureWebhookModel> (response, "response is ApplicationFeatureWebhookModel");
        }
        
        /// <summary>
        /// Test ChangeModule
        /// </summary>
        [Test]
        public void ChangeModuleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //string applicationModuleId = null;
            //var response = instance.ChangeModule(applicationFeatureId, applicationModuleId);
            //Assert.IsInstanceOf<ApplicationFeatureModel> (response, "response is ApplicationFeatureModel");
        }
        
        /// <summary>
        /// Test CreateUserDefinedParameter
        /// </summary>
        [Test]
        public void CreateUserDefinedParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceWebhookId = null;
            //UserDefinedWebhookParameterCreateRequest request = null;
            //var response = instance.CreateUserDefinedParameter(instanceWebhookId, request);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test DeleteFeature
        /// </summary>
        [Test]
        public void DeleteFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //var response = instance.DeleteFeature(applicationFeatureId);
            //Assert.IsInstanceOf<ApplicationFeatureModel> (response, "response is ApplicationFeatureModel");
        }
        
        /// <summary>
        /// Test DisableFeature
        /// </summary>
        [Test]
        public void DisableFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //var response = instance.DisableFeature(applicationFeatureId);
            //Assert.IsInstanceOf<ApplicationFeatureModel> (response, "response is ApplicationFeatureModel");
        }
        
        /// <summary>
        /// Test EnableFeature
        /// </summary>
        [Test]
        public void EnableFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //var response = instance.EnableFeature(applicationFeatureId);
            //Assert.IsInstanceOf<ApplicationFeatureModel> (response, "response is ApplicationFeatureModel");
        }
        
        /// <summary>
        /// Test GetAppFeaturesWithCounts
        /// </summary>
        [Test]
        public void GetAppFeaturesWithCountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.GetAppFeaturesWithCounts(applicationId);
            //Assert.IsInstanceOf<List<ConversationCountModel>> (response, "response is List<ConversationCountModel>");
        }
        
        /// <summary>
        /// Test GetAvailableApplicationFeatures
        /// </summary>
        [Test]
        public void GetAvailableApplicationFeaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.GetAvailableApplicationFeatures(applicationId);
            //Assert.IsInstanceOf<List<FeatureModel>> (response, "response is List<FeatureModel>");
        }
        
        /// <summary>
        /// Test GetBuiltInFeatures
        /// </summary>
        [Test]
        public void GetBuiltInFeaturesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetBuiltInFeatures();
            //Assert.IsInstanceOf<List<FeatureModel>> (response, "response is List<FeatureModel>");
        }
        
        /// <summary>
        /// Test GetContentItemsForApplicationFeature
        /// </summary>
        [Test]
        public void GetContentItemsForApplicationFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //var response = instance.GetContentItemsForApplicationFeature(applicationFeatureId);
            //Assert.IsInstanceOf<List<GenericContentModel>> (response, "response is List<GenericContentModel>");
        }
        
        /// <summary>
        /// Test GetFeatureTypes
        /// </summary>
        [Test]
        public void GetFeatureTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetFeatureTypes();
            //Assert.IsInstanceOf<List<FeatureTypeModel>> (response, "response is List<FeatureTypeModel>");
        }
        
        /// <summary>
        /// Test GetFeaturesForApplication
        /// </summary>
        [Test]
        public void GetFeaturesForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.GetFeaturesForApplication(applicationId);
            //Assert.IsInstanceOf<List<ApplicationFeatureModel>> (response, "response is List<ApplicationFeatureModel>");
        }
        
        /// <summary>
        /// Test GetWebhooks
        /// </summary>
        [Test]
        public void GetWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //var response = instance.GetWebhooks(applicationFeatureId);
            //Assert.IsInstanceOf<List<ApplicationFeatureWebhookModel>> (response, "response is List<ApplicationFeatureWebhookModel>");
        }
        
        /// <summary>
        /// Test RemoveUserDefinedParameter
        /// </summary>
        [Test]
        public void RemoveUserDefinedParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceWebhookId = null;
            //string parameterName = null;
            //var response = instance.RemoveUserDefinedParameter(instanceWebhookId, parameterName);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test RemoveWebhook
        /// </summary>
        [Test]
        public void RemoveWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureWebhookId = null;
            //var response = instance.RemoveWebhook(applicationFeatureWebhookId);
            //Assert.IsInstanceOf<ApplicationFeatureWebhookModel> (response, "response is ApplicationFeatureWebhookModel");
        }
        
        /// <summary>
        /// Test SetApplicationFeatureOrder
        /// </summary>
        [Test]
        public void SetApplicationFeatureOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string parentApplicationFeatureId = null;
            //List<string> applicationFeatureIds = null;
            //var response = instance.SetApplicationFeatureOrder(applicationId, parentApplicationFeatureId, applicationFeatureIds);
            //Assert.IsInstanceOf<List<ApplicationFeatureModel>> (response, "response is List<ApplicationFeatureModel>");
        }
        
        /// <summary>
        /// Test UpdateApplicationFeature
        /// </summary>
        [Test]
        public void UpdateApplicationFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //UpdateApplicationFeatureRequest model = null;
            //var response = instance.UpdateApplicationFeature(applicationFeatureId, model);
            //Assert.IsInstanceOf<ApplicationFeatureModel> (response, "response is ApplicationFeatureModel");
        }
        
        /// <summary>
        /// Test UpdateAttachedWebhook
        /// </summary>
        [Test]
        public void UpdateAttachedWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //string webhookInstanceId = null;
            //WebhookParametersRequest parameters = null;
            //var response = instance.UpdateAttachedWebhook(applicationFeatureId, webhookInstanceId, parameters);
            //Assert.IsInstanceOf<ApplicationFeatureWebhookModel> (response, "response is ApplicationFeatureWebhookModel");
        }
        
        /// <summary>
        /// Test UpdateParentForApplicationFeature
        /// </summary>
        [Test]
        public void UpdateParentForApplicationFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //string parentApplicationFeatureId = null;
            //var response = instance.UpdateParentForApplicationFeature(applicationFeatureId, parentApplicationFeatureId);
            //Assert.IsInstanceOf<ApplicationFeatureModel> (response, "response is ApplicationFeatureModel");
        }
        
        /// <summary>
        /// Test UpdateUserDefinedParameter
        /// </summary>
        [Test]
        public void UpdateUserDefinedParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceWebhookId = null;
            //UserDefinedWebhookParameterUpdateRequest request = null;
            //var response = instance.UpdateUserDefinedParameter(instanceWebhookId, request);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test UpdateWebhookParameter
        /// </summary>
        [Test]
        public void UpdateWebhookParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceWebhookId = null;
            //WebhookParameterUpdateRequest request = null;
            //var response = instance.UpdateWebhookParameter(instanceWebhookId, request);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
    }

}
