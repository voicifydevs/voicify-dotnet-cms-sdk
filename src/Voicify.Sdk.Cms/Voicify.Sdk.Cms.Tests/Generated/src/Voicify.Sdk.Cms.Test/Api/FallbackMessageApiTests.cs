/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Cms.Api;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Test
{
    /// <summary>
    ///  Class for testing FallbackMessageApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class FallbackMessageApiTests
    {
        private FallbackMessageApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FallbackMessageApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FallbackMessageApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' FallbackMessageApi
            //Assert.IsInstanceOfType(typeof(FallbackMessageApi), instance, "instance is a FallbackMessageApi");
        }

        
        /// <summary>
        /// Test AddAudioFileImage
        /// </summary>
        [Test]
        public void AddAudioFileImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageId = null;
            //string mediaItemId = null;
            //var response = instance.AddAudioFileImage(fallbackMessageId, mediaItemId);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test AddFallbackMessage
        /// </summary>
        [Test]
        public void AddFallbackMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //NewFallbackMessageRequest model = null;
            //var response = instance.AddFallbackMessage(applicationId, model);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test AddFallbackMessageStub
        /// </summary>
        [Test]
        public void AddFallbackMessageStubTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //NewFallbackMessageStubRequest model = null;
            //var response = instance.AddFallbackMessageStub(applicationId, model);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test AddLargeImage
        /// </summary>
        [Test]
        public void AddLargeImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageId = null;
            //string mediaItemId = null;
            //var response = instance.AddLargeImage(fallbackMessageId, mediaItemId);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test AddSmallImage
        /// </summary>
        [Test]
        public void AddSmallImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageId = null;
            //string mediaItemId = null;
            //var response = instance.AddSmallImage(fallbackMessageId, mediaItemId);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test AddVideoFile
        /// </summary>
        [Test]
        public void AddVideoFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageId = null;
            //string mediaItemId = null;
            //var response = instance.AddVideoFile(fallbackMessageId, mediaItemId);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test AddWebhook
        /// </summary>
        [Test]
        public void AddWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageId = null;
            //string webhookId = null;
            //WebhookParametersRequest parameters = null;
            //var response = instance.AddWebhook(fallbackMessageId, webhookId, parameters);
            //Assert.IsInstanceOf<FallbackMessageWebhookModel> (response, "response is FallbackMessageWebhookModel");
        }
        
        /// <summary>
        /// Test CopyContentItem
        /// </summary>
        [Test]
        public void CopyContentItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageId = null;
            //var response = instance.CopyContentItem(fallbackMessageId);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test CreateFullContentItem
        /// </summary>
        [Test]
        public void CreateFullContentItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //FallbackMessageModel model = null;
            //var response = instance.CreateFullContentItem(model);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test CreateUserDefinedParameter
        /// </summary>
        [Test]
        public void CreateUserDefinedParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceWebhookId = null;
            //UserDefinedWebhookParameterCreateRequest request = null;
            //var response = instance.CreateUserDefinedParameter(instanceWebhookId, request);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test DeleteFallbackMessage
        /// </summary>
        [Test]
        public void DeleteFallbackMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageId = null;
            //var response = instance.DeleteFallbackMessage(fallbackMessageId);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test FindFullById
        /// </summary>
        [Test]
        public void FindFullByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.FindFullById(id);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test GetByApplicationFeature
        /// </summary>
        [Test]
        public void GetByApplicationFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationFeatureId = null;
            //var response = instance.GetByApplicationFeature(applicationFeatureId);
            //Assert.IsInstanceOf<List<FallbackMessageModel>> (response, "response is List<FallbackMessageModel>");
        }
        
        /// <summary>
        /// Test GetCategories
        /// </summary>
        [Test]
        public void GetCategoriesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCategories();
            //Assert.IsInstanceOf<List<FallbackMessageCategoryModel>> (response, "response is List<FallbackMessageCategoryModel>");
        }
        
        /// <summary>
        /// Test GetFallbackMessagesForApplication
        /// </summary>
        [Test]
        public void GetFallbackMessagesForApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.GetFallbackMessagesForApplication(applicationId);
            //Assert.IsInstanceOf<List<FallbackMessageModel>> (response, "response is List<FallbackMessageModel>");
        }
        
        /// <summary>
        /// Test GetWebhooks
        /// </summary>
        [Test]
        public void GetWebhooksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageId = null;
            //var response = instance.GetWebhooks(fallbackMessageId);
            //Assert.IsInstanceOf<List<FallbackMessageWebhookModel>> (response, "response is List<FallbackMessageWebhookModel>");
        }
        
        /// <summary>
        /// Test MoveContentItemToApplicationFeature
        /// </summary>
        [Test]
        public void MoveContentItemToApplicationFeatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentItemId = null;
            //string applicationFeatureId = null;
            //var response = instance.MoveContentItemToApplicationFeature(contentItemId, applicationFeatureId);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test RemoveUserDefinedParameter
        /// </summary>
        [Test]
        public void RemoveUserDefinedParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceWebhookId = null;
            //string parameterName = null;
            //var response = instance.RemoveUserDefinedParameter(instanceWebhookId, parameterName);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test RemoveWebhook
        /// </summary>
        [Test]
        public void RemoveWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageWebhookId = null;
            //var response = instance.RemoveWebhook(fallbackMessageWebhookId);
            //Assert.IsInstanceOf<FallbackMessageWebhookModel> (response, "response is FallbackMessageWebhookModel");
        }
        
        /// <summary>
        /// Test ToggleIsLive
        /// </summary>
        [Test]
        public void ToggleIsLiveTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageId = null;
            //ToggleLiveRequest model = null;
            //var response = instance.ToggleIsLive(fallbackMessageId, model);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test UpdateAttachedWebhook
        /// </summary>
        [Test]
        public void UpdateAttachedWebhookTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageId = null;
            //string instanceWebhookId = null;
            //WebhookParametersRequest parameters = null;
            //var response = instance.UpdateAttachedWebhook(fallbackMessageId, instanceWebhookId, parameters);
            //Assert.IsInstanceOf<FallbackMessageWebhookModel> (response, "response is FallbackMessageWebhookModel");
        }
        
        /// <summary>
        /// Test UpdateFallbackMessage
        /// </summary>
        [Test]
        public void UpdateFallbackMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageId = null;
            //UpdateFallbackMessageRequest model = null;
            //var response = instance.UpdateFallbackMessage(fallbackMessageId, model);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test UpdateFallbackMessageStub
        /// </summary>
        [Test]
        public void UpdateFallbackMessageStubTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fallbackMessageId = null;
            //UpdateFallbackMessageStubRequest model = null;
            //var response = instance.UpdateFallbackMessageStub(fallbackMessageId, model);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test UpdateFullContentItem
        /// </summary>
        [Test]
        public void UpdateFullContentItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentItemId = null;
            //FallbackMessageModel model = null;
            //var response = instance.UpdateFullContentItem(contentItemId, model);
            //Assert.IsInstanceOf<FallbackMessageModel> (response, "response is FallbackMessageModel");
        }
        
        /// <summary>
        /// Test UpdateUserDefinedParameter
        /// </summary>
        [Test]
        public void UpdateUserDefinedParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceWebhookId = null;
            //UserDefinedWebhookParameterUpdateRequest request = null;
            //var response = instance.UpdateUserDefinedParameter(instanceWebhookId, request);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test UpdateWebhookParameter
        /// </summary>
        [Test]
        public void UpdateWebhookParameterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string instanceWebhookId = null;
            //WebhookParameterUpdateRequest request = null;
            //var response = instance.UpdateWebhookParameter(instanceWebhookId, request);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
    }

}
