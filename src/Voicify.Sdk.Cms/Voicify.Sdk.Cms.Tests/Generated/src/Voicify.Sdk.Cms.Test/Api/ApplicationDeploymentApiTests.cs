/* 
 * Voicify CMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Voicify.Sdk.Cms.Client;
using Voicify.Sdk.Cms.Api;
using Voicify.Sdk.Core.Models.Model;

namespace Voicify.Sdk.Cms.Test
{
    /// <summary>
    ///  Class for testing ApplicationDeploymentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ApplicationDeploymentApiTests
    {
        private ApplicationDeploymentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ApplicationDeploymentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ApplicationDeploymentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ApplicationDeploymentApi
            //Assert.IsInstanceOfType(typeof(ApplicationDeploymentApi), instance, "instance is a ApplicationDeploymentApi");
        }

        
        /// <summary>
        /// Test DeployNewLuisApp
        /// </summary>
        [Test]
        public void DeployNewLuisAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string luisRegion = null;
            //var response = instance.DeployNewLuisApp(applicationId, luisRegion);
            //Assert.IsInstanceOf<NewLuisAppResponse> (response, "response is NewLuisAppResponse");
        }
        
        /// <summary>
        /// Test DeployNewSkill
        /// </summary>
        [Test]
        public void DeployNewSkillTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.DeployNewSkill(applicationId);
            //Assert.IsInstanceOf<NewSkillResponse> (response, "response is NewSkillResponse");
        }
        
        /// <summary>
        /// Test GetAlexaVendors
        /// </summary>
        [Test]
        public void GetAlexaVendorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.GetAlexaVendors(applicationId);
            //Assert.IsInstanceOf<AlexaVendorResponse> (response, "response is AlexaVendorResponse");
        }
        
        /// <summary>
        /// Test GetApplicationLinkToAmazon
        /// </summary>
        [Test]
        public void GetApplicationLinkToAmazonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.GetApplicationLinkToAmazon(applicationId);
            //Assert.IsInstanceOf<DeploymentLink> (response, "response is DeploymentLink");
        }
        
        /// <summary>
        /// Test GetApplicationLinkToGoogle
        /// </summary>
        [Test]
        public void GetApplicationLinkToGoogleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.GetApplicationLinkToGoogle(applicationId);
            //Assert.IsInstanceOf<DeploymentLink> (response, "response is DeploymentLink");
        }
        
        /// <summary>
        /// Test GetApplicationLinkToMicrosoft
        /// </summary>
        [Test]
        public void GetApplicationLinkToMicrosoftTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.GetApplicationLinkToMicrosoft(applicationId);
            //Assert.IsInstanceOf<MicrosoftDeploymentLink> (response, "response is MicrosoftDeploymentLink");
        }
        
        /// <summary>
        /// Test GetApplicationsLinkedToAmazon
        /// </summary>
        [Test]
        public void GetApplicationsLinkedToAmazonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //var response = instance.GetApplicationsLinkedToAmazon(organizationId);
            //Assert.IsInstanceOf<List<ApplicationsByAmazonAccount>> (response, "response is List<ApplicationsByAmazonAccount>");
        }
        
        /// <summary>
        /// Test GetApplicationsLinkedToGoogle
        /// </summary>
        [Test]
        public void GetApplicationsLinkedToGoogleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //var response = instance.GetApplicationsLinkedToGoogle(organizationId);
            //Assert.IsInstanceOf<List<ApplicationsByGoogleAccount>> (response, "response is List<ApplicationsByGoogleAccount>");
        }
        
        /// <summary>
        /// Test GetApplicationsLinkedToMicrosoft
        /// </summary>
        [Test]
        public void GetApplicationsLinkedToMicrosoftTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organizationId = null;
            //var response = instance.GetApplicationsLinkedToMicrosoft(organizationId);
            //Assert.IsInstanceOf<List<ApplicationsByMicrosoftAccount>> (response, "response is List<ApplicationsByMicrosoftAccount>");
        }
        
        /// <summary>
        /// Test LinkAlexaSkillId
        /// </summary>
        [Test]
        public void LinkAlexaSkillIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string alexaSkillId = null;
            //var response = instance.LinkAlexaSkillId(applicationId, alexaSkillId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test LinkAlexaVendor
        /// </summary>
        [Test]
        public void LinkAlexaVendorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string vendorId = null;
            //var response = instance.LinkAlexaVendor(applicationId, vendorId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test LinkAmazonAuthToken
        /// </summary>
        [Test]
        public void LinkAmazonAuthTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string amazonTokenId = null;
            //var response = instance.LinkAmazonAuthToken(applicationId, amazonTokenId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test LinkAzureSubscription
        /// </summary>
        [Test]
        public void LinkAzureSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string subscriptionId = null;
            //var response = instance.LinkAzureSubscription(applicationId, subscriptionId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test LinkDialogflowAgentId
        /// </summary>
        [Test]
        public void LinkDialogflowAgentIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string dialogflowAgentId = null;
            //var response = instance.LinkDialogflowAgentId(applicationId, dialogflowAgentId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test LinkGoogleAuthToken
        /// </summary>
        [Test]
        public void LinkGoogleAuthTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string googleTokenId = null;
            //var response = instance.LinkGoogleAuthToken(applicationId, googleTokenId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test LinkLuisApp
        /// </summary>
        [Test]
        public void LinkLuisAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string luisAppId = null;
            //string luisRegion = null;
            //string locale = null;
            //var response = instance.LinkLuisApp(applicationId, luisAppId, luisRegion, locale);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test LinkLuisAuthoringKey
        /// </summary>
        [Test]
        public void LinkLuisAuthoringKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string luisKey = null;
            //var response = instance.LinkLuisAuthoringKey(applicationId, luisKey);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test LinkMicrosoftApp
        /// </summary>
        [Test]
        public void LinkMicrosoftAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //UpdateMicrosoftAppInfoRequest model = null;
            //var response = instance.LinkMicrosoftApp(applicationId, model);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test LinkMicrosoftAuthToken
        /// </summary>
        [Test]
        public void LinkMicrosoftAuthTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //string microsoftTokenId = null;
            //var response = instance.LinkMicrosoftAuthToken(applicationId, microsoftTokenId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test RemoveAlexaVendor
        /// </summary>
        [Test]
        public void RemoveAlexaVendorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.RemoveAlexaVendor(applicationId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test RemoveAmazonAuthToken
        /// </summary>
        [Test]
        public void RemoveAmazonAuthTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.RemoveAmazonAuthToken(applicationId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test RemoveAzureSubscription
        /// </summary>
        [Test]
        public void RemoveAzureSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.RemoveAzureSubscription(applicationId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test RemoveGoogleAuthToken
        /// </summary>
        [Test]
        public void RemoveGoogleAuthTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.RemoveGoogleAuthToken(applicationId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test UnlinkAlexaSkill
        /// </summary>
        [Test]
        public void UnlinkAlexaSkillTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.UnlinkAlexaSkill(applicationId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test UnlinkDialogflowAgent
        /// </summary>
        [Test]
        public void UnlinkDialogflowAgentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.UnlinkDialogflowAgent(applicationId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test UnlinkLuisApp
        /// </summary>
        [Test]
        public void UnlinkLuisAppTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.UnlinkLuisApp(applicationId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test UnlinkMicrosoftProject
        /// </summary>
        [Test]
        public void UnlinkMicrosoftProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string applicationId = null;
            //var response = instance.UnlinkMicrosoftProject(applicationId);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
    }

}
